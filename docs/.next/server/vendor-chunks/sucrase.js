"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sucrase";
exports.ids = ["vendor-chunks/sucrase"];
exports.modules = {

/***/ "(ssr)/./node_modules/sucrase/dist/esm/CJSImportProcessor.js":
/*!*************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/CJSImportProcessor.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CJSImportProcessor)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser/tokenizer */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser/tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _util_getImportExportSpecifierInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/getImportExportSpecifierInfo */ \"(ssr)/./node_modules/sucrase/dist/esm/util/getImportExportSpecifierInfo.js\");\n/* harmony import */ var _util_getNonTypeIdentifiers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/getNonTypeIdentifiers */ \"(ssr)/./node_modules/sucrase/dist/esm/util/getNonTypeIdentifiers.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Class responsible for preprocessing and bookkeeping import and export declarations within the\n * file.\n *\n * TypeScript uses a simpler mechanism that does not use functions like interopRequireDefault and\n * interopRequireWildcard, so we also allow that mode for compatibility.\n */\nclass CJSImportProcessor {\n   __init() {this.nonTypeIdentifiers = new Set()}\n   __init2() {this.importInfoByPath = new Map()}\n   __init3() {this.importsToReplace = new Map()}\n   __init4() {this.identifierReplacements = new Map()}\n   __init5() {this.exportBindingsByLocalName = new Map()}\n\n  constructor(\n     nameManager,\n     tokens,\n     enableLegacyTypeScriptModuleInterop,\n     options,\n     isTypeScriptTransformEnabled,\n     keepUnusedImports,\n     helperManager,\n  ) {;this.nameManager = nameManager;this.tokens = tokens;this.enableLegacyTypeScriptModuleInterop = enableLegacyTypeScriptModuleInterop;this.options = options;this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;this.keepUnusedImports = keepUnusedImports;this.helperManager = helperManager;CJSImportProcessor.prototype.__init.call(this);CJSImportProcessor.prototype.__init2.call(this);CJSImportProcessor.prototype.__init3.call(this);CJSImportProcessor.prototype.__init4.call(this);CJSImportProcessor.prototype.__init5.call(this);}\n\n  preprocessTokens() {\n    for (let i = 0; i < this.tokens.tokens.length; i++) {\n      if (\n        this.tokens.matches1AtIndex(i, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._import) &&\n        !this.tokens.matches3AtIndex(i, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._import, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)\n      ) {\n        this.preprocessImportAtIndex(i);\n      }\n      if (\n        this.tokens.matches1AtIndex(i, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export) &&\n        !this.tokens.matches2AtIndex(i, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)\n      ) {\n        this.preprocessExportAtIndex(i);\n      }\n    }\n    this.generateImportReplacements();\n  }\n\n  /**\n   * In TypeScript, import statements that only import types should be removed.\n   * This includes `import {} from 'foo';`, but not `import 'foo';`.\n   */\n  pruneTypeOnlyImports() {\n    this.nonTypeIdentifiers = (0,_util_getNonTypeIdentifiers__WEBPACK_IMPORTED_MODULE_4__.getNonTypeIdentifiers)(this.tokens, this.options);\n    for (const [path, importInfo] of this.importInfoByPath.entries()) {\n      if (\n        importInfo.hasBareImport ||\n        importInfo.hasStarExport ||\n        importInfo.exportStarNames.length > 0 ||\n        importInfo.namedExports.length > 0\n      ) {\n        continue;\n      }\n      const names = [\n        ...importInfo.defaultNames,\n        ...importInfo.wildcardNames,\n        ...importInfo.namedImports.map(({localName}) => localName),\n      ];\n      if (names.every((name) => this.shouldAutomaticallyElideImportedName(name))) {\n        this.importsToReplace.set(path, \"\");\n      }\n    }\n  }\n\n  shouldAutomaticallyElideImportedName(name) {\n    return (\n      this.isTypeScriptTransformEnabled &&\n      !this.keepUnusedImports &&\n      !this.nonTypeIdentifiers.has(name)\n    );\n  }\n\n   generateImportReplacements() {\n    for (const [path, importInfo] of this.importInfoByPath.entries()) {\n      const {\n        defaultNames,\n        wildcardNames,\n        namedImports,\n        namedExports,\n        exportStarNames,\n        hasStarExport,\n      } = importInfo;\n\n      if (\n        defaultNames.length === 0 &&\n        wildcardNames.length === 0 &&\n        namedImports.length === 0 &&\n        namedExports.length === 0 &&\n        exportStarNames.length === 0 &&\n        !hasStarExport\n      ) {\n        // Import is never used, so don't even assign a name.\n        this.importsToReplace.set(path, `require('${path}');`);\n        continue;\n      }\n\n      const primaryImportName = this.getFreeIdentifierForPath(path);\n      let secondaryImportName;\n      if (this.enableLegacyTypeScriptModuleInterop) {\n        secondaryImportName = primaryImportName;\n      } else {\n        secondaryImportName =\n          wildcardNames.length > 0 ? wildcardNames[0] : this.getFreeIdentifierForPath(path);\n      }\n      let requireCode = `var ${primaryImportName} = require('${path}');`;\n      if (wildcardNames.length > 0) {\n        for (const wildcardName of wildcardNames) {\n          const moduleExpr = this.enableLegacyTypeScriptModuleInterop\n            ? primaryImportName\n            : `${this.helperManager.getHelperName(\"interopRequireWildcard\")}(${primaryImportName})`;\n          requireCode += ` var ${wildcardName} = ${moduleExpr};`;\n        }\n      } else if (exportStarNames.length > 0 && secondaryImportName !== primaryImportName) {\n        requireCode += ` var ${secondaryImportName} = ${this.helperManager.getHelperName(\n          \"interopRequireWildcard\",\n        )}(${primaryImportName});`;\n      } else if (defaultNames.length > 0 && secondaryImportName !== primaryImportName) {\n        requireCode += ` var ${secondaryImportName} = ${this.helperManager.getHelperName(\n          \"interopRequireDefault\",\n        )}(${primaryImportName});`;\n      }\n\n      for (const {importedName, localName} of namedExports) {\n        requireCode += ` ${this.helperManager.getHelperName(\n          \"createNamedExportFrom\",\n        )}(${primaryImportName}, '${localName}', '${importedName}');`;\n      }\n      for (const exportStarName of exportStarNames) {\n        requireCode += ` exports.${exportStarName} = ${secondaryImportName};`;\n      }\n      if (hasStarExport) {\n        requireCode += ` ${this.helperManager.getHelperName(\n          \"createStarExport\",\n        )}(${primaryImportName});`;\n      }\n\n      this.importsToReplace.set(path, requireCode);\n\n      for (const defaultName of defaultNames) {\n        this.identifierReplacements.set(defaultName, `${secondaryImportName}.default`);\n      }\n      for (const {importedName, localName} of namedImports) {\n        this.identifierReplacements.set(localName, `${primaryImportName}.${importedName}`);\n      }\n    }\n  }\n\n  getFreeIdentifierForPath(path) {\n    const components = path.split(\"/\");\n    const lastComponent = components[components.length - 1];\n    const baseName = lastComponent.replace(/\\W/g, \"\");\n    return this.nameManager.claimFreeName(`_${baseName}`);\n  }\n\n   preprocessImportAtIndex(index) {\n    const defaultNames = [];\n    const wildcardNames = [];\n    const namedImports = [];\n\n    index++;\n    if (\n      (this.tokens.matchesContextualAtIndex(index, _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type) ||\n        this.tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._typeof)) &&\n      !this.tokens.matches1AtIndex(index + 1, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma) &&\n      !this.tokens.matchesContextualAtIndex(index + 1, _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._from)\n    ) {\n      // import type declaration, so no need to process anything.\n      return;\n    }\n\n    if (this.tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL)) {\n      // Dynamic import, so nothing to do\n      return;\n    }\n\n    if (this.tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n      defaultNames.push(this.tokens.identifierNameAtIndex(index));\n      index++;\n      if (this.tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma)) {\n        index++;\n      }\n    }\n\n    if (this.tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.star)) {\n      // * as\n      index += 2;\n      wildcardNames.push(this.tokens.identifierNameAtIndex(index));\n      index++;\n    }\n\n    if (this.tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL)) {\n      const result = this.getNamedImports(index + 1);\n      index = result.newIndex;\n\n      for (const namedImport of result.namedImports) {\n        // Treat {default as X} as a default import to ensure usage of require interop helper\n        if (namedImport.importedName === \"default\") {\n          defaultNames.push(namedImport.localName);\n        } else {\n          namedImports.push(namedImport);\n        }\n      }\n    }\n\n    if (this.tokens.matchesContextualAtIndex(index, _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._from)) {\n      index++;\n    }\n\n    if (!this.tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)) {\n      throw new Error(\"Expected string token at the end of import statement.\");\n    }\n    const path = this.tokens.stringValueAtIndex(index);\n    const importInfo = this.getImportInfo(path);\n    importInfo.defaultNames.push(...defaultNames);\n    importInfo.wildcardNames.push(...wildcardNames);\n    importInfo.namedImports.push(...namedImports);\n    if (defaultNames.length === 0 && wildcardNames.length === 0 && namedImports.length === 0) {\n      importInfo.hasBareImport = true;\n    }\n  }\n\n   preprocessExportAtIndex(index) {\n    if (\n      this.tokens.matches2AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._var) ||\n      this.tokens.matches2AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._let) ||\n      this.tokens.matches2AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._const)\n    ) {\n      this.preprocessVarExportAtIndex(index);\n    } else if (\n      this.tokens.matches2AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._function) ||\n      this.tokens.matches2AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._class)\n    ) {\n      const exportName = this.tokens.identifierNameAtIndex(index + 2);\n      this.addExportBinding(exportName, exportName);\n    } else if (this.tokens.matches3AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._function)) {\n      const exportName = this.tokens.identifierNameAtIndex(index + 3);\n      this.addExportBinding(exportName, exportName);\n    } else if (this.tokens.matches2AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL)) {\n      this.preprocessNamedExportAtIndex(index);\n    } else if (this.tokens.matches2AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.star)) {\n      this.preprocessExportStarAtIndex(index);\n    }\n  }\n\n   preprocessVarExportAtIndex(index) {\n    let depth = 0;\n    // Handle cases like `export let {x} = y;`, starting at the open-brace in that case.\n    for (let i = index + 2; ; i++) {\n      if (\n        this.tokens.matches1AtIndex(i, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL) ||\n        this.tokens.matches1AtIndex(i, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dollarBraceL) ||\n        this.tokens.matches1AtIndex(i, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL)\n      ) {\n        depth++;\n      } else if (\n        this.tokens.matches1AtIndex(i, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR) ||\n        this.tokens.matches1AtIndex(i, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR)\n      ) {\n        depth--;\n      } else if (depth === 0 && !this.tokens.matches1AtIndex(i, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n        break;\n      } else if (this.tokens.matches1AtIndex(1, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n        const endIndex = this.tokens.currentToken().rhsEndIndex;\n        if (endIndex == null) {\n          throw new Error(\"Expected = token with an end index.\");\n        }\n        i = endIndex - 1;\n      } else {\n        const token = this.tokens.tokens[i];\n        if ((0,_parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.isDeclaration)(token)) {\n          const exportName = this.tokens.identifierNameAtIndex(i);\n          this.identifierReplacements.set(exportName, `exports.${exportName}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Walk this export statement just in case it's an export...from statement.\n   * If it is, combine it into the import info for that path. Otherwise, just\n   * bail out; it'll be handled later.\n   */\n   preprocessNamedExportAtIndex(index) {\n    // export {\n    index += 2;\n    const {newIndex, namedImports} = this.getNamedImports(index);\n    index = newIndex;\n\n    if (this.tokens.matchesContextualAtIndex(index, _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._from)) {\n      index++;\n    } else {\n      // Reinterpret \"a as b\" to be local/exported rather than imported/local.\n      for (const {importedName: localName, localName: exportedName} of namedImports) {\n        this.addExportBinding(localName, exportedName);\n      }\n      return;\n    }\n\n    if (!this.tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)) {\n      throw new Error(\"Expected string token at the end of import statement.\");\n    }\n    const path = this.tokens.stringValueAtIndex(index);\n    const importInfo = this.getImportInfo(path);\n    importInfo.namedExports.push(...namedImports);\n  }\n\n   preprocessExportStarAtIndex(index) {\n    let exportedName = null;\n    if (this.tokens.matches3AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.star, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._as)) {\n      // export * as\n      index += 3;\n      exportedName = this.tokens.identifierNameAtIndex(index);\n      // foo from\n      index += 2;\n    } else {\n      // export * from\n      index += 3;\n    }\n    if (!this.tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)) {\n      throw new Error(\"Expected string token at the end of star export statement.\");\n    }\n    const path = this.tokens.stringValueAtIndex(index);\n    const importInfo = this.getImportInfo(path);\n    if (exportedName !== null) {\n      importInfo.exportStarNames.push(exportedName);\n    } else {\n      importInfo.hasStarExport = true;\n    }\n  }\n\n   getNamedImports(index) {\n    const namedImports = [];\n    while (true) {\n      if (this.tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n        index++;\n        break;\n      }\n\n      const specifierInfo = (0,_util_getImportExportSpecifierInfo__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.tokens, index);\n      index = specifierInfo.endIndex;\n      if (!specifierInfo.isType) {\n        namedImports.push({\n          importedName: specifierInfo.leftName,\n          localName: specifierInfo.rightName,\n        });\n      }\n\n      if (this.tokens.matches2AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n        index += 2;\n        break;\n      } else if (this.tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n        index++;\n        break;\n      } else if (this.tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma)) {\n        index++;\n      } else {\n        throw new Error(`Unexpected token: ${JSON.stringify(this.tokens.tokens[index])}`);\n      }\n    }\n    return {newIndex: index, namedImports};\n  }\n\n  /**\n   * Get a mutable import info object for this path, creating one if it doesn't\n   * exist yet.\n   */\n   getImportInfo(path) {\n    const existingInfo = this.importInfoByPath.get(path);\n    if (existingInfo) {\n      return existingInfo;\n    }\n    const newInfo = {\n      defaultNames: [],\n      wildcardNames: [],\n      namedImports: [],\n      namedExports: [],\n      hasBareImport: false,\n      exportStarNames: [],\n      hasStarExport: false,\n    };\n    this.importInfoByPath.set(path, newInfo);\n    return newInfo;\n  }\n\n   addExportBinding(localName, exportedName) {\n    if (!this.exportBindingsByLocalName.has(localName)) {\n      this.exportBindingsByLocalName.set(localName, []);\n    }\n    this.exportBindingsByLocalName.get(localName).push(exportedName);\n  }\n\n  /**\n   * Return the code to use for the import for this path, or the empty string if\n   * the code has already been \"claimed\" by a previous import.\n   */\n  claimImportCode(importPath) {\n    const result = this.importsToReplace.get(importPath);\n    this.importsToReplace.set(importPath, \"\");\n    return result || \"\";\n  }\n\n  getIdentifierReplacement(identifierName) {\n    return this.identifierReplacements.get(identifierName) || null;\n  }\n\n  /**\n   * Return a string like `exports.foo = exports.bar`.\n   */\n  resolveExportBinding(assignedName) {\n    const exportedNames = this.exportBindingsByLocalName.get(assignedName);\n    if (!exportedNames || exportedNames.length === 0) {\n      return null;\n    }\n    return exportedNames.map((exportedName) => `exports.${exportedName}`).join(\" = \");\n  }\n\n  /**\n   * Return all imported/exported names where we might be interested in whether usages of those\n   * names are shadowed.\n   */\n  getGlobalNames() {\n    return new Set([\n      ...this.identifierReplacements.keys(),\n      ...this.exportBindingsByLocalName.keys(),\n    ]);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/CJSImportProcessor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/HelperManager.js":
/*!********************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/HelperManager.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HelperManager: () => (/* binding */ HelperManager)\n/* harmony export */ });\n\n\nconst HELPERS = {\n  require: `\n    import {createRequire as CREATE_REQUIRE_NAME} from \"module\";\n    const require = CREATE_REQUIRE_NAME(import.meta.url);\n  `,\n  interopRequireWildcard: `\n    function interopRequireWildcard(obj) {\n      if (obj && obj.__esModule) {\n        return obj;\n      } else {\n        var newObj = {};\n        if (obj != null) {\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              newObj[key] = obj[key];\n            }\n          }\n        }\n        newObj.default = obj;\n        return newObj;\n      }\n    }\n  `,\n  interopRequireDefault: `\n    function interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n  `,\n  createNamedExportFrom: `\n    function createNamedExportFrom(obj, localName, importedName) {\n      Object.defineProperty(exports, localName, {enumerable: true, configurable: true, get: () => obj[importedName]});\n    }\n  `,\n  // Note that TypeScript and Babel do this differently; TypeScript does a simple existence\n  // check in the exports object and does a plain assignment, whereas Babel uses\n  // defineProperty and builds an object of explicitly-exported names so that star exports can\n  // always take lower precedence. For now, we do the easier TypeScript thing.\n  createStarExport: `\n    function createStarExport(obj) {\n      Object.keys(obj)\n        .filter((key) => key !== \"default\" && key !== \"__esModule\")\n        .forEach((key) => {\n          if (exports.hasOwnProperty(key)) {\n            return;\n          }\n          Object.defineProperty(exports, key, {enumerable: true, configurable: true, get: () => obj[key]});\n        });\n    }\n  `,\n  nullishCoalesce: `\n    function nullishCoalesce(lhs, rhsFn) {\n      if (lhs != null) {\n        return lhs;\n      } else {\n        return rhsFn();\n      }\n    }\n  `,\n  asyncNullishCoalesce: `\n    async function asyncNullishCoalesce(lhs, rhsFn) {\n      if (lhs != null) {\n        return lhs;\n      } else {\n        return await rhsFn();\n      }\n    }\n  `,\n  optionalChain: `\n    function optionalChain(ops) {\n      let lastAccessLHS = undefined;\n      let value = ops[0];\n      let i = 1;\n      while (i < ops.length) {\n        const op = ops[i];\n        const fn = ops[i + 1];\n        i += 2;\n        if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n          return undefined;\n        }\n        if (op === 'access' || op === 'optionalAccess') {\n          lastAccessLHS = value;\n          value = fn(value);\n        } else if (op === 'call' || op === 'optionalCall') {\n          value = fn((...args) => value.call(lastAccessLHS, ...args));\n          lastAccessLHS = undefined;\n        }\n      }\n      return value;\n    }\n  `,\n  asyncOptionalChain: `\n    async function asyncOptionalChain(ops) {\n      let lastAccessLHS = undefined;\n      let value = ops[0];\n      let i = 1;\n      while (i < ops.length) {\n        const op = ops[i];\n        const fn = ops[i + 1];\n        i += 2;\n        if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n          return undefined;\n        }\n        if (op === 'access' || op === 'optionalAccess') {\n          lastAccessLHS = value;\n          value = await fn(value);\n        } else if (op === 'call' || op === 'optionalCall') {\n          value = await fn((...args) => value.call(lastAccessLHS, ...args));\n          lastAccessLHS = undefined;\n        }\n      }\n      return value;\n    }\n  `,\n  optionalChainDelete: `\n    function optionalChainDelete(ops) {\n      const result = OPTIONAL_CHAIN_NAME(ops);\n      return result == null ? true : result;\n    }\n  `,\n  asyncOptionalChainDelete: `\n    async function asyncOptionalChainDelete(ops) {\n      const result = await ASYNC_OPTIONAL_CHAIN_NAME(ops);\n      return result == null ? true : result;\n    }\n  `,\n};\n\nclass HelperManager {\n  __init() {this.helperNames = {}}\n  __init2() {this.createRequireName = null}\n  constructor( nameManager) {;this.nameManager = nameManager;HelperManager.prototype.__init.call(this);HelperManager.prototype.__init2.call(this);}\n\n  getHelperName(baseName) {\n    let helperName = this.helperNames[baseName];\n    if (helperName) {\n      return helperName;\n    }\n    helperName = this.nameManager.claimFreeName(`_${baseName}`);\n    this.helperNames[baseName] = helperName;\n    return helperName;\n  }\n\n  emitHelpers() {\n    let resultCode = \"\";\n    if (this.helperNames.optionalChainDelete) {\n      this.getHelperName(\"optionalChain\");\n    }\n    if (this.helperNames.asyncOptionalChainDelete) {\n      this.getHelperName(\"asyncOptionalChain\");\n    }\n    for (const [baseName, helperCodeTemplate] of Object.entries(HELPERS)) {\n      const helperName = this.helperNames[baseName];\n      let helperCode = helperCodeTemplate;\n      if (baseName === \"optionalChainDelete\") {\n        helperCode = helperCode.replace(\"OPTIONAL_CHAIN_NAME\", this.helperNames.optionalChain);\n      } else if (baseName === \"asyncOptionalChainDelete\") {\n        helperCode = helperCode.replace(\n          \"ASYNC_OPTIONAL_CHAIN_NAME\",\n          this.helperNames.asyncOptionalChain,\n        );\n      } else if (baseName === \"require\") {\n        if (this.createRequireName === null) {\n          this.createRequireName = this.nameManager.claimFreeName(\"_createRequire\");\n        }\n        helperCode = helperCode.replace(/CREATE_REQUIRE_NAME/g, this.createRequireName);\n      }\n      if (helperName) {\n        resultCode += \" \";\n        resultCode += helperCode.replace(baseName, helperName).replace(/\\s+/g, \" \").trim();\n      }\n    }\n    return resultCode;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/HelperManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/NameManager.js":
/*!******************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/NameManager.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NameManager)\n/* harmony export */ });\n/* harmony import */ var _util_getIdentifierNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/getIdentifierNames */ \"(ssr)/./node_modules/sucrase/dist/esm/util/getIdentifierNames.js\");\n\n\n\nclass NameManager {\n    __init() {this.usedNames = new Set()}\n\n  constructor(code, tokens) {;NameManager.prototype.__init.call(this);\n    this.usedNames = new Set((0,_util_getIdentifierNames__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(code, tokens));\n  }\n\n  claimFreeName(name) {\n    const newName = this.findFreeName(name);\n    this.usedNames.add(newName);\n    return newName;\n  }\n\n  findFreeName(name) {\n    if (!this.usedNames.has(name)) {\n      return name;\n    }\n    let suffixNum = 2;\n    while (this.usedNames.has(name + String(suffixNum))) {\n      suffixNum++;\n    }\n    return name + String(suffixNum);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9OYW1lTWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFDMkQ7O0FBRTVDO0FBQ2YsY0FBYzs7QUFFZCw4QkFBOEI7QUFDOUIsNkJBQTZCLG9FQUFrQjtBQUMvQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1saWJyYXJ5LWRvY3MvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9OYW1lTWFuYWdlci5qcz81MjNiIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IGdldElkZW50aWZpZXJOYW1lcyBmcm9tIFwiLi91dGlsL2dldElkZW50aWZpZXJOYW1lc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYW1lTWFuYWdlciB7XG4gICAgX19pbml0KCkge3RoaXMudXNlZE5hbWVzID0gbmV3IFNldCgpfVxuXG4gIGNvbnN0cnVjdG9yKGNvZGUsIHRva2VucykgeztOYW1lTWFuYWdlci5wcm90b3R5cGUuX19pbml0LmNhbGwodGhpcyk7XG4gICAgdGhpcy51c2VkTmFtZXMgPSBuZXcgU2V0KGdldElkZW50aWZpZXJOYW1lcyhjb2RlLCB0b2tlbnMpKTtcbiAgfVxuXG4gIGNsYWltRnJlZU5hbWUobmFtZSkge1xuICAgIGNvbnN0IG5ld05hbWUgPSB0aGlzLmZpbmRGcmVlTmFtZShuYW1lKTtcbiAgICB0aGlzLnVzZWROYW1lcy5hZGQobmV3TmFtZSk7XG4gICAgcmV0dXJuIG5ld05hbWU7XG4gIH1cblxuICBmaW5kRnJlZU5hbWUobmFtZSkge1xuICAgIGlmICghdGhpcy51c2VkTmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG4gICAgbGV0IHN1ZmZpeE51bSA9IDI7XG4gICAgd2hpbGUgKHRoaXMudXNlZE5hbWVzLmhhcyhuYW1lICsgU3RyaW5nKHN1ZmZpeE51bSkpKSB7XG4gICAgICBzdWZmaXhOdW0rKztcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUgKyBTdHJpbmcoc3VmZml4TnVtKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/NameManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/Options-gen-types.js":
/*!************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/Options-gen-types.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Options: () => (/* binding */ Options),\n/* harmony export */   SourceMapOptions: () => (/* binding */ SourceMapOptions),\n/* harmony export */   Transform: () => (/* binding */ Transform),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ts-interface-checker */ \"(ssr)/./node_modules/ts-interface-checker/dist/index.js\");\n/* harmony import */ var ts_interface_checker__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * This module was automatically generated by `ts-interface-builder`\n */\n\n// tslint:disable:object-literal-key-quotes\n\nconst Transform = ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.union(\n  ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.lit(\"jsx\"),\n  ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.lit(\"typescript\"),\n  ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.lit(\"flow\"),\n  ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.lit(\"imports\"),\n  ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.lit(\"react-hot-loader\"),\n  ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.lit(\"jest\"),\n);\n\nconst SourceMapOptions = ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.iface([], {\n  compiledFilename: \"string\",\n});\n\nconst Options = ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.iface([], {\n  transforms: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.array(\"Transform\"),\n  disableESTransforms: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.opt(\"boolean\"),\n  jsxRuntime: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.opt(ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.union(ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.lit(\"classic\"), ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.lit(\"automatic\"), ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.lit(\"preserve\"))),\n  production: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.opt(\"boolean\"),\n  jsxImportSource: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.opt(\"string\"),\n  jsxPragma: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.opt(\"string\"),\n  jsxFragmentPragma: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.opt(\"string\"),\n  keepUnusedImports: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.opt(\"boolean\"),\n  preserveDynamicImport: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.opt(\"boolean\"),\n  injectCreateRequireForImportRequire: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.opt(\"boolean\"),\n  enableLegacyTypeScriptModuleInterop: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.opt(\"boolean\"),\n  enableLegacyBabel5ModuleInterop: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.opt(\"boolean\"),\n  sourceMapOptions: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.opt(\"SourceMapOptions\"),\n  filePath: ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.opt(\"string\"),\n});\n\nconst exportedTypeSuite = {\n  Transform,\n  SourceMapOptions,\n  Options,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (exportedTypeSuite);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9PcHRpb25zLWdlbi10eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDMEM7QUFDMUM7O0FBRU8sa0JBQWtCLHVEQUFPO0FBQ2hDLEVBQUUscURBQUs7QUFDUCxFQUFFLHFEQUFLO0FBQ1AsRUFBRSxxREFBSztBQUNQLEVBQUUscURBQUs7QUFDUCxFQUFFLHFEQUFLO0FBQ1AsRUFBRSxxREFBSztBQUNQOztBQUVPLHlCQUF5Qix1REFBTztBQUN2QztBQUNBLENBQUM7O0FBRU0sZ0JBQWdCLHVEQUFPO0FBQzlCLGNBQWMsdURBQU87QUFDckIsdUJBQXVCLHFEQUFLO0FBQzVCLGNBQWMscURBQUssQ0FBQyx1REFBTyxDQUFDLHFEQUFLLGFBQWEscURBQUssZUFBZSxxREFBSztBQUN2RSxjQUFjLHFEQUFLO0FBQ25CLG1CQUFtQixxREFBSztBQUN4QixhQUFhLHFEQUFLO0FBQ2xCLHFCQUFxQixxREFBSztBQUMxQixxQkFBcUIscURBQUs7QUFDMUIseUJBQXlCLHFEQUFLO0FBQzlCLHVDQUF1QyxxREFBSztBQUM1Qyx1Q0FBdUMscURBQUs7QUFDNUMsbUNBQW1DLHFEQUFLO0FBQ3hDLG9CQUFvQixxREFBSztBQUN6QixZQUFZLHFEQUFLO0FBQ2pCLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLGlCQUFpQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktbGlicmFyeS1kb2NzLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC9lc20vT3B0aW9ucy1nZW4tdHlwZXMuanM/NjE1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgbW9kdWxlIHdhcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBgdHMtaW50ZXJmYWNlLWJ1aWxkZXJgXG4gKi9cbmltcG9ydCAqIGFzIHQgZnJvbSBcInRzLWludGVyZmFjZS1jaGVja2VyXCI7XG4vLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1rZXktcXVvdGVzXG5cbmV4cG9ydCBjb25zdCBUcmFuc2Zvcm0gPSB0LnVuaW9uKFxuICB0LmxpdChcImpzeFwiKSxcbiAgdC5saXQoXCJ0eXBlc2NyaXB0XCIpLFxuICB0LmxpdChcImZsb3dcIiksXG4gIHQubGl0KFwiaW1wb3J0c1wiKSxcbiAgdC5saXQoXCJyZWFjdC1ob3QtbG9hZGVyXCIpLFxuICB0LmxpdChcImplc3RcIiksXG4pO1xuXG5leHBvcnQgY29uc3QgU291cmNlTWFwT3B0aW9ucyA9IHQuaWZhY2UoW10sIHtcbiAgY29tcGlsZWRGaWxlbmFtZTogXCJzdHJpbmdcIixcbn0pO1xuXG5leHBvcnQgY29uc3QgT3B0aW9ucyA9IHQuaWZhY2UoW10sIHtcbiAgdHJhbnNmb3JtczogdC5hcnJheShcIlRyYW5zZm9ybVwiKSxcbiAgZGlzYWJsZUVTVHJhbnNmb3JtczogdC5vcHQoXCJib29sZWFuXCIpLFxuICBqc3hSdW50aW1lOiB0Lm9wdCh0LnVuaW9uKHQubGl0KFwiY2xhc3NpY1wiKSwgdC5saXQoXCJhdXRvbWF0aWNcIiksIHQubGl0KFwicHJlc2VydmVcIikpKSxcbiAgcHJvZHVjdGlvbjogdC5vcHQoXCJib29sZWFuXCIpLFxuICBqc3hJbXBvcnRTb3VyY2U6IHQub3B0KFwic3RyaW5nXCIpLFxuICBqc3hQcmFnbWE6IHQub3B0KFwic3RyaW5nXCIpLFxuICBqc3hGcmFnbWVudFByYWdtYTogdC5vcHQoXCJzdHJpbmdcIiksXG4gIGtlZXBVbnVzZWRJbXBvcnRzOiB0Lm9wdChcImJvb2xlYW5cIiksXG4gIHByZXNlcnZlRHluYW1pY0ltcG9ydDogdC5vcHQoXCJib29sZWFuXCIpLFxuICBpbmplY3RDcmVhdGVSZXF1aXJlRm9ySW1wb3J0UmVxdWlyZTogdC5vcHQoXCJib29sZWFuXCIpLFxuICBlbmFibGVMZWdhY3lUeXBlU2NyaXB0TW9kdWxlSW50ZXJvcDogdC5vcHQoXCJib29sZWFuXCIpLFxuICBlbmFibGVMZWdhY3lCYWJlbDVNb2R1bGVJbnRlcm9wOiB0Lm9wdChcImJvb2xlYW5cIiksXG4gIHNvdXJjZU1hcE9wdGlvbnM6IHQub3B0KFwiU291cmNlTWFwT3B0aW9uc1wiKSxcbiAgZmlsZVBhdGg6IHQub3B0KFwic3RyaW5nXCIpLFxufSk7XG5cbmNvbnN0IGV4cG9ydGVkVHlwZVN1aXRlID0ge1xuICBUcmFuc2Zvcm0sXG4gIFNvdXJjZU1hcE9wdGlvbnMsXG4gIE9wdGlvbnMsXG59O1xuZXhwb3J0IGRlZmF1bHQgZXhwb3J0ZWRUeXBlU3VpdGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/Options-gen-types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/Options.js":
/*!**************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/Options.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateOptions: () => (/* binding */ validateOptions)\n/* harmony export */ });\n/* harmony import */ var ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ts-interface-checker */ \"(ssr)/./node_modules/ts-interface-checker/dist/index.js\");\n/* harmony import */ var ts_interface_checker__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Options_gen_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Options-gen-types */ \"(ssr)/./node_modules/sucrase/dist/esm/Options-gen-types.js\");\n\n\n\n\nconst {Options: OptionsChecker} = (0,ts_interface_checker__WEBPACK_IMPORTED_MODULE_0__.createCheckers)(_Options_gen_types__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction validateOptions(options) {\n  OptionsChecker.strictCheck(options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9PcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0Q7O0FBRUY7O0FBRWxELE9BQU8seUJBQXlCLEVBQUUsb0VBQWMsQ0FBQywwREFBZTs7QUFFaEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEZPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL09wdGlvbnMuanM/OTllOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NyZWF0ZUNoZWNrZXJzfSBmcm9tIFwidHMtaW50ZXJmYWNlLWNoZWNrZXJcIjtcblxuaW1wb3J0IE9wdGlvbnNHZW5UeXBlcyBmcm9tIFwiLi9PcHRpb25zLWdlbi10eXBlc1wiO1xuXG5jb25zdCB7T3B0aW9uczogT3B0aW9uc0NoZWNrZXJ9ID0gY3JlYXRlQ2hlY2tlcnMoT3B0aW9uc0dlblR5cGVzKTtcblxuIFxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgT3B0aW9uc0NoZWNrZXIuc3RyaWN0Q2hlY2sob3B0aW9ucyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/Options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/TokenProcessor.js":
/*!*********************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/TokenProcessor.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TokenProcessor)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _util_isAsyncOperation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/isAsyncOperation */ \"(ssr)/./node_modules/sucrase/dist/esm/util/isAsyncOperation.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass TokenProcessor {\n   __init() {this.resultCode = \"\"}\n  // Array mapping input token index to optional string index position in the\n  // output code.\n   __init2() {this.resultMappings = new Array(this.tokens.length)}\n   __init3() {this.tokenIndex = 0}\n\n  constructor(\n     code,\n     tokens,\n     isFlowEnabled,\n     disableESTransforms,\n     helperManager,\n  ) {;this.code = code;this.tokens = tokens;this.isFlowEnabled = isFlowEnabled;this.disableESTransforms = disableESTransforms;this.helperManager = helperManager;TokenProcessor.prototype.__init.call(this);TokenProcessor.prototype.__init2.call(this);TokenProcessor.prototype.__init3.call(this);}\n\n  /**\n   * Snapshot the token state in a way that can be restored later, useful for\n   * things like lookahead.\n   *\n   * resultMappings do not need to be copied since in all use cases, they will\n   * be overwritten anyway after restore.\n   */\n  snapshot() {\n    return {\n      resultCode: this.resultCode,\n      tokenIndex: this.tokenIndex,\n    };\n  }\n\n  restoreToSnapshot(snapshot) {\n    this.resultCode = snapshot.resultCode;\n    this.tokenIndex = snapshot.tokenIndex;\n  }\n\n  /**\n   * Remove and return the code generated since the snapshot, leaving the\n   * current token position in-place. Unlike most TokenProcessor operations,\n   * this operation can result in input/output line number mismatches because\n   * the removed code may contain newlines, so this operation should be used\n   * sparingly.\n   */\n  dangerouslyGetAndRemoveCodeSinceSnapshot(snapshot) {\n    const result = this.resultCode.slice(snapshot.resultCode.length);\n    this.resultCode = snapshot.resultCode;\n    return result;\n  }\n\n  reset() {\n    this.resultCode = \"\";\n    this.resultMappings = new Array(this.tokens.length);\n    this.tokenIndex = 0;\n  }\n\n  matchesContextualAtIndex(index, contextualKeyword) {\n    return (\n      this.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.name) &&\n      this.tokens[index].contextualKeyword === contextualKeyword\n    );\n  }\n\n  identifierNameAtIndex(index) {\n    // TODO: We need to process escapes since technically you can have unicode escapes in variable\n    // names.\n    return this.identifierNameForToken(this.tokens[index]);\n  }\n\n  identifierNameAtRelativeIndex(relativeIndex) {\n    return this.identifierNameForToken(this.tokenAtRelativeIndex(relativeIndex));\n  }\n\n  identifierName() {\n    return this.identifierNameForToken(this.currentToken());\n  }\n\n  identifierNameForToken(token) {\n    return this.code.slice(token.start, token.end);\n  }\n\n  rawCodeForToken(token) {\n    return this.code.slice(token.start, token.end);\n  }\n\n  stringValueAtIndex(index) {\n    return this.stringValueForToken(this.tokens[index]);\n  }\n\n  stringValue() {\n    return this.stringValueForToken(this.currentToken());\n  }\n\n  stringValueForToken(token) {\n    // This is used to identify when two imports are the same and to resolve TypeScript enum keys.\n    // Ideally we'd process escapes within the strings, but for now we pretty much take the raw\n    // code.\n    return this.code.slice(token.start + 1, token.end - 1);\n  }\n\n  matches1AtIndex(index, t1) {\n    return this.tokens[index].type === t1;\n  }\n\n  matches2AtIndex(index, t1, t2) {\n    return this.tokens[index].type === t1 && this.tokens[index + 1].type === t2;\n  }\n\n  matches3AtIndex(index, t1, t2, t3) {\n    return (\n      this.tokens[index].type === t1 &&\n      this.tokens[index + 1].type === t2 &&\n      this.tokens[index + 2].type === t3\n    );\n  }\n\n  matches1(t1) {\n    return this.tokens[this.tokenIndex].type === t1;\n  }\n\n  matches2(t1, t2) {\n    return this.tokens[this.tokenIndex].type === t1 && this.tokens[this.tokenIndex + 1].type === t2;\n  }\n\n  matches3(t1, t2, t3) {\n    return (\n      this.tokens[this.tokenIndex].type === t1 &&\n      this.tokens[this.tokenIndex + 1].type === t2 &&\n      this.tokens[this.tokenIndex + 2].type === t3\n    );\n  }\n\n  matches4(t1, t2, t3, t4) {\n    return (\n      this.tokens[this.tokenIndex].type === t1 &&\n      this.tokens[this.tokenIndex + 1].type === t2 &&\n      this.tokens[this.tokenIndex + 2].type === t3 &&\n      this.tokens[this.tokenIndex + 3].type === t4\n    );\n  }\n\n  matches5(t1, t2, t3, t4, t5) {\n    return (\n      this.tokens[this.tokenIndex].type === t1 &&\n      this.tokens[this.tokenIndex + 1].type === t2 &&\n      this.tokens[this.tokenIndex + 2].type === t3 &&\n      this.tokens[this.tokenIndex + 3].type === t4 &&\n      this.tokens[this.tokenIndex + 4].type === t5\n    );\n  }\n\n  matchesContextual(contextualKeyword) {\n    return this.matchesContextualAtIndex(this.tokenIndex, contextualKeyword);\n  }\n\n  matchesContextIdAndLabel(type, contextId) {\n    return this.matches1(type) && this.currentToken().contextId === contextId;\n  }\n\n  previousWhitespaceAndComments() {\n    let whitespaceAndComments = this.code.slice(\n      this.tokenIndex > 0 ? this.tokens[this.tokenIndex - 1].end : 0,\n      this.tokenIndex < this.tokens.length ? this.tokens[this.tokenIndex].start : this.code.length,\n    );\n    if (this.isFlowEnabled) {\n      whitespaceAndComments = whitespaceAndComments.replace(/@flow/g, \"\");\n    }\n    return whitespaceAndComments;\n  }\n\n  replaceToken(newCode) {\n    this.resultCode += this.previousWhitespaceAndComments();\n    this.appendTokenPrefix();\n    this.resultMappings[this.tokenIndex] = this.resultCode.length;\n    this.resultCode += newCode;\n    this.appendTokenSuffix();\n    this.tokenIndex++;\n  }\n\n  replaceTokenTrimmingLeftWhitespace(newCode) {\n    this.resultCode += this.previousWhitespaceAndComments().replace(/[^\\r\\n]/g, \"\");\n    this.appendTokenPrefix();\n    this.resultMappings[this.tokenIndex] = this.resultCode.length;\n    this.resultCode += newCode;\n    this.appendTokenSuffix();\n    this.tokenIndex++;\n  }\n\n  removeInitialToken() {\n    this.replaceToken(\"\");\n  }\n\n  removeToken() {\n    this.replaceTokenTrimmingLeftWhitespace(\"\");\n  }\n\n  /**\n   * Remove all code until the next }, accounting for balanced braces.\n   */\n  removeBalancedCode() {\n    let braceDepth = 0;\n    while (!this.isAtEnd()) {\n      if (this.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.braceL)) {\n        braceDepth++;\n      } else if (this.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.braceR)) {\n        if (braceDepth === 0) {\n          return;\n        }\n        braceDepth--;\n      }\n      this.removeToken();\n    }\n  }\n\n  copyExpectedToken(tokenType) {\n    if (this.tokens[this.tokenIndex].type !== tokenType) {\n      throw new Error(`Expected token ${tokenType}`);\n    }\n    this.copyToken();\n  }\n\n  copyToken() {\n    this.resultCode += this.previousWhitespaceAndComments();\n    this.appendTokenPrefix();\n    this.resultMappings[this.tokenIndex] = this.resultCode.length;\n    this.resultCode += this.code.slice(\n      this.tokens[this.tokenIndex].start,\n      this.tokens[this.tokenIndex].end,\n    );\n    this.appendTokenSuffix();\n    this.tokenIndex++;\n  }\n\n  copyTokenWithPrefix(prefix) {\n    this.resultCode += this.previousWhitespaceAndComments();\n    this.appendTokenPrefix();\n    this.resultCode += prefix;\n    this.resultMappings[this.tokenIndex] = this.resultCode.length;\n    this.resultCode += this.code.slice(\n      this.tokens[this.tokenIndex].start,\n      this.tokens[this.tokenIndex].end,\n    );\n    this.appendTokenSuffix();\n    this.tokenIndex++;\n  }\n\n   appendTokenPrefix() {\n    const token = this.currentToken();\n    if (token.numNullishCoalesceStarts || token.isOptionalChainStart) {\n      token.isAsyncOperation = (0,_util_isAsyncOperation__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this);\n    }\n    if (this.disableESTransforms) {\n      return;\n    }\n    if (token.numNullishCoalesceStarts) {\n      for (let i = 0; i < token.numNullishCoalesceStarts; i++) {\n        if (token.isAsyncOperation) {\n          this.resultCode += \"await \";\n          this.resultCode += this.helperManager.getHelperName(\"asyncNullishCoalesce\");\n        } else {\n          this.resultCode += this.helperManager.getHelperName(\"nullishCoalesce\");\n        }\n        this.resultCode += \"(\";\n      }\n    }\n    if (token.isOptionalChainStart) {\n      if (token.isAsyncOperation) {\n        this.resultCode += \"await \";\n      }\n      if (this.tokenIndex > 0 && this.tokenAtRelativeIndex(-1).type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._delete) {\n        if (token.isAsyncOperation) {\n          this.resultCode += this.helperManager.getHelperName(\"asyncOptionalChainDelete\");\n        } else {\n          this.resultCode += this.helperManager.getHelperName(\"optionalChainDelete\");\n        }\n      } else if (token.isAsyncOperation) {\n        this.resultCode += this.helperManager.getHelperName(\"asyncOptionalChain\");\n      } else {\n        this.resultCode += this.helperManager.getHelperName(\"optionalChain\");\n      }\n      this.resultCode += \"([\";\n    }\n  }\n\n   appendTokenSuffix() {\n    const token = this.currentToken();\n    if (token.isOptionalChainEnd && !this.disableESTransforms) {\n      this.resultCode += \"])\";\n    }\n    if (token.numNullishCoalesceEnds && !this.disableESTransforms) {\n      for (let i = 0; i < token.numNullishCoalesceEnds; i++) {\n        this.resultCode += \"))\";\n      }\n    }\n  }\n\n  appendCode(code) {\n    this.resultCode += code;\n  }\n\n  currentToken() {\n    return this.tokens[this.tokenIndex];\n  }\n\n  currentTokenCode() {\n    const token = this.currentToken();\n    return this.code.slice(token.start, token.end);\n  }\n\n  tokenAtRelativeIndex(relativeIndex) {\n    return this.tokens[this.tokenIndex + relativeIndex];\n  }\n\n  currentIndex() {\n    return this.tokenIndex;\n  }\n\n  /**\n   * Move to the next token. Only suitable in preprocessing steps. When\n   * generating new code, you should use copyToken or removeToken.\n   */\n  nextToken() {\n    if (this.tokenIndex === this.tokens.length) {\n      throw new Error(\"Unexpectedly reached end of input.\");\n    }\n    this.tokenIndex++;\n  }\n\n  previousToken() {\n    this.tokenIndex--;\n  }\n\n  finish() {\n    if (this.tokenIndex !== this.tokens.length) {\n      throw new Error(\"Tried to finish processing tokens before reaching the end.\");\n    }\n    this.resultCode += this.previousWhitespaceAndComments();\n    return {code: this.resultCode, mappings: this.resultMappings};\n  }\n\n  isAtEnd() {\n    return this.tokenIndex === this.tokens.length;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/TokenProcessor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/computeSourceMap.js":
/*!***********************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/computeSourceMap.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ computeSourceMap)\n/* harmony export */ });\n/* harmony import */ var _jridgewell_gen_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jridgewell/gen-mapping */ \"(ssr)/./node_modules/@jridgewell/gen-mapping/dist/gen-mapping.mjs\");\n/* harmony import */ var _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser/util/charcodes */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Generate a source map indicating that each line maps directly to the original line,\n * with the tokens in their new positions.\n */\nfunction computeSourceMap(\n  {code: generatedCode, mappings: rawMappings},\n  filePath,\n  options,\n  source,\n  tokens,\n) {\n  const sourceColumns = computeSourceColumns(source, tokens);\n  const map = new _jridgewell_gen_mapping__WEBPACK_IMPORTED_MODULE_0__.GenMapping({file: options.compiledFilename});\n  let tokenIndex = 0;\n  // currentMapping is the output source index for the current input token being\n  // considered.\n  let currentMapping = rawMappings[0];\n  while (currentMapping === undefined && tokenIndex < rawMappings.length - 1) {\n    tokenIndex++;\n    currentMapping = rawMappings[tokenIndex];\n  }\n  let line = 0;\n  let lineStart = 0;\n  if (currentMapping !== lineStart) {\n    (0,_jridgewell_gen_mapping__WEBPACK_IMPORTED_MODULE_0__.maybeAddSegment)(map, line, 0, filePath, line, 0);\n  }\n  for (let i = 0; i < generatedCode.length; i++) {\n    if (i === currentMapping) {\n      const genColumn = currentMapping - lineStart;\n      const sourceColumn = sourceColumns[tokenIndex];\n      (0,_jridgewell_gen_mapping__WEBPACK_IMPORTED_MODULE_0__.maybeAddSegment)(map, line, genColumn, filePath, line, sourceColumn);\n      while (\n        (currentMapping === i || currentMapping === undefined) &&\n        tokenIndex < rawMappings.length - 1\n      ) {\n        tokenIndex++;\n        currentMapping = rawMappings[tokenIndex];\n      }\n    }\n    if (generatedCode.charCodeAt(i) === _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_1__.charCodes.lineFeed) {\n      line++;\n      lineStart = i + 1;\n      if (currentMapping !== lineStart) {\n        (0,_jridgewell_gen_mapping__WEBPACK_IMPORTED_MODULE_0__.maybeAddSegment)(map, line, 0, filePath, line, 0);\n      }\n    }\n  }\n  const {sourceRoot, sourcesContent, ...sourceMap} = (0,_jridgewell_gen_mapping__WEBPACK_IMPORTED_MODULE_0__.toEncodedMap)(map);\n  return sourceMap ;\n}\n\n/**\n * Create an array mapping each token index to the 0-based column of the start\n * position of the token.\n */\nfunction computeSourceColumns(code, tokens) {\n  const sourceColumns = new Array(tokens.length);\n  let tokenIndex = 0;\n  let currentMapping = tokens[tokenIndex].start;\n  let lineStart = 0;\n  for (let i = 0; i < code.length; i++) {\n    if (i === currentMapping) {\n      sourceColumns[tokenIndex] = currentMapping - lineStart;\n      tokenIndex++;\n      currentMapping = tokens[tokenIndex].start;\n    }\n    if (code.charCodeAt(i) === _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_1__.charCodes.lineFeed) {\n      lineStart = i + 1;\n    }\n  }\n  return sourceColumns;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9jb21wdXRlU291cmNlTWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRjs7OztBQUloQzs7Ozs7Ozs7Ozs7OztBQWFsRDtBQUNBO0FBQ0E7QUFDQTtBQUNlO0FBQ2YsR0FBRywyQ0FBMkM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLCtEQUFVLEVBQUUsK0JBQStCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHdFQUFlO0FBQ25CO0FBQ0Esa0JBQWtCLDBCQUEwQjtBQUM1QztBQUNBO0FBQ0E7QUFDQSxNQUFNLHdFQUFlO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsNkRBQVM7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsUUFBUSx3RUFBZTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxTQUFTLDBDQUEwQyxFQUFFLHFFQUFZO0FBQ2pFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDZEQUFTO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1saWJyYXJ5LWRvY3MvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9jb21wdXRlU291cmNlTWFwLmpzPzFhYjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtHZW5NYXBwaW5nLCBtYXliZUFkZFNlZ21lbnQsIHRvRW5jb2RlZE1hcH0gZnJvbSBcIkBqcmlkZ2V3ZWxsL2dlbi1tYXBwaW5nXCI7XG5cblxuXG5pbXBvcnQge2NoYXJDb2Rlc30gZnJvbSBcIi4vcGFyc2VyL3V0aWwvY2hhcmNvZGVzXCI7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIEdlbmVyYXRlIGEgc291cmNlIG1hcCBpbmRpY2F0aW5nIHRoYXQgZWFjaCBsaW5lIG1hcHMgZGlyZWN0bHkgdG8gdGhlIG9yaWdpbmFsIGxpbmUsXG4gKiB3aXRoIHRoZSB0b2tlbnMgaW4gdGhlaXIgbmV3IHBvc2l0aW9ucy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZVNvdXJjZU1hcChcbiAge2NvZGU6IGdlbmVyYXRlZENvZGUsIG1hcHBpbmdzOiByYXdNYXBwaW5nc30sXG4gIGZpbGVQYXRoLFxuICBvcHRpb25zLFxuICBzb3VyY2UsXG4gIHRva2Vucyxcbikge1xuICBjb25zdCBzb3VyY2VDb2x1bW5zID0gY29tcHV0ZVNvdXJjZUNvbHVtbnMoc291cmNlLCB0b2tlbnMpO1xuICBjb25zdCBtYXAgPSBuZXcgR2VuTWFwcGluZyh7ZmlsZTogb3B0aW9ucy5jb21waWxlZEZpbGVuYW1lfSk7XG4gIGxldCB0b2tlbkluZGV4ID0gMDtcbiAgLy8gY3VycmVudE1hcHBpbmcgaXMgdGhlIG91dHB1dCBzb3VyY2UgaW5kZXggZm9yIHRoZSBjdXJyZW50IGlucHV0IHRva2VuIGJlaW5nXG4gIC8vIGNvbnNpZGVyZWQuXG4gIGxldCBjdXJyZW50TWFwcGluZyA9IHJhd01hcHBpbmdzWzBdO1xuICB3aGlsZSAoY3VycmVudE1hcHBpbmcgPT09IHVuZGVmaW5lZCAmJiB0b2tlbkluZGV4IDwgcmF3TWFwcGluZ3MubGVuZ3RoIC0gMSkge1xuICAgIHRva2VuSW5kZXgrKztcbiAgICBjdXJyZW50TWFwcGluZyA9IHJhd01hcHBpbmdzW3Rva2VuSW5kZXhdO1xuICB9XG4gIGxldCBsaW5lID0gMDtcbiAgbGV0IGxpbmVTdGFydCA9IDA7XG4gIGlmIChjdXJyZW50TWFwcGluZyAhPT0gbGluZVN0YXJ0KSB7XG4gICAgbWF5YmVBZGRTZWdtZW50KG1hcCwgbGluZSwgMCwgZmlsZVBhdGgsIGxpbmUsIDApO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZ2VuZXJhdGVkQ29kZS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpID09PSBjdXJyZW50TWFwcGluZykge1xuICAgICAgY29uc3QgZ2VuQ29sdW1uID0gY3VycmVudE1hcHBpbmcgLSBsaW5lU3RhcnQ7XG4gICAgICBjb25zdCBzb3VyY2VDb2x1bW4gPSBzb3VyY2VDb2x1bW5zW3Rva2VuSW5kZXhdO1xuICAgICAgbWF5YmVBZGRTZWdtZW50KG1hcCwgbGluZSwgZ2VuQ29sdW1uLCBmaWxlUGF0aCwgbGluZSwgc291cmNlQ29sdW1uKTtcbiAgICAgIHdoaWxlIChcbiAgICAgICAgKGN1cnJlbnRNYXBwaW5nID09PSBpIHx8IGN1cnJlbnRNYXBwaW5nID09PSB1bmRlZmluZWQpICYmXG4gICAgICAgIHRva2VuSW5kZXggPCByYXdNYXBwaW5ncy5sZW5ndGggLSAxXG4gICAgICApIHtcbiAgICAgICAgdG9rZW5JbmRleCsrO1xuICAgICAgICBjdXJyZW50TWFwcGluZyA9IHJhd01hcHBpbmdzW3Rva2VuSW5kZXhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZ2VuZXJhdGVkQ29kZS5jaGFyQ29kZUF0KGkpID09PSBjaGFyQ29kZXMubGluZUZlZWQpIHtcbiAgICAgIGxpbmUrKztcbiAgICAgIGxpbmVTdGFydCA9IGkgKyAxO1xuICAgICAgaWYgKGN1cnJlbnRNYXBwaW5nICE9PSBsaW5lU3RhcnQpIHtcbiAgICAgICAgbWF5YmVBZGRTZWdtZW50KG1hcCwgbGluZSwgMCwgZmlsZVBhdGgsIGxpbmUsIDApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCB7c291cmNlUm9vdCwgc291cmNlc0NvbnRlbnQsIC4uLnNvdXJjZU1hcH0gPSB0b0VuY29kZWRNYXAobWFwKTtcbiAgcmV0dXJuIHNvdXJjZU1hcCA7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGFycmF5IG1hcHBpbmcgZWFjaCB0b2tlbiBpbmRleCB0byB0aGUgMC1iYXNlZCBjb2x1bW4gb2YgdGhlIHN0YXJ0XG4gKiBwb3NpdGlvbiBvZiB0aGUgdG9rZW4uXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVTb3VyY2VDb2x1bW5zKGNvZGUsIHRva2Vucykge1xuICBjb25zdCBzb3VyY2VDb2x1bW5zID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpO1xuICBsZXQgdG9rZW5JbmRleCA9IDA7XG4gIGxldCBjdXJyZW50TWFwcGluZyA9IHRva2Vuc1t0b2tlbkluZGV4XS5zdGFydDtcbiAgbGV0IGxpbmVTdGFydCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY29kZS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpID09PSBjdXJyZW50TWFwcGluZykge1xuICAgICAgc291cmNlQ29sdW1uc1t0b2tlbkluZGV4XSA9IGN1cnJlbnRNYXBwaW5nIC0gbGluZVN0YXJ0O1xuICAgICAgdG9rZW5JbmRleCsrO1xuICAgICAgY3VycmVudE1hcHBpbmcgPSB0b2tlbnNbdG9rZW5JbmRleF0uc3RhcnQ7XG4gICAgfVxuICAgIGlmIChjb2RlLmNoYXJDb2RlQXQoaSkgPT09IGNoYXJDb2Rlcy5saW5lRmVlZCkge1xuICAgICAgbGluZVN0YXJ0ID0gaSArIDE7XG4gICAgfVxuICB9XG4gIHJldHVybiBzb3VyY2VDb2x1bW5zO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/computeSourceMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/identifyShadowedGlobals.js":
/*!******************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/identifyShadowedGlobals.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ identifyShadowedGlobals),\n/* harmony export */   hasShadowedGlobals: () => (/* binding */ hasShadowedGlobals)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser/tokenizer */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n\n\n\n\n\n/**\n * Traverse the given tokens and modify them if necessary to indicate that some names shadow global\n * variables.\n */\nfunction identifyShadowedGlobals(\n  tokens,\n  scopes,\n  globalNames,\n) {\n  if (!hasShadowedGlobals(tokens, globalNames)) {\n    return;\n  }\n  markShadowedGlobals(tokens, scopes, globalNames);\n}\n\n/**\n * We can do a fast up-front check to see if there are any declarations to global names. If not,\n * then there's no point in computing scope assignments.\n */\n// Exported for testing.\nfunction hasShadowedGlobals(tokens, globalNames) {\n  for (const token of tokens.tokens) {\n    if (\n      token.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name &&\n      !token.isType &&\n      (0,_parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.isNonTopLevelDeclaration)(token) &&\n      globalNames.has(tokens.identifierNameForToken(token))\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction markShadowedGlobals(\n  tokens,\n  scopes,\n  globalNames,\n) {\n  const scopeStack = [];\n  let scopeIndex = scopes.length - 1;\n  // Scopes were generated at completion time, so they're sorted by end index, so we can maintain a\n  // good stack by going backwards through them.\n  for (let i = tokens.tokens.length - 1; ; i--) {\n    while (scopeStack.length > 0 && scopeStack[scopeStack.length - 1].startTokenIndex === i + 1) {\n      scopeStack.pop();\n    }\n    while (scopeIndex >= 0 && scopes[scopeIndex].endTokenIndex === i + 1) {\n      scopeStack.push(scopes[scopeIndex]);\n      scopeIndex--;\n    }\n    // Process scopes after the last iteration so we can make sure we pop all of them.\n    if (i < 0) {\n      break;\n    }\n\n    const token = tokens.tokens[i];\n    const name = tokens.identifierNameForToken(token);\n    if (scopeStack.length > 1 && !token.isType && token.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name && globalNames.has(name)) {\n      if ((0,_parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.isBlockScopedDeclaration)(token)) {\n        markShadowedForScope(scopeStack[scopeStack.length - 1], tokens, name);\n      } else if ((0,_parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.isFunctionScopedDeclaration)(token)) {\n        let stackIndex = scopeStack.length - 1;\n        while (stackIndex > 0 && !scopeStack[stackIndex].isFunctionScope) {\n          stackIndex--;\n        }\n        if (stackIndex < 0) {\n          throw new Error(\"Did not find parent function scope.\");\n        }\n        markShadowedForScope(scopeStack[stackIndex], tokens, name);\n      }\n    }\n  }\n  if (scopeStack.length > 0) {\n    throw new Error(\"Expected empty scope stack after processing file.\");\n  }\n}\n\nfunction markShadowedForScope(scope, tokens, name) {\n  for (let i = scope.startTokenIndex; i < scope.endTokenIndex; i++) {\n    const token = tokens.tokens[i];\n    if (\n      (token.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name || token.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxName) &&\n      tokens.identifierNameForToken(token) === name\n    ) {\n      token.shadowsGlobal = true;\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9pZGVudGlmeVNoYWRvd2VkR2xvYmFscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSTRCOztBQUU2Qjs7O0FBR3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLHFCQUFxQiw4REFBRTtBQUN2QjtBQUNBLE1BQU0sMkVBQXdCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpRUFBaUUsOERBQUU7QUFDbkUsVUFBVSwyRUFBd0I7QUFDbEM7QUFDQSxRQUFRLFNBQVMsOEVBQTJCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNDQUFzQyx5QkFBeUI7QUFDL0Q7QUFDQTtBQUNBLHNCQUFzQiw4REFBRSx3QkFBd0IsOERBQUU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktbGlicmFyeS1kb2NzLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC9lc20vaWRlbnRpZnlTaGFkb3dlZEdsb2JhbHMuanM/NzYwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBpc0Jsb2NrU2NvcGVkRGVjbGFyYXRpb24sXG4gIGlzRnVuY3Rpb25TY29wZWREZWNsYXJhdGlvbixcbiAgaXNOb25Ub3BMZXZlbERlY2xhcmF0aW9uLFxufSBmcm9tIFwiLi9wYXJzZXIvdG9rZW5pemVyXCI7XG5cbmltcG9ydCB7VG9rZW5UeXBlIGFzIHR0fSBmcm9tIFwiLi9wYXJzZXIvdG9rZW5pemVyL3R5cGVzXCI7XG5cblxuLyoqXG4gKiBUcmF2ZXJzZSB0aGUgZ2l2ZW4gdG9rZW5zIGFuZCBtb2RpZnkgdGhlbSBpZiBuZWNlc3NhcnkgdG8gaW5kaWNhdGUgdGhhdCBzb21lIG5hbWVzIHNoYWRvdyBnbG9iYWxcbiAqIHZhcmlhYmxlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaWRlbnRpZnlTaGFkb3dlZEdsb2JhbHMoXG4gIHRva2VucyxcbiAgc2NvcGVzLFxuICBnbG9iYWxOYW1lcyxcbikge1xuICBpZiAoIWhhc1NoYWRvd2VkR2xvYmFscyh0b2tlbnMsIGdsb2JhbE5hbWVzKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBtYXJrU2hhZG93ZWRHbG9iYWxzKHRva2Vucywgc2NvcGVzLCBnbG9iYWxOYW1lcyk7XG59XG5cbi8qKlxuICogV2UgY2FuIGRvIGEgZmFzdCB1cC1mcm9udCBjaGVjayB0byBzZWUgaWYgdGhlcmUgYXJlIGFueSBkZWNsYXJhdGlvbnMgdG8gZ2xvYmFsIG5hbWVzLiBJZiBub3QsXG4gKiB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQgaW4gY29tcHV0aW5nIHNjb3BlIGFzc2lnbm1lbnRzLlxuICovXG4vLyBFeHBvcnRlZCBmb3IgdGVzdGluZy5cbmV4cG9ydCBmdW5jdGlvbiBoYXNTaGFkb3dlZEdsb2JhbHModG9rZW5zLCBnbG9iYWxOYW1lcykge1xuICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucy50b2tlbnMpIHtcbiAgICBpZiAoXG4gICAgICB0b2tlbi50eXBlID09PSB0dC5uYW1lICYmXG4gICAgICAhdG9rZW4uaXNUeXBlICYmXG4gICAgICBpc05vblRvcExldmVsRGVjbGFyYXRpb24odG9rZW4pICYmXG4gICAgICBnbG9iYWxOYW1lcy5oYXModG9rZW5zLmlkZW50aWZpZXJOYW1lRm9yVG9rZW4odG9rZW4pKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbWFya1NoYWRvd2VkR2xvYmFscyhcbiAgdG9rZW5zLFxuICBzY29wZXMsXG4gIGdsb2JhbE5hbWVzLFxuKSB7XG4gIGNvbnN0IHNjb3BlU3RhY2sgPSBbXTtcbiAgbGV0IHNjb3BlSW5kZXggPSBzY29wZXMubGVuZ3RoIC0gMTtcbiAgLy8gU2NvcGVzIHdlcmUgZ2VuZXJhdGVkIGF0IGNvbXBsZXRpb24gdGltZSwgc28gdGhleSdyZSBzb3J0ZWQgYnkgZW5kIGluZGV4LCBzbyB3ZSBjYW4gbWFpbnRhaW4gYVxuICAvLyBnb29kIHN0YWNrIGJ5IGdvaW5nIGJhY2t3YXJkcyB0aHJvdWdoIHRoZW0uXG4gIGZvciAobGV0IGkgPSB0b2tlbnMudG9rZW5zLmxlbmd0aCAtIDE7IDsgaS0tKSB7XG4gICAgd2hpbGUgKHNjb3BlU3RhY2subGVuZ3RoID4gMCAmJiBzY29wZVN0YWNrW3Njb3BlU3RhY2subGVuZ3RoIC0gMV0uc3RhcnRUb2tlbkluZGV4ID09PSBpICsgMSkge1xuICAgICAgc2NvcGVTdGFjay5wb3AoKTtcbiAgICB9XG4gICAgd2hpbGUgKHNjb3BlSW5kZXggPj0gMCAmJiBzY29wZXNbc2NvcGVJbmRleF0uZW5kVG9rZW5JbmRleCA9PT0gaSArIDEpIHtcbiAgICAgIHNjb3BlU3RhY2sucHVzaChzY29wZXNbc2NvcGVJbmRleF0pO1xuICAgICAgc2NvcGVJbmRleC0tO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIHNjb3BlcyBhZnRlciB0aGUgbGFzdCBpdGVyYXRpb24gc28gd2UgY2FuIG1ha2Ugc3VyZSB3ZSBwb3AgYWxsIG9mIHRoZW0uXG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjb25zdCB0b2tlbiA9IHRva2Vucy50b2tlbnNbaV07XG4gICAgY29uc3QgbmFtZSA9IHRva2Vucy5pZGVudGlmaWVyTmFtZUZvclRva2VuKHRva2VuKTtcbiAgICBpZiAoc2NvcGVTdGFjay5sZW5ndGggPiAxICYmICF0b2tlbi5pc1R5cGUgJiYgdG9rZW4udHlwZSA9PT0gdHQubmFtZSAmJiBnbG9iYWxOYW1lcy5oYXMobmFtZSkpIHtcbiAgICAgIGlmIChpc0Jsb2NrU2NvcGVkRGVjbGFyYXRpb24odG9rZW4pKSB7XG4gICAgICAgIG1hcmtTaGFkb3dlZEZvclNjb3BlKHNjb3BlU3RhY2tbc2NvcGVTdGFjay5sZW5ndGggLSAxXSwgdG9rZW5zLCBuYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvblNjb3BlZERlY2xhcmF0aW9uKHRva2VuKSkge1xuICAgICAgICBsZXQgc3RhY2tJbmRleCA9IHNjb3BlU3RhY2subGVuZ3RoIC0gMTtcbiAgICAgICAgd2hpbGUgKHN0YWNrSW5kZXggPiAwICYmICFzY29wZVN0YWNrW3N0YWNrSW5kZXhdLmlzRnVuY3Rpb25TY29wZSkge1xuICAgICAgICAgIHN0YWNrSW5kZXgtLTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhY2tJbmRleCA8IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEaWQgbm90IGZpbmQgcGFyZW50IGZ1bmN0aW9uIHNjb3BlLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBtYXJrU2hhZG93ZWRGb3JTY29wZShzY29wZVN0YWNrW3N0YWNrSW5kZXhdLCB0b2tlbnMsIG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2NvcGVTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgZW1wdHkgc2NvcGUgc3RhY2sgYWZ0ZXIgcHJvY2Vzc2luZyBmaWxlLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU2hhZG93ZWRGb3JTY29wZShzY29wZSwgdG9rZW5zLCBuYW1lKSB7XG4gIGZvciAobGV0IGkgPSBzY29wZS5zdGFydFRva2VuSW5kZXg7IGkgPCBzY29wZS5lbmRUb2tlbkluZGV4OyBpKyspIHtcbiAgICBjb25zdCB0b2tlbiA9IHRva2Vucy50b2tlbnNbaV07XG4gICAgaWYgKFxuICAgICAgKHRva2VuLnR5cGUgPT09IHR0Lm5hbWUgfHwgdG9rZW4udHlwZSA9PT0gdHQuanN4TmFtZSkgJiZcbiAgICAgIHRva2Vucy5pZGVudGlmaWVyTmFtZUZvclRva2VuKHRva2VuKSA9PT0gbmFtZVxuICAgICkge1xuICAgICAgdG9rZW4uc2hhZG93c0dsb2JhbCA9IHRydWU7XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/identifyShadowedGlobals.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFormattedTokens: () => (/* binding */ getFormattedTokens),\n/* harmony export */   getVersion: () => (/* binding */ getVersion),\n/* harmony export */   transform: () => (/* binding */ transform)\n/* harmony export */ });\n/* harmony import */ var _CJSImportProcessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CJSImportProcessor */ \"(ssr)/./node_modules/sucrase/dist/esm/CJSImportProcessor.js\");\n/* harmony import */ var _computeSourceMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./computeSourceMap */ \"(ssr)/./node_modules/sucrase/dist/esm/computeSourceMap.js\");\n/* harmony import */ var _HelperManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HelperManager */ \"(ssr)/./node_modules/sucrase/dist/esm/HelperManager.js\");\n/* harmony import */ var _identifyShadowedGlobals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./identifyShadowedGlobals */ \"(ssr)/./node_modules/sucrase/dist/esm/identifyShadowedGlobals.js\");\n/* harmony import */ var _NameManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./NameManager */ \"(ssr)/./node_modules/sucrase/dist/esm/NameManager.js\");\n/* harmony import */ var _Options__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Options */ \"(ssr)/./node_modules/sucrase/dist/esm/Options.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/index.js\");\n/* harmony import */ var _TokenProcessor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TokenProcessor */ \"(ssr)/./node_modules/sucrase/dist/esm/TokenProcessor.js\");\n/* harmony import */ var _transformers_RootTransformer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transformers/RootTransformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/RootTransformer.js\");\n/* harmony import */ var _util_formatTokens__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./util/formatTokens */ \"(ssr)/./node_modules/sucrase/dist/esm/util/formatTokens.js\");\n/* harmony import */ var _util_getTSImportedNames__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./util/getTSImportedNames */ \"(ssr)/./node_modules/sucrase/dist/esm/util/getTSImportedNames.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;\n\nfunction getVersion() {\n  /* istanbul ignore next */\n  return \"3.35.0\";\n}\n\nfunction transform(code, options) {\n  (0,_Options__WEBPACK_IMPORTED_MODULE_5__.validateOptions)(options);\n  try {\n    const sucraseContext = getSucraseContext(code, options);\n    const transformer = new _transformers_RootTransformer__WEBPACK_IMPORTED_MODULE_8__[\"default\"](\n      sucraseContext,\n      options.transforms,\n      Boolean(options.enableLegacyBabel5ModuleInterop),\n      options,\n    );\n    const transformerResult = transformer.transform();\n    let result = {code: transformerResult.code};\n    if (options.sourceMapOptions) {\n      if (!options.filePath) {\n        throw new Error(\"filePath must be specified when generating a source map.\");\n      }\n      result = {\n        ...result,\n        sourceMap: (0,_computeSourceMap__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n          transformerResult,\n          options.filePath,\n          options.sourceMapOptions,\n          code,\n          sucraseContext.tokenProcessor.tokens,\n        ),\n      };\n    }\n    return result;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (e) {\n    if (options.filePath) {\n      e.message = `Error transforming ${options.filePath}: ${e.message}`;\n    }\n    throw e;\n  }\n}\n\n/**\n * Return a string representation of the sucrase tokens, mostly useful for\n * diagnostic purposes.\n */\nfunction getFormattedTokens(code, options) {\n  const tokens = getSucraseContext(code, options).tokenProcessor.tokens;\n  return (0,_util_formatTokens__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(code, tokens);\n}\n\n/**\n * Call into the parser/tokenizer and do some further preprocessing:\n * - Come up with a set of used names so that we can assign new names.\n * - Preprocess all import/export statements so we know which globals we are interested in.\n * - Compute situations where any of those globals are shadowed.\n *\n * In the future, some of these preprocessing steps can be skipped based on what actual work is\n * being done.\n */\nfunction getSucraseContext(code, options) {\n  const isJSXEnabled = options.transforms.includes(\"jsx\");\n  const isTypeScriptEnabled = options.transforms.includes(\"typescript\");\n  const isFlowEnabled = options.transforms.includes(\"flow\");\n  const disableESTransforms = options.disableESTransforms === true;\n  const file = (0,_parser__WEBPACK_IMPORTED_MODULE_6__.parse)(code, isJSXEnabled, isTypeScriptEnabled, isFlowEnabled);\n  const tokens = file.tokens;\n  const scopes = file.scopes;\n\n  const nameManager = new _NameManager__WEBPACK_IMPORTED_MODULE_4__[\"default\"](code, tokens);\n  const helperManager = new _HelperManager__WEBPACK_IMPORTED_MODULE_2__.HelperManager(nameManager);\n  const tokenProcessor = new _TokenProcessor__WEBPACK_IMPORTED_MODULE_7__[\"default\"](\n    code,\n    tokens,\n    isFlowEnabled,\n    disableESTransforms,\n    helperManager,\n  );\n  const enableLegacyTypeScriptModuleInterop = Boolean(options.enableLegacyTypeScriptModuleInterop);\n\n  let importProcessor = null;\n  if (options.transforms.includes(\"imports\")) {\n    importProcessor = new _CJSImportProcessor__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\n      nameManager,\n      tokenProcessor,\n      enableLegacyTypeScriptModuleInterop,\n      options,\n      options.transforms.includes(\"typescript\"),\n      Boolean(options.keepUnusedImports),\n      helperManager,\n    );\n    importProcessor.preprocessTokens();\n    // We need to mark shadowed globals after processing imports so we know that the globals are,\n    // but before type-only import pruning, since that relies on shadowing information.\n    (0,_identifyShadowedGlobals__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(tokenProcessor, scopes, importProcessor.getGlobalNames());\n    if (options.transforms.includes(\"typescript\") && !options.keepUnusedImports) {\n      importProcessor.pruneTypeOnlyImports();\n    }\n  } else if (options.transforms.includes(\"typescript\") && !options.keepUnusedImports) {\n    // Shadowed global detection is needed for TS implicit elision of imported names.\n    (0,_identifyShadowedGlobals__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(tokenProcessor, scopes, (0,_util_getTSImportedNames__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(tokenProcessor));\n  }\n  return {tokenProcessor, scopes, nameManager, importProcessor, helperManager};\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRDtBQUNBO0FBQ1I7QUFDa0I7QUFDeEI7QUFDRTs7QUFFWDs7QUFFZTtBQUNlO0FBQ2Q7QUFDWTs7Ozs7Ozs7Ozs7Ozs7O0FBZTNEOztBQUVPO0FBQ1A7QUFDQTtBQUNBOztBQUVPO0FBQ1AsRUFBRSx5REFBZTtBQUNqQjtBQUNBO0FBQ0EsNEJBQTRCLHFFQUFlO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkRBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0Esd0NBQXdDLGlCQUFpQixJQUFJLFVBQVU7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsU0FBUyw4REFBWTtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw4Q0FBSztBQUNwQjtBQUNBOztBQUVBLDBCQUEwQixvREFBVztBQUNyQyw0QkFBNEIseURBQWE7QUFDekMsNkJBQTZCLHVEQUFjO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEIsMkRBQWtCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLG9FQUF1QjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJLG9FQUF1Qix5QkFBeUIscUVBQWtCO0FBQ3RFO0FBQ0EsVUFBVTtBQUNWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktbGlicmFyeS1kb2NzLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC9lc20vaW5kZXguanM/NmJmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ0pTSW1wb3J0UHJvY2Vzc29yIGZyb20gXCIuL0NKU0ltcG9ydFByb2Nlc3NvclwiO1xuaW1wb3J0IGNvbXB1dGVTb3VyY2VNYXAsIHt9IGZyb20gXCIuL2NvbXB1dGVTb3VyY2VNYXBcIjtcbmltcG9ydCB7SGVscGVyTWFuYWdlcn0gZnJvbSBcIi4vSGVscGVyTWFuYWdlclwiO1xuaW1wb3J0IGlkZW50aWZ5U2hhZG93ZWRHbG9iYWxzIGZyb20gXCIuL2lkZW50aWZ5U2hhZG93ZWRHbG9iYWxzXCI7XG5pbXBvcnQgTmFtZU1hbmFnZXIgZnJvbSBcIi4vTmFtZU1hbmFnZXJcIjtcbmltcG9ydCB7dmFsaWRhdGVPcHRpb25zfSBmcm9tIFwiLi9PcHRpb25zXCI7XG5cbmltcG9ydCB7cGFyc2V9IGZyb20gXCIuL3BhcnNlclwiO1xuXG5pbXBvcnQgVG9rZW5Qcm9jZXNzb3IgZnJvbSBcIi4vVG9rZW5Qcm9jZXNzb3JcIjtcbmltcG9ydCBSb290VHJhbnNmb3JtZXIgZnJvbSBcIi4vdHJhbnNmb3JtZXJzL1Jvb3RUcmFuc2Zvcm1lclwiO1xuaW1wb3J0IGZvcm1hdFRva2VucyBmcm9tIFwiLi91dGlsL2Zvcm1hdFRva2Vuc1wiO1xuaW1wb3J0IGdldFRTSW1wb3J0ZWROYW1lcyBmcm9tIFwiLi91dGlsL2dldFRTSW1wb3J0ZWROYW1lc1wiO1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZlcnNpb24oKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiBcIjMuMzUuMFwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtKGNvZGUsIG9wdGlvbnMpIHtcbiAgdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMpO1xuICB0cnkge1xuICAgIGNvbnN0IHN1Y3Jhc2VDb250ZXh0ID0gZ2V0U3VjcmFzZUNvbnRleHQoY29kZSwgb3B0aW9ucyk7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBuZXcgUm9vdFRyYW5zZm9ybWVyKFxuICAgICAgc3VjcmFzZUNvbnRleHQsXG4gICAgICBvcHRpb25zLnRyYW5zZm9ybXMsXG4gICAgICBCb29sZWFuKG9wdGlvbnMuZW5hYmxlTGVnYWN5QmFiZWw1TW9kdWxlSW50ZXJvcCksXG4gICAgICBvcHRpb25zLFxuICAgICk7XG4gICAgY29uc3QgdHJhbnNmb3JtZXJSZXN1bHQgPSB0cmFuc2Zvcm1lci50cmFuc2Zvcm0oKTtcbiAgICBsZXQgcmVzdWx0ID0ge2NvZGU6IHRyYW5zZm9ybWVyUmVzdWx0LmNvZGV9O1xuICAgIGlmIChvcHRpb25zLnNvdXJjZU1hcE9wdGlvbnMpIHtcbiAgICAgIGlmICghb3B0aW9ucy5maWxlUGF0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaWxlUGF0aCBtdXN0IGJlIHNwZWNpZmllZCB3aGVuIGdlbmVyYXRpbmcgYSBzb3VyY2UgbWFwLlwiKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICBzb3VyY2VNYXA6IGNvbXB1dGVTb3VyY2VNYXAoXG4gICAgICAgICAgdHJhbnNmb3JtZXJSZXN1bHQsXG4gICAgICAgICAgb3B0aW9ucy5maWxlUGF0aCxcbiAgICAgICAgICBvcHRpb25zLnNvdXJjZU1hcE9wdGlvbnMsXG4gICAgICAgICAgY29kZSxcbiAgICAgICAgICBzdWNyYXNlQ29udGV4dC50b2tlblByb2Nlc3Nvci50b2tlbnMsXG4gICAgICAgICksXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAob3B0aW9ucy5maWxlUGF0aCkge1xuICAgICAgZS5tZXNzYWdlID0gYEVycm9yIHRyYW5zZm9ybWluZyAke29wdGlvbnMuZmlsZVBhdGh9OiAke2UubWVzc2FnZX1gO1xuICAgIH1cbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzdWNyYXNlIHRva2VucywgbW9zdGx5IHVzZWZ1bCBmb3JcbiAqIGRpYWdub3N0aWMgcHVycG9zZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtYXR0ZWRUb2tlbnMoY29kZSwgb3B0aW9ucykge1xuICBjb25zdCB0b2tlbnMgPSBnZXRTdWNyYXNlQ29udGV4dChjb2RlLCBvcHRpb25zKS50b2tlblByb2Nlc3Nvci50b2tlbnM7XG4gIHJldHVybiBmb3JtYXRUb2tlbnMoY29kZSwgdG9rZW5zKTtcbn1cblxuLyoqXG4gKiBDYWxsIGludG8gdGhlIHBhcnNlci90b2tlbml6ZXIgYW5kIGRvIHNvbWUgZnVydGhlciBwcmVwcm9jZXNzaW5nOlxuICogLSBDb21lIHVwIHdpdGggYSBzZXQgb2YgdXNlZCBuYW1lcyBzbyB0aGF0IHdlIGNhbiBhc3NpZ24gbmV3IG5hbWVzLlxuICogLSBQcmVwcm9jZXNzIGFsbCBpbXBvcnQvZXhwb3J0IHN0YXRlbWVudHMgc28gd2Uga25vdyB3aGljaCBnbG9iYWxzIHdlIGFyZSBpbnRlcmVzdGVkIGluLlxuICogLSBDb21wdXRlIHNpdHVhdGlvbnMgd2hlcmUgYW55IG9mIHRob3NlIGdsb2JhbHMgYXJlIHNoYWRvd2VkLlxuICpcbiAqIEluIHRoZSBmdXR1cmUsIHNvbWUgb2YgdGhlc2UgcHJlcHJvY2Vzc2luZyBzdGVwcyBjYW4gYmUgc2tpcHBlZCBiYXNlZCBvbiB3aGF0IGFjdHVhbCB3b3JrIGlzXG4gKiBiZWluZyBkb25lLlxuICovXG5mdW5jdGlvbiBnZXRTdWNyYXNlQ29udGV4dChjb2RlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGlzSlNYRW5hYmxlZCA9IG9wdGlvbnMudHJhbnNmb3Jtcy5pbmNsdWRlcyhcImpzeFwiKTtcbiAgY29uc3QgaXNUeXBlU2NyaXB0RW5hYmxlZCA9IG9wdGlvbnMudHJhbnNmb3Jtcy5pbmNsdWRlcyhcInR5cGVzY3JpcHRcIik7XG4gIGNvbnN0IGlzRmxvd0VuYWJsZWQgPSBvcHRpb25zLnRyYW5zZm9ybXMuaW5jbHVkZXMoXCJmbG93XCIpO1xuICBjb25zdCBkaXNhYmxlRVNUcmFuc2Zvcm1zID0gb3B0aW9ucy5kaXNhYmxlRVNUcmFuc2Zvcm1zID09PSB0cnVlO1xuICBjb25zdCBmaWxlID0gcGFyc2UoY29kZSwgaXNKU1hFbmFibGVkLCBpc1R5cGVTY3JpcHRFbmFibGVkLCBpc0Zsb3dFbmFibGVkKTtcbiAgY29uc3QgdG9rZW5zID0gZmlsZS50b2tlbnM7XG4gIGNvbnN0IHNjb3BlcyA9IGZpbGUuc2NvcGVzO1xuXG4gIGNvbnN0IG5hbWVNYW5hZ2VyID0gbmV3IE5hbWVNYW5hZ2VyKGNvZGUsIHRva2Vucyk7XG4gIGNvbnN0IGhlbHBlck1hbmFnZXIgPSBuZXcgSGVscGVyTWFuYWdlcihuYW1lTWFuYWdlcik7XG4gIGNvbnN0IHRva2VuUHJvY2Vzc29yID0gbmV3IFRva2VuUHJvY2Vzc29yKFxuICAgIGNvZGUsXG4gICAgdG9rZW5zLFxuICAgIGlzRmxvd0VuYWJsZWQsXG4gICAgZGlzYWJsZUVTVHJhbnNmb3JtcyxcbiAgICBoZWxwZXJNYW5hZ2VyLFxuICApO1xuICBjb25zdCBlbmFibGVMZWdhY3lUeXBlU2NyaXB0TW9kdWxlSW50ZXJvcCA9IEJvb2xlYW4ob3B0aW9ucy5lbmFibGVMZWdhY3lUeXBlU2NyaXB0TW9kdWxlSW50ZXJvcCk7XG5cbiAgbGV0IGltcG9ydFByb2Nlc3NvciA9IG51bGw7XG4gIGlmIChvcHRpb25zLnRyYW5zZm9ybXMuaW5jbHVkZXMoXCJpbXBvcnRzXCIpKSB7XG4gICAgaW1wb3J0UHJvY2Vzc29yID0gbmV3IENKU0ltcG9ydFByb2Nlc3NvcihcbiAgICAgIG5hbWVNYW5hZ2VyLFxuICAgICAgdG9rZW5Qcm9jZXNzb3IsXG4gICAgICBlbmFibGVMZWdhY3lUeXBlU2NyaXB0TW9kdWxlSW50ZXJvcCxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBvcHRpb25zLnRyYW5zZm9ybXMuaW5jbHVkZXMoXCJ0eXBlc2NyaXB0XCIpLFxuICAgICAgQm9vbGVhbihvcHRpb25zLmtlZXBVbnVzZWRJbXBvcnRzKSxcbiAgICAgIGhlbHBlck1hbmFnZXIsXG4gICAgKTtcbiAgICBpbXBvcnRQcm9jZXNzb3IucHJlcHJvY2Vzc1Rva2VucygpO1xuICAgIC8vIFdlIG5lZWQgdG8gbWFyayBzaGFkb3dlZCBnbG9iYWxzIGFmdGVyIHByb2Nlc3NpbmcgaW1wb3J0cyBzbyB3ZSBrbm93IHRoYXQgdGhlIGdsb2JhbHMgYXJlLFxuICAgIC8vIGJ1dCBiZWZvcmUgdHlwZS1vbmx5IGltcG9ydCBwcnVuaW5nLCBzaW5jZSB0aGF0IHJlbGllcyBvbiBzaGFkb3dpbmcgaW5mb3JtYXRpb24uXG4gICAgaWRlbnRpZnlTaGFkb3dlZEdsb2JhbHModG9rZW5Qcm9jZXNzb3IsIHNjb3BlcywgaW1wb3J0UHJvY2Vzc29yLmdldEdsb2JhbE5hbWVzKCkpO1xuICAgIGlmIChvcHRpb25zLnRyYW5zZm9ybXMuaW5jbHVkZXMoXCJ0eXBlc2NyaXB0XCIpICYmICFvcHRpb25zLmtlZXBVbnVzZWRJbXBvcnRzKSB7XG4gICAgICBpbXBvcnRQcm9jZXNzb3IucHJ1bmVUeXBlT25seUltcG9ydHMoKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9ucy50cmFuc2Zvcm1zLmluY2x1ZGVzKFwidHlwZXNjcmlwdFwiKSAmJiAhb3B0aW9ucy5rZWVwVW51c2VkSW1wb3J0cykge1xuICAgIC8vIFNoYWRvd2VkIGdsb2JhbCBkZXRlY3Rpb24gaXMgbmVlZGVkIGZvciBUUyBpbXBsaWNpdCBlbGlzaW9uIG9mIGltcG9ydGVkIG5hbWVzLlxuICAgIGlkZW50aWZ5U2hhZG93ZWRHbG9iYWxzKHRva2VuUHJvY2Vzc29yLCBzY29wZXMsIGdldFRTSW1wb3J0ZWROYW1lcyh0b2tlblByb2Nlc3NvcikpO1xuICB9XG4gIHJldHVybiB7dG9rZW5Qcm9jZXNzb3IsIHNjb3BlcywgbmFtZU1hbmFnZXIsIGltcG9ydFByb2Nlc3NvciwgaGVscGVyTWFuYWdlcn07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   File: () => (/* binding */ File),\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var _traverser_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./traverser/base */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js\");\n/* harmony import */ var _traverser_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./traverser/index */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/index.js\");\n\n\n\n\n\nclass File {\n  \n  \n\n  constructor(tokens, scopes) {\n    this.tokens = tokens;\n    this.scopes = scopes;\n  }\n}\n\nfunction parse(\n  input,\n  isJSXEnabled,\n  isTypeScriptEnabled,\n  isFlowEnabled,\n) {\n  if (isFlowEnabled && isTypeScriptEnabled) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n  (0,_traverser_base__WEBPACK_IMPORTED_MODULE_0__.initParser)(input, isJSXEnabled, isTypeScriptEnabled, isFlowEnabled);\n  const result = (0,_traverser_index__WEBPACK_IMPORTED_MODULE_1__.parseFile)();\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.error) {\n    throw (0,_traverser_base__WEBPACK_IMPORTED_MODULE_0__.augmentError)(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.error);\n  }\n  return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9wYXJzZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRWlFO0FBQ3JCOztBQUVyQztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLDJEQUFVO0FBQ1osaUJBQWlCLDJEQUFTO0FBQzFCLE1BQU0sa0RBQUs7QUFDWCxVQUFVLDZEQUFZLENBQUMsa0RBQUs7QUFDNUI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktbGlicmFyeS1kb2NzLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC9lc20vcGFyc2VyL2luZGV4LmpzP2FkNGUiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmltcG9ydCB7YXVnbWVudEVycm9yLCBpbml0UGFyc2VyLCBzdGF0ZX0gZnJvbSBcIi4vdHJhdmVyc2VyL2Jhc2VcIjtcbmltcG9ydCB7cGFyc2VGaWxlfSBmcm9tIFwiLi90cmF2ZXJzZXIvaW5kZXhcIjtcblxuZXhwb3J0IGNsYXNzIEZpbGUge1xuICBcbiAgXG5cbiAgY29uc3RydWN0b3IodG9rZW5zLCBzY29wZXMpIHtcbiAgICB0aGlzLnRva2VucyA9IHRva2VucztcbiAgICB0aGlzLnNjb3BlcyA9IHNjb3BlcztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoXG4gIGlucHV0LFxuICBpc0pTWEVuYWJsZWQsXG4gIGlzVHlwZVNjcmlwdEVuYWJsZWQsXG4gIGlzRmxvd0VuYWJsZWQsXG4pIHtcbiAgaWYgKGlzRmxvd0VuYWJsZWQgJiYgaXNUeXBlU2NyaXB0RW5hYmxlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb21iaW5lIGZsb3cgYW5kIHR5cGVzY3JpcHQgcGx1Z2lucy5cIik7XG4gIH1cbiAgaW5pdFBhcnNlcihpbnB1dCwgaXNKU1hFbmFibGVkLCBpc1R5cGVTY3JpcHRFbmFibGVkLCBpc0Zsb3dFbmFibGVkKTtcbiAgY29uc3QgcmVzdWx0ID0gcGFyc2VGaWxlKCk7XG4gIGlmIChzdGF0ZS5lcnJvcikge1xuICAgIHRocm93IGF1Z21lbnRFcnJvcihzdGF0ZS5lcnJvcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/flow.js":
/*!**************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/plugins/flow.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   flowAfterParseClassSuper: () => (/* binding */ flowAfterParseClassSuper),\n/* harmony export */   flowAfterParseVarHead: () => (/* binding */ flowAfterParseVarHead),\n/* harmony export */   flowParseArrow: () => (/* binding */ flowParseArrow),\n/* harmony export */   flowParseAssignableListItemTypes: () => (/* binding */ flowParseAssignableListItemTypes),\n/* harmony export */   flowParseExportDeclaration: () => (/* binding */ flowParseExportDeclaration),\n/* harmony export */   flowParseExportStar: () => (/* binding */ flowParseExportStar),\n/* harmony export */   flowParseFunctionBodyAndFinish: () => (/* binding */ flowParseFunctionBodyAndFinish),\n/* harmony export */   flowParseIdentifierStatement: () => (/* binding */ flowParseIdentifierStatement),\n/* harmony export */   flowParseImportSpecifier: () => (/* binding */ flowParseImportSpecifier),\n/* harmony export */   flowParseMaybeAssign: () => (/* binding */ flowParseMaybeAssign),\n/* harmony export */   flowParseSubscript: () => (/* binding */ flowParseSubscript),\n/* harmony export */   flowParseSubscripts: () => (/* binding */ flowParseSubscripts),\n/* harmony export */   flowParseTypeAnnotation: () => (/* binding */ flowParseTypeAnnotation),\n/* harmony export */   flowParseTypeParameterDeclaration: () => (/* binding */ flowParseTypeParameterDeclaration),\n/* harmony export */   flowParseVariance: () => (/* binding */ flowParseVariance),\n/* harmony export */   flowShouldDisallowExportDefaultSpecifier: () => (/* binding */ flowShouldDisallowExportDefaultSpecifier),\n/* harmony export */   flowShouldParseExportDeclaration: () => (/* binding */ flowShouldParseExportDeclaration),\n/* harmony export */   flowShouldParseExportStar: () => (/* binding */ flowShouldParseExportStar),\n/* harmony export */   flowStartParseAsyncArrowFromCallExpression: () => (/* binding */ flowStartParseAsyncArrowFromCallExpression),\n/* harmony export */   flowStartParseFunctionParams: () => (/* binding */ flowStartParseFunctionParams),\n/* harmony export */   flowStartParseImportSpecifiers: () => (/* binding */ flowStartParseImportSpecifiers),\n/* harmony export */   flowStartParseNewArguments: () => (/* binding */ flowStartParseNewArguments),\n/* harmony export */   flowStartParseObjPropValue: () => (/* binding */ flowStartParseObjPropValue),\n/* harmony export */   flowTryParseExportDefaultExpression: () => (/* binding */ flowTryParseExportDefaultExpression),\n/* harmony export */   flowTryParseStatement: () => (/* binding */ flowTryParseStatement)\n/* harmony export */ });\n/* harmony import */ var _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tokenizer/index */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _traverser_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../traverser/base */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js\");\n/* harmony import */ var _traverser_expression__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../traverser/expression */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/expression.js\");\n/* harmony import */ var _traverser_statement__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../traverser/statement */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/statement.js\");\n/* harmony import */ var _traverser_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../traverser/util */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/util.js\");\n/* eslint max-len: 0 */\n\n\n\n\n\n\n\n\n\nfunction isMaybeDefaultImport(lookahead) {\n  return (\n    (lookahead.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name || !!(lookahead.type & _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.IS_KEYWORD)) &&\n    lookahead.contextualKeyword !== _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._from\n  );\n}\n\nfunction flowParseTypeInitialiser(tok) {\n  const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(tok || _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon);\n  flowParseType();\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n}\n\nfunction flowParsePredicate() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.modulo);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._checks);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL)) {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseExpression)();\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR);\n  }\n}\n\nfunction flowParseTypeAndPredicateInitialiser() {\n  const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.modulo)) {\n    flowParsePredicate();\n  } else {\n    flowParseType();\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.modulo)) {\n      flowParsePredicate();\n    }\n  }\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n}\n\nfunction flowParseDeclareClass() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  flowParseInterfaceish(/* isClass */ true);\n}\n\nfunction flowParseDeclareFunction() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL);\n  flowParseFunctionTypeParams();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR);\n\n  flowParseTypeAndPredicateInitialiser();\n\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.semicolon)();\n}\n\nfunction flowParseDeclare() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._class)) {\n    flowParseDeclareClass();\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._function)) {\n    flowParseDeclareFunction();\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._var)) {\n    flowParseDeclareVariable();\n  } else if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._module)) {\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dot)) {\n      flowParseDeclareModuleExports();\n    } else {\n      flowParseDeclareModule();\n    }\n  } else if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type)) {\n    flowParseDeclareTypeAlias();\n  } else if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._opaque)) {\n    flowParseDeclareOpaqueType();\n  } else if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._interface)) {\n    flowParseDeclareInterface();\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export)) {\n    flowParseDeclareExportDeclaration();\n  } else {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.unexpected)();\n  }\n}\n\nfunction flowParseDeclareVariable() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  flowParseTypeAnnotatableIdentifier();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.semicolon)();\n}\n\nfunction flowParseDeclareModule() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)) {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseExprAtom)();\n  } else {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  }\n\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL);\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._import)) {\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n      (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_5__.parseImport)();\n    } else {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.unexpected)();\n    }\n  }\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR);\n}\n\nfunction flowParseDeclareExportDeclaration() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export);\n\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._default)) {\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._function) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._class)) {\n      // declare export default class ...\n      // declare export default function ...\n      flowParseDeclare();\n    } else {\n      // declare export default [type];\n      flowParseType();\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.semicolon)();\n    }\n  } else if (\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._var) || // declare export var ...\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._function) || // declare export function ...\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._class) || // declare export class ...\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._opaque) // declare export opaque ..\n  ) {\n    flowParseDeclare();\n  } else if (\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.star) || // declare export * from ''\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL) || // declare export {} ...\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._interface) || // declare export interface ...\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type) || // declare export type ...\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._opaque) // declare export opaque type ...\n  ) {\n    (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_5__.parseExport)();\n  } else {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.unexpected)();\n  }\n}\n\nfunction flowParseDeclareModuleExports() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._exports);\n  flowParseTypeAnnotation();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.semicolon)();\n}\n\nfunction flowParseDeclareTypeAlias() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  flowParseTypeAlias();\n}\n\nfunction flowParseDeclareOpaqueType() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  flowParseOpaqueType(true);\n}\n\nfunction flowParseDeclareInterface() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  flowParseInterfaceish();\n}\n\n// Interfaces\n\nfunction flowParseInterfaceish(isClass = false) {\n  flowParseRestrictedIdentifier();\n\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._extends)) {\n    do {\n      flowParseInterfaceExtends();\n    } while (!isClass && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma));\n  }\n\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._mixins)) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    do {\n      flowParseInterfaceExtends();\n    } while ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma));\n  }\n\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._implements)) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    do {\n      flowParseInterfaceExtends();\n    } while ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma));\n  }\n\n  flowParseObjectType(isClass, false, isClass);\n}\n\nfunction flowParseInterfaceExtends() {\n  flowParseQualifiedTypeIdentifier(false);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    flowParseTypeParameterInstantiation();\n  }\n}\n\nfunction flowParseInterface() {\n  flowParseInterfaceish();\n}\n\nfunction flowParseRestrictedIdentifier() {\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n}\n\nfunction flowParseTypeAlias() {\n  flowParseRestrictedIdentifier();\n\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  flowParseTypeInitialiser(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.semicolon)();\n}\n\nfunction flowParseOpaqueType(declare) {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type);\n  flowParseRestrictedIdentifier();\n\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  // Parse the supertype\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    flowParseTypeInitialiser(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon);\n  }\n\n  if (!declare) {\n    flowParseTypeInitialiser(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq);\n  }\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.semicolon)();\n}\n\nfunction flowParseTypeParameter() {\n  flowParseVariance();\n  flowParseTypeAnnotatableIdentifier();\n\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n    flowParseType();\n  }\n}\n\nfunction flowParseTypeParameterDeclaration() {\n  const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n  // istanbul ignore else: this condition is already checked at all call sites\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.typeParameterStart)) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  } else {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.unexpected)();\n  }\n\n  do {\n    flowParseTypeParameter();\n    if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan)) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma);\n    }\n  } while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan);\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n}\n\nfunction flowParseTypeParameterInstantiation() {\n  const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan);\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    flowParseType();\n    if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan)) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma);\n    }\n  }\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan);\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n}\n\nfunction flowParseInterfaceType() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._interface);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._extends)) {\n    do {\n      flowParseInterfaceExtends();\n    } while ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma));\n  }\n  flowParseObjectType(false, false, false);\n}\n\nfunction flowParseObjectPropertyKey() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.num) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)) {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseExprAtom)();\n  } else {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  }\n}\n\nfunction flowParseObjectTypeIndexer() {\n  // Note: bracketL has already been consumed\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon) {\n    flowParseObjectPropertyKey();\n    flowParseTypeInitialiser();\n  } else {\n    flowParseType();\n  }\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR);\n  flowParseTypeInitialiser();\n}\n\nfunction flowParseObjectTypeInternalSlot() {\n  // Note: both bracketL have already been consumed\n  flowParseObjectPropertyKey();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL)) {\n    flowParseObjectTypeMethodish();\n  } else {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question);\n    flowParseTypeInitialiser();\n  }\n}\n\nfunction flowParseObjectTypeMethodish() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL);\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR) && !(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.ellipsis) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    flowParseFunctionTypeParam();\n    if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR)) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma);\n    }\n  }\n\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.ellipsis)) {\n    flowParseFunctionTypeParam();\n  }\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR);\n  flowParseTypeInitialiser();\n}\n\nfunction flowParseObjectTypeCallProperty() {\n  flowParseObjectTypeMethodish();\n}\n\nfunction flowParseObjectType(allowStatic, allowExact, allowProto) {\n  let endDelim;\n  if (allowExact && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceBarL)) {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceBarL);\n    endDelim = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceBarR;\n  } else {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL);\n    endDelim = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR;\n  }\n\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(endDelim) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    if (allowProto && (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._proto)) {\n      const lookahead = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)();\n      if (lookahead !== _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon && lookahead !== _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question) {\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n        allowStatic = false;\n      }\n    }\n    if (allowStatic && (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._static)) {\n      const lookahead = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)();\n      if (lookahead !== _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon && lookahead !== _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question) {\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n      }\n    }\n\n    flowParseVariance();\n\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL)) {\n      if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL)) {\n        flowParseObjectTypeInternalSlot();\n      } else {\n        flowParseObjectTypeIndexer();\n      }\n    } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n      flowParseObjectTypeCallProperty();\n    } else {\n      if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._get) || (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._set)) {\n        const lookahead = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)();\n        if (lookahead === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name || lookahead === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string || lookahead === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.num) {\n          (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n        }\n      }\n\n      flowParseObjectTypeProperty();\n    }\n\n    flowObjectTypeSemicolon();\n  }\n\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(endDelim);\n}\n\nfunction flowParseObjectTypeProperty() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.ellipsis)) {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.ellipsis);\n    if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma)) {\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.semi);\n    }\n    // Explicit inexact object syntax.\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n      return;\n    }\n    flowParseType();\n  } else {\n    flowParseObjectPropertyKey();\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL)) {\n      // This is a method property\n      flowParseObjectTypeMethodish();\n    } else {\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question);\n      flowParseTypeInitialiser();\n    }\n  }\n}\n\nfunction flowObjectTypeSemicolon() {\n  if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.semi) && !(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma) && !(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR) && !(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceBarR)) {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.unexpected)();\n  }\n}\n\nfunction flowParseQualifiedTypeIdentifier(initialIdAlreadyParsed) {\n  if (!initialIdAlreadyParsed) {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  }\n  while ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dot)) {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  }\n}\n\nfunction flowParseGenericType() {\n  flowParseQualifiedTypeIdentifier(true);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    flowParseTypeParameterInstantiation();\n  }\n}\n\nfunction flowParseTypeofType() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._typeof);\n  flowParsePrimaryType();\n}\n\nfunction flowParseTupleType() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL);\n  // We allow trailing commas\n  while (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.pos < _traverser_base__WEBPACK_IMPORTED_MODULE_3__.input.length && !(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR)) {\n    flowParseType();\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR)) {\n      break;\n    }\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma);\n  }\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR);\n}\n\nfunction flowParseFunctionTypeParam() {\n  const lookahead = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)();\n  if (lookahead === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon || lookahead === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question) {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question);\n    flowParseTypeInitialiser();\n  } else {\n    flowParseType();\n  }\n}\n\nfunction flowParseFunctionTypeParams() {\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR) && !(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.ellipsis) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    flowParseFunctionTypeParam();\n    if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR)) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma);\n    }\n  }\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.ellipsis)) {\n    flowParseFunctionTypeParam();\n  }\n}\n\n// The parsing of types roughly parallels the parsing of expressions, and\n// primary types are kind of like primary expressions...they're the\n// primitives with which other types are constructed.\nfunction flowParsePrimaryType() {\n  let isGroupedType = false;\n  const oldNoAnonFunctionType = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.noAnonFunctionType;\n\n  switch (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type) {\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name: {\n      if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._interface)) {\n        flowParseInterfaceType();\n        return;\n      }\n      (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n      flowParseGenericType();\n      return;\n    }\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL:\n      flowParseObjectType(false, false, false);\n      return;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceBarL:\n      flowParseObjectType(false, true, false);\n      return;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL:\n      flowParseTupleType();\n      return;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan:\n      flowParseTypeParameterDeclaration();\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL);\n      flowParseFunctionTypeParams();\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR);\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.arrow);\n      flowParseType();\n      return;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL:\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n\n      // Check to see if this is actually a grouped type\n      if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR) && !(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.ellipsis)) {\n        if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n          const token = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)();\n          isGroupedType = token !== _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question && token !== _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon;\n        } else {\n          isGroupedType = true;\n        }\n      }\n\n      if (isGroupedType) {\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.noAnonFunctionType = false;\n        flowParseType();\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n        // A `,` or a `) =>` means this is an anonymous function type\n        if (\n          _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.noAnonFunctionType ||\n          !((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma) || ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.arrow))\n        ) {\n          (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR);\n          return;\n        } else {\n          // Eat a comma if there is one\n          (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma);\n        }\n      }\n\n      flowParseFunctionTypeParams();\n\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR);\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.arrow);\n      flowParseType();\n      return;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.minus:\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n      (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseLiteral)();\n      return;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.num:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._true:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._false:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._null:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._this:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._void:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.star:\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n      return;\n\n    default:\n      if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._typeof) {\n        flowParseTypeofType();\n        return;\n      } else if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type & _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.IS_KEYWORD) {\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name;\n        return;\n      }\n  }\n\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.unexpected)();\n}\n\nfunction flowParsePostfixType() {\n  flowParsePrimaryType();\n  while (!(0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.canInsertSemicolon)() && ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.questionDot))) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.questionDot);\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL);\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR)) {\n      // Array type\n    } else {\n      // Indexed access type\n      flowParseType();\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR);\n    }\n  }\n}\n\nfunction flowParsePrefixType() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question)) {\n    flowParsePrefixType();\n  } else {\n    flowParsePostfixType();\n  }\n}\n\nfunction flowParseAnonFunctionWithoutParens() {\n  flowParsePrefixType();\n  if (!_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.noAnonFunctionType && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.arrow)) {\n    flowParseType();\n  }\n}\n\nfunction flowParseIntersectionType() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitwiseAND);\n  flowParseAnonFunctionWithoutParens();\n  while ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitwiseAND)) {\n    flowParseAnonFunctionWithoutParens();\n  }\n}\n\nfunction flowParseUnionType() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitwiseOR);\n  flowParseIntersectionType();\n  while ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitwiseOR)) {\n    flowParseIntersectionType();\n  }\n}\n\nfunction flowParseType() {\n  flowParseUnionType();\n}\n\nfunction flowParseTypeAnnotation() {\n  flowParseTypeInitialiser();\n}\n\nfunction flowParseTypeAnnotatableIdentifier() {\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    flowParseTypeAnnotation();\n  }\n}\n\nfunction flowParseVariance() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.plus) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.minus)) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].isType = true;\n  }\n}\n\n// ==================================\n// Overrides\n// ==================================\n\nfunction flowParseFunctionBodyAndFinish(funcContextId) {\n  // For arrow functions, `parseArrow` handles the return type itself.\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    flowParseTypeAndPredicateInitialiser();\n  }\n\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseFunctionBody)(false, funcContextId);\n}\n\nfunction flowParseSubscript(\n  startTokenIndex,\n  noCalls,\n  stopState,\n) {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.questionDot) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan) {\n    if (noCalls) {\n      stopState.stop = true;\n      return;\n    }\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    flowParseTypeParameterInstantiation();\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL);\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseCallExpressionArguments)();\n    return;\n  } else if (!noCalls && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n    flowParseTypeParameterInstantiation();\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL);\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseCallExpressionArguments)();\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n    } else {\n      return;\n    }\n  }\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.baseParseSubscript)(startTokenIndex, noCalls, stopState);\n}\n\nfunction flowStartParseNewArguments() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n    flowParseTypeParameterInstantiation();\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n    }\n  }\n}\n\n// interfaces\nfunction flowTryParseStatement() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) && _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._interface) {\n    const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    flowParseInterface();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n    return true;\n  } else if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._enum)) {\n    flowParseEnumDeclaration();\n    return true;\n  }\n  return false;\n}\n\nfunction flowTryParseExportDefaultExpression() {\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._enum)) {\n    flowParseEnumDeclaration();\n    return true;\n  }\n  return false;\n}\n\n// declares, interfaces and type aliases\nfunction flowParseIdentifierStatement(contextualKeyword) {\n  if (contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._declare) {\n    if (\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._class) ||\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) ||\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._function) ||\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._var) ||\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export)\n    ) {\n      const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n      flowParseDeclare();\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n    }\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n    if (contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._interface) {\n      const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n      flowParseInterface();\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n    } else if (contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type) {\n      const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n      flowParseTypeAlias();\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n    } else if (contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._opaque) {\n      const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n      flowParseOpaqueType(false);\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n    }\n  }\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.semicolon)();\n}\n\n// export type\nfunction flowShouldParseExportDeclaration() {\n  return (\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type) ||\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._interface) ||\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._opaque) ||\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._enum)\n  );\n}\n\nfunction flowShouldDisallowExportDefaultSpecifier() {\n  return (\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) &&\n    (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type ||\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._interface ||\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._opaque ||\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._enum)\n  );\n}\n\nfunction flowParseExportDeclaration() {\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type)) {\n    const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL)) {\n      // export type { foo, bar };\n      (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_5__.parseExportSpecifiers)();\n      (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_5__.parseExportFrom)();\n    } else {\n      // export type Foo = Bar;\n      flowParseTypeAlias();\n    }\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n  } else if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._opaque)) {\n    const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    // export opaque type Foo = Bar;\n    flowParseOpaqueType(false);\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n  } else if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._interface)) {\n    const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    flowParseInterface();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n  } else {\n    (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_5__.parseStatement)(true);\n  }\n}\n\nfunction flowShouldParseExportStar() {\n  return (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.star) || ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.star);\n}\n\nfunction flowParseExportStar() {\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type)) {\n    const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(2);\n    (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_5__.baseParseExportStar)();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n  } else {\n    (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_5__.baseParseExportStar)();\n  }\n}\n\n// parse a the super class type parameters and implements\nfunction flowAfterParseClassSuper(hasSuper) {\n  if (hasSuper && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    flowParseTypeParameterInstantiation();\n  }\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._implements)) {\n    const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._implements;\n    do {\n      flowParseRestrictedIdentifier();\n      if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n        flowParseTypeParameterInstantiation();\n      }\n    } while ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma));\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n  }\n}\n\n// parse type parameters for object method shorthand\nfunction flowStartParseObjPropValue() {\n  // method shorthand\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n    if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL)) (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.unexpected)();\n  }\n}\n\nfunction flowParseAssignableListItemTypes() {\n  const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    flowParseTypeAnnotation();\n  }\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n}\n\n// parse typeof and type imports\nfunction flowStartParseImportSpecifiers() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._typeof) || (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type)) {\n    const lh = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadTypeAndKeyword)();\n    if (isMaybeDefaultImport(lh) || lh.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL || lh.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.star) {\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    }\n  }\n}\n\n// parse import-type/typeof shorthand\nfunction flowParseImportSpecifier() {\n  const isTypeKeyword =\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type || _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._typeof;\n  if (isTypeKeyword) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  } else {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  }\n\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._as) && !(0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.isLookaheadContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._as)) {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n    if (isTypeKeyword && !(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) && !(_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type & _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.IS_KEYWORD)) {\n      // `import {type as ,` or `import {type as }`\n    } else {\n      // `import {type as foo`\n      (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n    }\n  } else {\n    if (isTypeKeyword && ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) || !!(_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type & _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.IS_KEYWORD))) {\n      // `import {type foo`\n      (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n    }\n    if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._as)) {\n      (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n    }\n  }\n}\n\n// parse function type parameters - function foo<T>() {}\nfunction flowStartParseFunctionParams() {\n  // Originally this checked if the method is a getter/setter, but if it was, we'd crash soon\n  // anyway, so don't try to propagate that information.\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n    flowParseTypeParameterDeclaration();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n  }\n}\n\n// parse flow type annotations on variable declarator heads - let foo: string = bar\nfunction flowAfterParseVarHead() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    flowParseTypeAnnotation();\n  }\n}\n\n// parse the return type of an async arrow function - let foo = (async (): number => {});\nfunction flowStartParseAsyncArrowFromCallExpression() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    const oldNoAnonFunctionType = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.noAnonFunctionType;\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.noAnonFunctionType = true;\n    flowParseTypeAnnotation();\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.noAnonFunctionType = oldNoAnonFunctionType;\n  }\n}\n\n// We need to support type parameter declarations for arrow functions. This\n// is tricky. There are three situations we need to handle\n//\n// 1. This is either JSX or an arrow function. We'll try JSX first. If that\n//    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n//    error.\n// 2. This is an arrow function. We'll parse the type parameter declaration,\n//    parse the rest, make sure the rest is an arrow function, and go from\n//    there\n// 3. This is neither. Just call the super method\nfunction flowParseMaybeAssign(noIn, isWithinParens) {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n    let wasArrow = (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.baseParseMaybeAssign)(noIn, isWithinParens);\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.typeParameterStart;\n    } else {\n      return wasArrow;\n    }\n\n    const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n    flowParseTypeParameterDeclaration();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n    wasArrow = (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.baseParseMaybeAssign)(noIn, isWithinParens);\n    if (wasArrow) {\n      return true;\n    }\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.unexpected)();\n  }\n\n  return (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.baseParseMaybeAssign)(noIn, isWithinParens);\n}\n\n// handle return types for arrow functions\nfunction flowParseArrow() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n    const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n\n    const oldNoAnonFunctionType = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.noAnonFunctionType;\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.noAnonFunctionType = true;\n    flowParseTypeAndPredicateInitialiser();\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n    if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.canInsertSemicolon)()) (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.unexpected)();\n    if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.arrow)) (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.unexpected)();\n\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n    }\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n  }\n  return (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.arrow);\n}\n\nfunction flowParseSubscripts(startTokenIndex, noCalls = false) {\n  if (\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._async &&\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)\n  ) {\n    const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n    const wasArrow = parseAsyncArrowWithTypeParameters();\n    if (wasArrow && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n      return;\n    }\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n  }\n\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.baseParseSubscripts)(startTokenIndex, noCalls);\n}\n\n// Returns true if there was an arrow function here.\nfunction parseAsyncArrowWithTypeParameters() {\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.scopeDepth++;\n  const startTokenIndex = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length;\n  (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_5__.parseFunctionParams)();\n  if (!(0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseArrow)()) {\n    return false;\n  }\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseArrowExpression)(startTokenIndex);\n  return true;\n}\n\nfunction flowParseEnumDeclaration() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._enum);\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._enum;\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  flowParseEnumBody();\n}\n\nfunction flowParseEnumBody() {\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._of)) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  }\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL);\n  flowParseEnumMembers();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR);\n}\n\nfunction flowParseEnumMembers() {\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.ellipsis)) {\n      break;\n    }\n    flowParseEnumMember();\n    if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_6__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma);\n    }\n  }\n}\n\nfunction flowParseEnumMember() {\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n    // Flow enum values are always just one token (a string, number, or boolean literal).\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/flow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/jsx/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/plugins/jsx/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsxParseElement: () => (/* binding */ jsxParseElement),\n/* harmony export */   nextJSXTagToken: () => (/* binding */ nextJSXTagToken)\n/* harmony export */ });\n/* harmony import */ var _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tokenizer/index */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _traverser_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../traverser/base */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js\");\n/* harmony import */ var _traverser_expression__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../traverser/expression */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/expression.js\");\n/* harmony import */ var _traverser_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../traverser/util */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/util.js\");\n/* harmony import */ var _util_charcodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/charcodes */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js\");\n/* harmony import */ var _util_identifier__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/identifier */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/identifier.js\");\n/* harmony import */ var _typescript__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../typescript */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/typescript.js\");\n\n\n\n\n\n\n\n\n\n/**\n * Read token with JSX contents.\n *\n * In addition to detecting jsxTagStart and also regular tokens that might be\n * part of an expression, this code detects the start and end of text ranges\n * within JSX children. In order to properly count the number of children, we\n * distinguish jsxText from jsxEmptyText, which is a text range that simplifies\n * to the empty string after JSX whitespace trimming.\n *\n * It turns out that a JSX text range will simplify to the empty string if and\n * only if both of these conditions hold:\n * - The range consists entirely of whitespace characters (only counting space,\n *   tab, \\r, and \\n).\n * - The range has at least one newline.\n * This can be proven by analyzing any implementation of whitespace trimming,\n * e.g. formatJSXTextLiteral in Sucrase or cleanJSXElementLiteralChild in Babel.\n */\nfunction jsxReadToken() {\n  let sawNewline = false;\n  let sawNonWhitespace = false;\n  while (true) {\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos >= _traverser_base__WEBPACK_IMPORTED_MODULE_2__.input.length) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_4__.unexpected)(\"Unterminated JSX contents\");\n      return;\n    }\n\n    const ch = _traverser_base__WEBPACK_IMPORTED_MODULE_2__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos);\n    if (ch === _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.lessThan || ch === _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.leftCurlyBrace) {\n      if (_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos === _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.start) {\n        if (ch === _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.lessThan) {\n          _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos++;\n          (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxTagStart);\n          return;\n        }\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.getTokenFromCode)(ch);\n        return;\n      }\n      if (sawNewline && !sawNonWhitespace) {\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxEmptyText);\n      } else {\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxText);\n      }\n      return;\n    }\n\n    // This is part of JSX text.\n    if (ch === _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.lineFeed) {\n      sawNewline = true;\n    } else if (ch !== _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.space && ch !== _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.carriageReturn && ch !== _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.tab) {\n      sawNonWhitespace = true;\n    }\n    _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos++;\n  }\n}\n\nfunction jsxReadString(quote) {\n  _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos++;\n  for (;;) {\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos >= _traverser_base__WEBPACK_IMPORTED_MODULE_2__.input.length) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_4__.unexpected)(\"Unterminated string constant\");\n      return;\n    }\n\n    const ch = _traverser_base__WEBPACK_IMPORTED_MODULE_2__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos);\n    if (ch === quote) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos++;\n      break;\n    }\n    _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos++;\n  }\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.string);\n}\n\n// Read a JSX identifier (valid tag or attribute name).\n//\n// Optimized version since JSX identifiers can't contain\n// escape characters and so can be read as single slice.\n// Also assumes that first character was already checked\n// by isIdentifierStart in readToken.\n\nfunction jsxReadWord() {\n  let ch;\n  do {\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos > _traverser_base__WEBPACK_IMPORTED_MODULE_2__.input.length) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_4__.unexpected)(\"Unexpectedly reached the end of input.\");\n      return;\n    }\n    ch = _traverser_base__WEBPACK_IMPORTED_MODULE_2__.input.charCodeAt(++_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos);\n  } while (_util_identifier__WEBPACK_IMPORTED_MODULE_6__.IS_IDENTIFIER_CHAR[ch] || ch === _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.dash);\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxName);\n}\n\n// Parse next token as JSX identifier\nfunction jsxParseIdentifier() {\n  nextJSXTagToken();\n}\n\n// Parse namespaced identifier.\nfunction jsxParseNamespacedName(identifierRole) {\n  jsxParseIdentifier();\n  if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.colon)) {\n    // Plain identifier, so this is an access.\n    _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.tokens.length - 1].identifierRole = identifierRole;\n    return;\n  }\n  // Process the second half of the namespaced name.\n  jsxParseIdentifier();\n}\n\n// Parses element name in any form - namespaced, member\n// or single identifier.\nfunction jsxParseElementName() {\n  const firstTokenIndex = _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.tokens.length;\n  jsxParseNamespacedName(_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.Access);\n  let hadDot = false;\n  while ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.dot)) {\n    hadDot = true;\n    nextJSXTagToken();\n    jsxParseIdentifier();\n  }\n  // For tags like <div> with a lowercase letter and no dots, the name is\n  // actually *not* an identifier access, since it's referring to a built-in\n  // tag name. Remove the identifier role in this case so that it's not\n  // accidentally transformed by the imports transform when preserving JSX.\n  if (!hadDot) {\n    const firstToken = _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.tokens[firstTokenIndex];\n    const firstChar = _traverser_base__WEBPACK_IMPORTED_MODULE_2__.input.charCodeAt(firstToken.start);\n    if (firstChar >= _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.lowercaseA && firstChar <= _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.lowercaseZ) {\n      firstToken.identifierRole = null;\n    }\n  }\n}\n\n// Parses any type of JSX attribute value.\nfunction jsxParseAttributeValue() {\n  switch (_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.type) {\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL:\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n      (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_3__.parseExpression)();\n      nextJSXTagToken();\n      return;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxTagStart:\n      jsxParseElement();\n      nextJSXTagToken();\n      return;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.string:\n      nextJSXTagToken();\n      return;\n\n    default:\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_4__.unexpected)(\"JSX value should be either an expression or a quoted JSX text\");\n  }\n}\n\n// Parse JSX spread child, after already processing the {\n// Does not parse the closing }\nfunction jsxParseSpreadChild() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_4__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.ellipsis);\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_3__.parseExpression)();\n}\n\n// Parses JSX opening tag starting after \"<\".\n// Returns true if the tag was self-closing.\n// Does not parse the last token.\nfunction jsxParseOpeningElement(initialTokenIndex) {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxTagEnd)) {\n    // This is an open-fragment.\n    return false;\n  }\n  jsxParseElementName();\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_2__.isTypeScriptEnabled) {\n    (0,_typescript__WEBPACK_IMPORTED_MODULE_7__.tsTryParseJSXTypeArgument)();\n  }\n  let hasSeenPropSpread = false;\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.slash) && !(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxTagEnd) && !_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.error) {\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL)) {\n      hasSeenPropSpread = true;\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_4__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.ellipsis);\n      (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_3__.parseMaybeAssign)();\n      // }\n      nextJSXTagToken();\n      continue;\n    }\n    if (\n      hasSeenPropSpread &&\n      _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.end - _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.start === 3 &&\n      _traverser_base__WEBPACK_IMPORTED_MODULE_2__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.start) === _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.lowercaseK &&\n      _traverser_base__WEBPACK_IMPORTED_MODULE_2__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.start + 1) === _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.lowercaseE &&\n      _traverser_base__WEBPACK_IMPORTED_MODULE_2__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.start + 2) === _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.lowercaseY\n    ) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.tokens[initialTokenIndex].jsxRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.JSXRole.KeyAfterPropSpread;\n    }\n    jsxParseNamespacedName(_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ObjectKey);\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.eq)) {\n      nextJSXTagToken();\n      jsxParseAttributeValue();\n    }\n  }\n  const isSelfClosing = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.slash);\n  if (isSelfClosing) {\n    // /\n    nextJSXTagToken();\n  }\n  return isSelfClosing;\n}\n\n// Parses JSX closing tag starting after \"</\".\n// Does not parse the last token.\nfunction jsxParseClosingElement() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxTagEnd)) {\n    // Fragment syntax, so we immediately have a tag end.\n    return;\n  }\n  jsxParseElementName();\n}\n\n// Parses entire JSX element, including its opening tag\n// (starting after \"<\"), attributes, contents and closing tag.\n// Does not parse the last token.\nfunction jsxParseElementAt() {\n  const initialTokenIndex = _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.tokens.length - 1;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.tokens[initialTokenIndex].jsxRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.JSXRole.NoChildren;\n  let numExplicitChildren = 0;\n  const isSelfClosing = jsxParseOpeningElement(initialTokenIndex);\n  if (!isSelfClosing) {\n    nextJSXExprToken();\n    while (true) {\n      switch (_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.type) {\n        case _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxTagStart:\n          nextJSXTagToken();\n          if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.slash)) {\n            nextJSXTagToken();\n            jsxParseClosingElement();\n            // Key after prop spread takes precedence over number of children,\n            // since it means we switch to createElement, which doesn't care\n            // about number of children.\n            if (_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.tokens[initialTokenIndex].jsxRole !== _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.JSXRole.KeyAfterPropSpread) {\n              if (numExplicitChildren === 1) {\n                _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.tokens[initialTokenIndex].jsxRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.JSXRole.OneChild;\n              } else if (numExplicitChildren > 1) {\n                _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.tokens[initialTokenIndex].jsxRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.JSXRole.StaticChildren;\n              }\n            }\n            return;\n          }\n          numExplicitChildren++;\n          jsxParseElementAt();\n          nextJSXExprToken();\n          break;\n\n        case _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxText:\n          numExplicitChildren++;\n          nextJSXExprToken();\n          break;\n\n        case _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxEmptyText:\n          nextJSXExprToken();\n          break;\n\n        case _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL:\n          (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n          if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.ellipsis)) {\n            jsxParseSpreadChild();\n            nextJSXExprToken();\n            // Spread children are a mechanism to explicitly mark children as\n            // static, so count it as 2 children to satisfy the \"more than one\n            // child\" condition.\n            numExplicitChildren += 2;\n          } else {\n            // If we see {}, this is an empty pseudo-expression that doesn't\n            // count as a child.\n            if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR)) {\n              numExplicitChildren++;\n              (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_3__.parseExpression)();\n            }\n            nextJSXExprToken();\n          }\n\n          break;\n\n        // istanbul ignore next - should never happen\n        default:\n          (0,_traverser_util__WEBPACK_IMPORTED_MODULE_4__.unexpected)();\n          return;\n      }\n    }\n  }\n}\n\n// Parses entire JSX element from current position.\n// Does not parse the last token.\nfunction jsxParseElement() {\n  nextJSXTagToken();\n  jsxParseElementAt();\n}\n\n// ==================================\n// Overrides\n// ==================================\n\nfunction nextJSXTagToken() {\n  _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.tokens.push(new _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.Token());\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.skipSpace)();\n  _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.start = _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos;\n  const code = _traverser_base__WEBPACK_IMPORTED_MODULE_2__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos);\n\n  if (_util_identifier__WEBPACK_IMPORTED_MODULE_6__.IS_IDENTIFIER_START[code]) {\n    jsxReadWord();\n  } else if (code === _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.quotationMark || code === _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.apostrophe) {\n    jsxReadString(code);\n  } else {\n    // The following tokens are just one character each.\n    ++_traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos;\n    switch (code) {\n      case _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.greaterThan:\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxTagEnd);\n        break;\n      case _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.lessThan:\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxTagStart);\n        break;\n      case _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.slash:\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.slash);\n        break;\n      case _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.equalsTo:\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.eq);\n        break;\n      case _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.leftCurlyBrace:\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL);\n        break;\n      case _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.dot:\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.dot);\n        break;\n      case _util_charcodes__WEBPACK_IMPORTED_MODULE_5__.charCodes.colon:\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.colon);\n        break;\n      default:\n        (0,_traverser_util__WEBPACK_IMPORTED_MODULE_4__.unexpected)();\n    }\n  }\n}\n\nfunction nextJSXExprToken() {\n  _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.tokens.push(new _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.Token());\n  _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.start = _traverser_base__WEBPACK_IMPORTED_MODULE_2__.state.pos;\n  jsxReadToken();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/jsx/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/jsx/xhtml.js":
/*!*******************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/plugins/jsx/xhtml.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Use a Map rather than object to avoid unexpected __proto__ access.\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Map([\n  [\"quot\", \"\\u0022\"],\n  [\"amp\", \"&\"],\n  [\"apos\", \"\\u0027\"],\n  [\"lt\", \"<\"],\n  [\"gt\", \">\"],\n  [\"nbsp\", \"\\u00A0\"],\n  [\"iexcl\", \"\\u00A1\"],\n  [\"cent\", \"\\u00A2\"],\n  [\"pound\", \"\\u00A3\"],\n  [\"curren\", \"\\u00A4\"],\n  [\"yen\", \"\\u00A5\"],\n  [\"brvbar\", \"\\u00A6\"],\n  [\"sect\", \"\\u00A7\"],\n  [\"uml\", \"\\u00A8\"],\n  [\"copy\", \"\\u00A9\"],\n  [\"ordf\", \"\\u00AA\"],\n  [\"laquo\", \"\\u00AB\"],\n  [\"not\", \"\\u00AC\"],\n  [\"shy\", \"\\u00AD\"],\n  [\"reg\", \"\\u00AE\"],\n  [\"macr\", \"\\u00AF\"],\n  [\"deg\", \"\\u00B0\"],\n  [\"plusmn\", \"\\u00B1\"],\n  [\"sup2\", \"\\u00B2\"],\n  [\"sup3\", \"\\u00B3\"],\n  [\"acute\", \"\\u00B4\"],\n  [\"micro\", \"\\u00B5\"],\n  [\"para\", \"\\u00B6\"],\n  [\"middot\", \"\\u00B7\"],\n  [\"cedil\", \"\\u00B8\"],\n  [\"sup1\", \"\\u00B9\"],\n  [\"ordm\", \"\\u00BA\"],\n  [\"raquo\", \"\\u00BB\"],\n  [\"frac14\", \"\\u00BC\"],\n  [\"frac12\", \"\\u00BD\"],\n  [\"frac34\", \"\\u00BE\"],\n  [\"iquest\", \"\\u00BF\"],\n  [\"Agrave\", \"\\u00C0\"],\n  [\"Aacute\", \"\\u00C1\"],\n  [\"Acirc\", \"\\u00C2\"],\n  [\"Atilde\", \"\\u00C3\"],\n  [\"Auml\", \"\\u00C4\"],\n  [\"Aring\", \"\\u00C5\"],\n  [\"AElig\", \"\\u00C6\"],\n  [\"Ccedil\", \"\\u00C7\"],\n  [\"Egrave\", \"\\u00C8\"],\n  [\"Eacute\", \"\\u00C9\"],\n  [\"Ecirc\", \"\\u00CA\"],\n  [\"Euml\", \"\\u00CB\"],\n  [\"Igrave\", \"\\u00CC\"],\n  [\"Iacute\", \"\\u00CD\"],\n  [\"Icirc\", \"\\u00CE\"],\n  [\"Iuml\", \"\\u00CF\"],\n  [\"ETH\", \"\\u00D0\"],\n  [\"Ntilde\", \"\\u00D1\"],\n  [\"Ograve\", \"\\u00D2\"],\n  [\"Oacute\", \"\\u00D3\"],\n  [\"Ocirc\", \"\\u00D4\"],\n  [\"Otilde\", \"\\u00D5\"],\n  [\"Ouml\", \"\\u00D6\"],\n  [\"times\", \"\\u00D7\"],\n  [\"Oslash\", \"\\u00D8\"],\n  [\"Ugrave\", \"\\u00D9\"],\n  [\"Uacute\", \"\\u00DA\"],\n  [\"Ucirc\", \"\\u00DB\"],\n  [\"Uuml\", \"\\u00DC\"],\n  [\"Yacute\", \"\\u00DD\"],\n  [\"THORN\", \"\\u00DE\"],\n  [\"szlig\", \"\\u00DF\"],\n  [\"agrave\", \"\\u00E0\"],\n  [\"aacute\", \"\\u00E1\"],\n  [\"acirc\", \"\\u00E2\"],\n  [\"atilde\", \"\\u00E3\"],\n  [\"auml\", \"\\u00E4\"],\n  [\"aring\", \"\\u00E5\"],\n  [\"aelig\", \"\\u00E6\"],\n  [\"ccedil\", \"\\u00E7\"],\n  [\"egrave\", \"\\u00E8\"],\n  [\"eacute\", \"\\u00E9\"],\n  [\"ecirc\", \"\\u00EA\"],\n  [\"euml\", \"\\u00EB\"],\n  [\"igrave\", \"\\u00EC\"],\n  [\"iacute\", \"\\u00ED\"],\n  [\"icirc\", \"\\u00EE\"],\n  [\"iuml\", \"\\u00EF\"],\n  [\"eth\", \"\\u00F0\"],\n  [\"ntilde\", \"\\u00F1\"],\n  [\"ograve\", \"\\u00F2\"],\n  [\"oacute\", \"\\u00F3\"],\n  [\"ocirc\", \"\\u00F4\"],\n  [\"otilde\", \"\\u00F5\"],\n  [\"ouml\", \"\\u00F6\"],\n  [\"divide\", \"\\u00F7\"],\n  [\"oslash\", \"\\u00F8\"],\n  [\"ugrave\", \"\\u00F9\"],\n  [\"uacute\", \"\\u00FA\"],\n  [\"ucirc\", \"\\u00FB\"],\n  [\"uuml\", \"\\u00FC\"],\n  [\"yacute\", \"\\u00FD\"],\n  [\"thorn\", \"\\u00FE\"],\n  [\"yuml\", \"\\u00FF\"],\n  [\"OElig\", \"\\u0152\"],\n  [\"oelig\", \"\\u0153\"],\n  [\"Scaron\", \"\\u0160\"],\n  [\"scaron\", \"\\u0161\"],\n  [\"Yuml\", \"\\u0178\"],\n  [\"fnof\", \"\\u0192\"],\n  [\"circ\", \"\\u02C6\"],\n  [\"tilde\", \"\\u02DC\"],\n  [\"Alpha\", \"\\u0391\"],\n  [\"Beta\", \"\\u0392\"],\n  [\"Gamma\", \"\\u0393\"],\n  [\"Delta\", \"\\u0394\"],\n  [\"Epsilon\", \"\\u0395\"],\n  [\"Zeta\", \"\\u0396\"],\n  [\"Eta\", \"\\u0397\"],\n  [\"Theta\", \"\\u0398\"],\n  [\"Iota\", \"\\u0399\"],\n  [\"Kappa\", \"\\u039A\"],\n  [\"Lambda\", \"\\u039B\"],\n  [\"Mu\", \"\\u039C\"],\n  [\"Nu\", \"\\u039D\"],\n  [\"Xi\", \"\\u039E\"],\n  [\"Omicron\", \"\\u039F\"],\n  [\"Pi\", \"\\u03A0\"],\n  [\"Rho\", \"\\u03A1\"],\n  [\"Sigma\", \"\\u03A3\"],\n  [\"Tau\", \"\\u03A4\"],\n  [\"Upsilon\", \"\\u03A5\"],\n  [\"Phi\", \"\\u03A6\"],\n  [\"Chi\", \"\\u03A7\"],\n  [\"Psi\", \"\\u03A8\"],\n  [\"Omega\", \"\\u03A9\"],\n  [\"alpha\", \"\\u03B1\"],\n  [\"beta\", \"\\u03B2\"],\n  [\"gamma\", \"\\u03B3\"],\n  [\"delta\", \"\\u03B4\"],\n  [\"epsilon\", \"\\u03B5\"],\n  [\"zeta\", \"\\u03B6\"],\n  [\"eta\", \"\\u03B7\"],\n  [\"theta\", \"\\u03B8\"],\n  [\"iota\", \"\\u03B9\"],\n  [\"kappa\", \"\\u03BA\"],\n  [\"lambda\", \"\\u03BB\"],\n  [\"mu\", \"\\u03BC\"],\n  [\"nu\", \"\\u03BD\"],\n  [\"xi\", \"\\u03BE\"],\n  [\"omicron\", \"\\u03BF\"],\n  [\"pi\", \"\\u03C0\"],\n  [\"rho\", \"\\u03C1\"],\n  [\"sigmaf\", \"\\u03C2\"],\n  [\"sigma\", \"\\u03C3\"],\n  [\"tau\", \"\\u03C4\"],\n  [\"upsilon\", \"\\u03C5\"],\n  [\"phi\", \"\\u03C6\"],\n  [\"chi\", \"\\u03C7\"],\n  [\"psi\", \"\\u03C8\"],\n  [\"omega\", \"\\u03C9\"],\n  [\"thetasym\", \"\\u03D1\"],\n  [\"upsih\", \"\\u03D2\"],\n  [\"piv\", \"\\u03D6\"],\n  [\"ensp\", \"\\u2002\"],\n  [\"emsp\", \"\\u2003\"],\n  [\"thinsp\", \"\\u2009\"],\n  [\"zwnj\", \"\\u200C\"],\n  [\"zwj\", \"\\u200D\"],\n  [\"lrm\", \"\\u200E\"],\n  [\"rlm\", \"\\u200F\"],\n  [\"ndash\", \"\\u2013\"],\n  [\"mdash\", \"\\u2014\"],\n  [\"lsquo\", \"\\u2018\"],\n  [\"rsquo\", \"\\u2019\"],\n  [\"sbquo\", \"\\u201A\"],\n  [\"ldquo\", \"\\u201C\"],\n  [\"rdquo\", \"\\u201D\"],\n  [\"bdquo\", \"\\u201E\"],\n  [\"dagger\", \"\\u2020\"],\n  [\"Dagger\", \"\\u2021\"],\n  [\"bull\", \"\\u2022\"],\n  [\"hellip\", \"\\u2026\"],\n  [\"permil\", \"\\u2030\"],\n  [\"prime\", \"\\u2032\"],\n  [\"Prime\", \"\\u2033\"],\n  [\"lsaquo\", \"\\u2039\"],\n  [\"rsaquo\", \"\\u203A\"],\n  [\"oline\", \"\\u203E\"],\n  [\"frasl\", \"\\u2044\"],\n  [\"euro\", \"\\u20AC\"],\n  [\"image\", \"\\u2111\"],\n  [\"weierp\", \"\\u2118\"],\n  [\"real\", \"\\u211C\"],\n  [\"trade\", \"\\u2122\"],\n  [\"alefsym\", \"\\u2135\"],\n  [\"larr\", \"\\u2190\"],\n  [\"uarr\", \"\\u2191\"],\n  [\"rarr\", \"\\u2192\"],\n  [\"darr\", \"\\u2193\"],\n  [\"harr\", \"\\u2194\"],\n  [\"crarr\", \"\\u21B5\"],\n  [\"lArr\", \"\\u21D0\"],\n  [\"uArr\", \"\\u21D1\"],\n  [\"rArr\", \"\\u21D2\"],\n  [\"dArr\", \"\\u21D3\"],\n  [\"hArr\", \"\\u21D4\"],\n  [\"forall\", \"\\u2200\"],\n  [\"part\", \"\\u2202\"],\n  [\"exist\", \"\\u2203\"],\n  [\"empty\", \"\\u2205\"],\n  [\"nabla\", \"\\u2207\"],\n  [\"isin\", \"\\u2208\"],\n  [\"notin\", \"\\u2209\"],\n  [\"ni\", \"\\u220B\"],\n  [\"prod\", \"\\u220F\"],\n  [\"sum\", \"\\u2211\"],\n  [\"minus\", \"\\u2212\"],\n  [\"lowast\", \"\\u2217\"],\n  [\"radic\", \"\\u221A\"],\n  [\"prop\", \"\\u221D\"],\n  [\"infin\", \"\\u221E\"],\n  [\"ang\", \"\\u2220\"],\n  [\"and\", \"\\u2227\"],\n  [\"or\", \"\\u2228\"],\n  [\"cap\", \"\\u2229\"],\n  [\"cup\", \"\\u222A\"],\n  [\"int\", \"\\u222B\"],\n  [\"there4\", \"\\u2234\"],\n  [\"sim\", \"\\u223C\"],\n  [\"cong\", \"\\u2245\"],\n  [\"asymp\", \"\\u2248\"],\n  [\"ne\", \"\\u2260\"],\n  [\"equiv\", \"\\u2261\"],\n  [\"le\", \"\\u2264\"],\n  [\"ge\", \"\\u2265\"],\n  [\"sub\", \"\\u2282\"],\n  [\"sup\", \"\\u2283\"],\n  [\"nsub\", \"\\u2284\"],\n  [\"sube\", \"\\u2286\"],\n  [\"supe\", \"\\u2287\"],\n  [\"oplus\", \"\\u2295\"],\n  [\"otimes\", \"\\u2297\"],\n  [\"perp\", \"\\u22A5\"],\n  [\"sdot\", \"\\u22C5\"],\n  [\"lceil\", \"\\u2308\"],\n  [\"rceil\", \"\\u2309\"],\n  [\"lfloor\", \"\\u230A\"],\n  [\"rfloor\", \"\\u230B\"],\n  [\"lang\", \"\\u2329\"],\n  [\"rang\", \"\\u232A\"],\n  [\"loz\", \"\\u25CA\"],\n  [\"spades\", \"\\u2660\"],\n  [\"clubs\", \"\\u2663\"],\n  [\"hearts\", \"\\u2665\"],\n  [\"diams\", \"\\u2666\"],\n]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9wYXJzZXIvcGx1Z2lucy9qc3gveGh0bWwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsaUVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3BhcnNlci9wbHVnaW5zL2pzeC94aHRtbC5qcz84ZTMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFVzZSBhIE1hcCByYXRoZXIgdGhhbiBvYmplY3QgdG8gYXZvaWQgdW5leHBlY3RlZCBfX3Byb3RvX18gYWNjZXNzLlxuZXhwb3J0IGRlZmF1bHQgbmV3IE1hcChbXG4gIFtcInF1b3RcIiwgXCJcXHUwMDIyXCJdLFxuICBbXCJhbXBcIiwgXCImXCJdLFxuICBbXCJhcG9zXCIsIFwiXFx1MDAyN1wiXSxcbiAgW1wibHRcIiwgXCI8XCJdLFxuICBbXCJndFwiLCBcIj5cIl0sXG4gIFtcIm5ic3BcIiwgXCJcXHUwMEEwXCJdLFxuICBbXCJpZXhjbFwiLCBcIlxcdTAwQTFcIl0sXG4gIFtcImNlbnRcIiwgXCJcXHUwMEEyXCJdLFxuICBbXCJwb3VuZFwiLCBcIlxcdTAwQTNcIl0sXG4gIFtcImN1cnJlblwiLCBcIlxcdTAwQTRcIl0sXG4gIFtcInllblwiLCBcIlxcdTAwQTVcIl0sXG4gIFtcImJydmJhclwiLCBcIlxcdTAwQTZcIl0sXG4gIFtcInNlY3RcIiwgXCJcXHUwMEE3XCJdLFxuICBbXCJ1bWxcIiwgXCJcXHUwMEE4XCJdLFxuICBbXCJjb3B5XCIsIFwiXFx1MDBBOVwiXSxcbiAgW1wib3JkZlwiLCBcIlxcdTAwQUFcIl0sXG4gIFtcImxhcXVvXCIsIFwiXFx1MDBBQlwiXSxcbiAgW1wibm90XCIsIFwiXFx1MDBBQ1wiXSxcbiAgW1wic2h5XCIsIFwiXFx1MDBBRFwiXSxcbiAgW1wicmVnXCIsIFwiXFx1MDBBRVwiXSxcbiAgW1wibWFjclwiLCBcIlxcdTAwQUZcIl0sXG4gIFtcImRlZ1wiLCBcIlxcdTAwQjBcIl0sXG4gIFtcInBsdXNtblwiLCBcIlxcdTAwQjFcIl0sXG4gIFtcInN1cDJcIiwgXCJcXHUwMEIyXCJdLFxuICBbXCJzdXAzXCIsIFwiXFx1MDBCM1wiXSxcbiAgW1wiYWN1dGVcIiwgXCJcXHUwMEI0XCJdLFxuICBbXCJtaWNyb1wiLCBcIlxcdTAwQjVcIl0sXG4gIFtcInBhcmFcIiwgXCJcXHUwMEI2XCJdLFxuICBbXCJtaWRkb3RcIiwgXCJcXHUwMEI3XCJdLFxuICBbXCJjZWRpbFwiLCBcIlxcdTAwQjhcIl0sXG4gIFtcInN1cDFcIiwgXCJcXHUwMEI5XCJdLFxuICBbXCJvcmRtXCIsIFwiXFx1MDBCQVwiXSxcbiAgW1wicmFxdW9cIiwgXCJcXHUwMEJCXCJdLFxuICBbXCJmcmFjMTRcIiwgXCJcXHUwMEJDXCJdLFxuICBbXCJmcmFjMTJcIiwgXCJcXHUwMEJEXCJdLFxuICBbXCJmcmFjMzRcIiwgXCJcXHUwMEJFXCJdLFxuICBbXCJpcXVlc3RcIiwgXCJcXHUwMEJGXCJdLFxuICBbXCJBZ3JhdmVcIiwgXCJcXHUwMEMwXCJdLFxuICBbXCJBYWN1dGVcIiwgXCJcXHUwMEMxXCJdLFxuICBbXCJBY2lyY1wiLCBcIlxcdTAwQzJcIl0sXG4gIFtcIkF0aWxkZVwiLCBcIlxcdTAwQzNcIl0sXG4gIFtcIkF1bWxcIiwgXCJcXHUwMEM0XCJdLFxuICBbXCJBcmluZ1wiLCBcIlxcdTAwQzVcIl0sXG4gIFtcIkFFbGlnXCIsIFwiXFx1MDBDNlwiXSxcbiAgW1wiQ2NlZGlsXCIsIFwiXFx1MDBDN1wiXSxcbiAgW1wiRWdyYXZlXCIsIFwiXFx1MDBDOFwiXSxcbiAgW1wiRWFjdXRlXCIsIFwiXFx1MDBDOVwiXSxcbiAgW1wiRWNpcmNcIiwgXCJcXHUwMENBXCJdLFxuICBbXCJFdW1sXCIsIFwiXFx1MDBDQlwiXSxcbiAgW1wiSWdyYXZlXCIsIFwiXFx1MDBDQ1wiXSxcbiAgW1wiSWFjdXRlXCIsIFwiXFx1MDBDRFwiXSxcbiAgW1wiSWNpcmNcIiwgXCJcXHUwMENFXCJdLFxuICBbXCJJdW1sXCIsIFwiXFx1MDBDRlwiXSxcbiAgW1wiRVRIXCIsIFwiXFx1MDBEMFwiXSxcbiAgW1wiTnRpbGRlXCIsIFwiXFx1MDBEMVwiXSxcbiAgW1wiT2dyYXZlXCIsIFwiXFx1MDBEMlwiXSxcbiAgW1wiT2FjdXRlXCIsIFwiXFx1MDBEM1wiXSxcbiAgW1wiT2NpcmNcIiwgXCJcXHUwMEQ0XCJdLFxuICBbXCJPdGlsZGVcIiwgXCJcXHUwMEQ1XCJdLFxuICBbXCJPdW1sXCIsIFwiXFx1MDBENlwiXSxcbiAgW1widGltZXNcIiwgXCJcXHUwMEQ3XCJdLFxuICBbXCJPc2xhc2hcIiwgXCJcXHUwMEQ4XCJdLFxuICBbXCJVZ3JhdmVcIiwgXCJcXHUwMEQ5XCJdLFxuICBbXCJVYWN1dGVcIiwgXCJcXHUwMERBXCJdLFxuICBbXCJVY2lyY1wiLCBcIlxcdTAwREJcIl0sXG4gIFtcIlV1bWxcIiwgXCJcXHUwMERDXCJdLFxuICBbXCJZYWN1dGVcIiwgXCJcXHUwMEREXCJdLFxuICBbXCJUSE9STlwiLCBcIlxcdTAwREVcIl0sXG4gIFtcInN6bGlnXCIsIFwiXFx1MDBERlwiXSxcbiAgW1wiYWdyYXZlXCIsIFwiXFx1MDBFMFwiXSxcbiAgW1wiYWFjdXRlXCIsIFwiXFx1MDBFMVwiXSxcbiAgW1wiYWNpcmNcIiwgXCJcXHUwMEUyXCJdLFxuICBbXCJhdGlsZGVcIiwgXCJcXHUwMEUzXCJdLFxuICBbXCJhdW1sXCIsIFwiXFx1MDBFNFwiXSxcbiAgW1wiYXJpbmdcIiwgXCJcXHUwMEU1XCJdLFxuICBbXCJhZWxpZ1wiLCBcIlxcdTAwRTZcIl0sXG4gIFtcImNjZWRpbFwiLCBcIlxcdTAwRTdcIl0sXG4gIFtcImVncmF2ZVwiLCBcIlxcdTAwRThcIl0sXG4gIFtcImVhY3V0ZVwiLCBcIlxcdTAwRTlcIl0sXG4gIFtcImVjaXJjXCIsIFwiXFx1MDBFQVwiXSxcbiAgW1wiZXVtbFwiLCBcIlxcdTAwRUJcIl0sXG4gIFtcImlncmF2ZVwiLCBcIlxcdTAwRUNcIl0sXG4gIFtcImlhY3V0ZVwiLCBcIlxcdTAwRURcIl0sXG4gIFtcImljaXJjXCIsIFwiXFx1MDBFRVwiXSxcbiAgW1wiaXVtbFwiLCBcIlxcdTAwRUZcIl0sXG4gIFtcImV0aFwiLCBcIlxcdTAwRjBcIl0sXG4gIFtcIm50aWxkZVwiLCBcIlxcdTAwRjFcIl0sXG4gIFtcIm9ncmF2ZVwiLCBcIlxcdTAwRjJcIl0sXG4gIFtcIm9hY3V0ZVwiLCBcIlxcdTAwRjNcIl0sXG4gIFtcIm9jaXJjXCIsIFwiXFx1MDBGNFwiXSxcbiAgW1wib3RpbGRlXCIsIFwiXFx1MDBGNVwiXSxcbiAgW1wib3VtbFwiLCBcIlxcdTAwRjZcIl0sXG4gIFtcImRpdmlkZVwiLCBcIlxcdTAwRjdcIl0sXG4gIFtcIm9zbGFzaFwiLCBcIlxcdTAwRjhcIl0sXG4gIFtcInVncmF2ZVwiLCBcIlxcdTAwRjlcIl0sXG4gIFtcInVhY3V0ZVwiLCBcIlxcdTAwRkFcIl0sXG4gIFtcInVjaXJjXCIsIFwiXFx1MDBGQlwiXSxcbiAgW1widXVtbFwiLCBcIlxcdTAwRkNcIl0sXG4gIFtcInlhY3V0ZVwiLCBcIlxcdTAwRkRcIl0sXG4gIFtcInRob3JuXCIsIFwiXFx1MDBGRVwiXSxcbiAgW1wieXVtbFwiLCBcIlxcdTAwRkZcIl0sXG4gIFtcIk9FbGlnXCIsIFwiXFx1MDE1MlwiXSxcbiAgW1wib2VsaWdcIiwgXCJcXHUwMTUzXCJdLFxuICBbXCJTY2Fyb25cIiwgXCJcXHUwMTYwXCJdLFxuICBbXCJzY2Fyb25cIiwgXCJcXHUwMTYxXCJdLFxuICBbXCJZdW1sXCIsIFwiXFx1MDE3OFwiXSxcbiAgW1wiZm5vZlwiLCBcIlxcdTAxOTJcIl0sXG4gIFtcImNpcmNcIiwgXCJcXHUwMkM2XCJdLFxuICBbXCJ0aWxkZVwiLCBcIlxcdTAyRENcIl0sXG4gIFtcIkFscGhhXCIsIFwiXFx1MDM5MVwiXSxcbiAgW1wiQmV0YVwiLCBcIlxcdTAzOTJcIl0sXG4gIFtcIkdhbW1hXCIsIFwiXFx1MDM5M1wiXSxcbiAgW1wiRGVsdGFcIiwgXCJcXHUwMzk0XCJdLFxuICBbXCJFcHNpbG9uXCIsIFwiXFx1MDM5NVwiXSxcbiAgW1wiWmV0YVwiLCBcIlxcdTAzOTZcIl0sXG4gIFtcIkV0YVwiLCBcIlxcdTAzOTdcIl0sXG4gIFtcIlRoZXRhXCIsIFwiXFx1MDM5OFwiXSxcbiAgW1wiSW90YVwiLCBcIlxcdTAzOTlcIl0sXG4gIFtcIkthcHBhXCIsIFwiXFx1MDM5QVwiXSxcbiAgW1wiTGFtYmRhXCIsIFwiXFx1MDM5QlwiXSxcbiAgW1wiTXVcIiwgXCJcXHUwMzlDXCJdLFxuICBbXCJOdVwiLCBcIlxcdTAzOURcIl0sXG4gIFtcIlhpXCIsIFwiXFx1MDM5RVwiXSxcbiAgW1wiT21pY3JvblwiLCBcIlxcdTAzOUZcIl0sXG4gIFtcIlBpXCIsIFwiXFx1MDNBMFwiXSxcbiAgW1wiUmhvXCIsIFwiXFx1MDNBMVwiXSxcbiAgW1wiU2lnbWFcIiwgXCJcXHUwM0EzXCJdLFxuICBbXCJUYXVcIiwgXCJcXHUwM0E0XCJdLFxuICBbXCJVcHNpbG9uXCIsIFwiXFx1MDNBNVwiXSxcbiAgW1wiUGhpXCIsIFwiXFx1MDNBNlwiXSxcbiAgW1wiQ2hpXCIsIFwiXFx1MDNBN1wiXSxcbiAgW1wiUHNpXCIsIFwiXFx1MDNBOFwiXSxcbiAgW1wiT21lZ2FcIiwgXCJcXHUwM0E5XCJdLFxuICBbXCJhbHBoYVwiLCBcIlxcdTAzQjFcIl0sXG4gIFtcImJldGFcIiwgXCJcXHUwM0IyXCJdLFxuICBbXCJnYW1tYVwiLCBcIlxcdTAzQjNcIl0sXG4gIFtcImRlbHRhXCIsIFwiXFx1MDNCNFwiXSxcbiAgW1wiZXBzaWxvblwiLCBcIlxcdTAzQjVcIl0sXG4gIFtcInpldGFcIiwgXCJcXHUwM0I2XCJdLFxuICBbXCJldGFcIiwgXCJcXHUwM0I3XCJdLFxuICBbXCJ0aGV0YVwiLCBcIlxcdTAzQjhcIl0sXG4gIFtcImlvdGFcIiwgXCJcXHUwM0I5XCJdLFxuICBbXCJrYXBwYVwiLCBcIlxcdTAzQkFcIl0sXG4gIFtcImxhbWJkYVwiLCBcIlxcdTAzQkJcIl0sXG4gIFtcIm11XCIsIFwiXFx1MDNCQ1wiXSxcbiAgW1wibnVcIiwgXCJcXHUwM0JEXCJdLFxuICBbXCJ4aVwiLCBcIlxcdTAzQkVcIl0sXG4gIFtcIm9taWNyb25cIiwgXCJcXHUwM0JGXCJdLFxuICBbXCJwaVwiLCBcIlxcdTAzQzBcIl0sXG4gIFtcInJob1wiLCBcIlxcdTAzQzFcIl0sXG4gIFtcInNpZ21hZlwiLCBcIlxcdTAzQzJcIl0sXG4gIFtcInNpZ21hXCIsIFwiXFx1MDNDM1wiXSxcbiAgW1widGF1XCIsIFwiXFx1MDNDNFwiXSxcbiAgW1widXBzaWxvblwiLCBcIlxcdTAzQzVcIl0sXG4gIFtcInBoaVwiLCBcIlxcdTAzQzZcIl0sXG4gIFtcImNoaVwiLCBcIlxcdTAzQzdcIl0sXG4gIFtcInBzaVwiLCBcIlxcdTAzQzhcIl0sXG4gIFtcIm9tZWdhXCIsIFwiXFx1MDNDOVwiXSxcbiAgW1widGhldGFzeW1cIiwgXCJcXHUwM0QxXCJdLFxuICBbXCJ1cHNpaFwiLCBcIlxcdTAzRDJcIl0sXG4gIFtcInBpdlwiLCBcIlxcdTAzRDZcIl0sXG4gIFtcImVuc3BcIiwgXCJcXHUyMDAyXCJdLFxuICBbXCJlbXNwXCIsIFwiXFx1MjAwM1wiXSxcbiAgW1widGhpbnNwXCIsIFwiXFx1MjAwOVwiXSxcbiAgW1wiendualwiLCBcIlxcdTIwMENcIl0sXG4gIFtcInp3alwiLCBcIlxcdTIwMERcIl0sXG4gIFtcImxybVwiLCBcIlxcdTIwMEVcIl0sXG4gIFtcInJsbVwiLCBcIlxcdTIwMEZcIl0sXG4gIFtcIm5kYXNoXCIsIFwiXFx1MjAxM1wiXSxcbiAgW1wibWRhc2hcIiwgXCJcXHUyMDE0XCJdLFxuICBbXCJsc3F1b1wiLCBcIlxcdTIwMThcIl0sXG4gIFtcInJzcXVvXCIsIFwiXFx1MjAxOVwiXSxcbiAgW1wic2JxdW9cIiwgXCJcXHUyMDFBXCJdLFxuICBbXCJsZHF1b1wiLCBcIlxcdTIwMUNcIl0sXG4gIFtcInJkcXVvXCIsIFwiXFx1MjAxRFwiXSxcbiAgW1wiYmRxdW9cIiwgXCJcXHUyMDFFXCJdLFxuICBbXCJkYWdnZXJcIiwgXCJcXHUyMDIwXCJdLFxuICBbXCJEYWdnZXJcIiwgXCJcXHUyMDIxXCJdLFxuICBbXCJidWxsXCIsIFwiXFx1MjAyMlwiXSxcbiAgW1wiaGVsbGlwXCIsIFwiXFx1MjAyNlwiXSxcbiAgW1wicGVybWlsXCIsIFwiXFx1MjAzMFwiXSxcbiAgW1wicHJpbWVcIiwgXCJcXHUyMDMyXCJdLFxuICBbXCJQcmltZVwiLCBcIlxcdTIwMzNcIl0sXG4gIFtcImxzYXF1b1wiLCBcIlxcdTIwMzlcIl0sXG4gIFtcInJzYXF1b1wiLCBcIlxcdTIwM0FcIl0sXG4gIFtcIm9saW5lXCIsIFwiXFx1MjAzRVwiXSxcbiAgW1wiZnJhc2xcIiwgXCJcXHUyMDQ0XCJdLFxuICBbXCJldXJvXCIsIFwiXFx1MjBBQ1wiXSxcbiAgW1wiaW1hZ2VcIiwgXCJcXHUyMTExXCJdLFxuICBbXCJ3ZWllcnBcIiwgXCJcXHUyMTE4XCJdLFxuICBbXCJyZWFsXCIsIFwiXFx1MjExQ1wiXSxcbiAgW1widHJhZGVcIiwgXCJcXHUyMTIyXCJdLFxuICBbXCJhbGVmc3ltXCIsIFwiXFx1MjEzNVwiXSxcbiAgW1wibGFyclwiLCBcIlxcdTIxOTBcIl0sXG4gIFtcInVhcnJcIiwgXCJcXHUyMTkxXCJdLFxuICBbXCJyYXJyXCIsIFwiXFx1MjE5MlwiXSxcbiAgW1wiZGFyclwiLCBcIlxcdTIxOTNcIl0sXG4gIFtcImhhcnJcIiwgXCJcXHUyMTk0XCJdLFxuICBbXCJjcmFyclwiLCBcIlxcdTIxQjVcIl0sXG4gIFtcImxBcnJcIiwgXCJcXHUyMUQwXCJdLFxuICBbXCJ1QXJyXCIsIFwiXFx1MjFEMVwiXSxcbiAgW1wickFyclwiLCBcIlxcdTIxRDJcIl0sXG4gIFtcImRBcnJcIiwgXCJcXHUyMUQzXCJdLFxuICBbXCJoQXJyXCIsIFwiXFx1MjFENFwiXSxcbiAgW1wiZm9yYWxsXCIsIFwiXFx1MjIwMFwiXSxcbiAgW1wicGFydFwiLCBcIlxcdTIyMDJcIl0sXG4gIFtcImV4aXN0XCIsIFwiXFx1MjIwM1wiXSxcbiAgW1wiZW1wdHlcIiwgXCJcXHUyMjA1XCJdLFxuICBbXCJuYWJsYVwiLCBcIlxcdTIyMDdcIl0sXG4gIFtcImlzaW5cIiwgXCJcXHUyMjA4XCJdLFxuICBbXCJub3RpblwiLCBcIlxcdTIyMDlcIl0sXG4gIFtcIm5pXCIsIFwiXFx1MjIwQlwiXSxcbiAgW1wicHJvZFwiLCBcIlxcdTIyMEZcIl0sXG4gIFtcInN1bVwiLCBcIlxcdTIyMTFcIl0sXG4gIFtcIm1pbnVzXCIsIFwiXFx1MjIxMlwiXSxcbiAgW1wibG93YXN0XCIsIFwiXFx1MjIxN1wiXSxcbiAgW1wicmFkaWNcIiwgXCJcXHUyMjFBXCJdLFxuICBbXCJwcm9wXCIsIFwiXFx1MjIxRFwiXSxcbiAgW1wiaW5maW5cIiwgXCJcXHUyMjFFXCJdLFxuICBbXCJhbmdcIiwgXCJcXHUyMjIwXCJdLFxuICBbXCJhbmRcIiwgXCJcXHUyMjI3XCJdLFxuICBbXCJvclwiLCBcIlxcdTIyMjhcIl0sXG4gIFtcImNhcFwiLCBcIlxcdTIyMjlcIl0sXG4gIFtcImN1cFwiLCBcIlxcdTIyMkFcIl0sXG4gIFtcImludFwiLCBcIlxcdTIyMkJcIl0sXG4gIFtcInRoZXJlNFwiLCBcIlxcdTIyMzRcIl0sXG4gIFtcInNpbVwiLCBcIlxcdTIyM0NcIl0sXG4gIFtcImNvbmdcIiwgXCJcXHUyMjQ1XCJdLFxuICBbXCJhc3ltcFwiLCBcIlxcdTIyNDhcIl0sXG4gIFtcIm5lXCIsIFwiXFx1MjI2MFwiXSxcbiAgW1wiZXF1aXZcIiwgXCJcXHUyMjYxXCJdLFxuICBbXCJsZVwiLCBcIlxcdTIyNjRcIl0sXG4gIFtcImdlXCIsIFwiXFx1MjI2NVwiXSxcbiAgW1wic3ViXCIsIFwiXFx1MjI4MlwiXSxcbiAgW1wic3VwXCIsIFwiXFx1MjI4M1wiXSxcbiAgW1wibnN1YlwiLCBcIlxcdTIyODRcIl0sXG4gIFtcInN1YmVcIiwgXCJcXHUyMjg2XCJdLFxuICBbXCJzdXBlXCIsIFwiXFx1MjI4N1wiXSxcbiAgW1wib3BsdXNcIiwgXCJcXHUyMjk1XCJdLFxuICBbXCJvdGltZXNcIiwgXCJcXHUyMjk3XCJdLFxuICBbXCJwZXJwXCIsIFwiXFx1MjJBNVwiXSxcbiAgW1wic2RvdFwiLCBcIlxcdTIyQzVcIl0sXG4gIFtcImxjZWlsXCIsIFwiXFx1MjMwOFwiXSxcbiAgW1wicmNlaWxcIiwgXCJcXHUyMzA5XCJdLFxuICBbXCJsZmxvb3JcIiwgXCJcXHUyMzBBXCJdLFxuICBbXCJyZmxvb3JcIiwgXCJcXHUyMzBCXCJdLFxuICBbXCJsYW5nXCIsIFwiXFx1MjMyOVwiXSxcbiAgW1wicmFuZ1wiLCBcIlxcdTIzMkFcIl0sXG4gIFtcImxvelwiLCBcIlxcdTI1Q0FcIl0sXG4gIFtcInNwYWRlc1wiLCBcIlxcdTI2NjBcIl0sXG4gIFtcImNsdWJzXCIsIFwiXFx1MjY2M1wiXSxcbiAgW1wiaGVhcnRzXCIsIFwiXFx1MjY2NVwiXSxcbiAgW1wiZGlhbXNcIiwgXCJcXHUyNjY2XCJdLFxuXSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/jsx/xhtml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/types.js":
/*!***************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/plugins/types.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   typedParseConditional: () => (/* binding */ typedParseConditional),\n/* harmony export */   typedParseParenItem: () => (/* binding */ typedParseParenItem)\n/* harmony export */ });\n/* harmony import */ var _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tokenizer/index */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _traverser_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../traverser/base */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js\");\n/* harmony import */ var _traverser_expression__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../traverser/expression */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/expression.js\");\n/* harmony import */ var _flow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flow */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/flow.js\");\n/* harmony import */ var _typescript__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./typescript */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/typescript.js\");\n\n\n\n\n\n\n\n/**\n * Common parser code for TypeScript and Flow.\n */\n\n// An apparent conditional expression could actually be an optional parameter in an arrow function.\nfunction typedParseConditional(noIn) {\n  // If we see ?:, this can't possibly be a valid conditional. typedParseParenItem will be called\n  // later to finish off the arrow parameter. We also need to handle bare ? tokens for optional\n  // parameters without type annotations, i.e. ?, and ?) .\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.question)) {\n    const nextType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)();\n    if (nextType === _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.colon || nextType === _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.comma || nextType === _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenR) {\n      return;\n    }\n  }\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_3__.baseParseConditional)(noIn);\n}\n\n// Note: These \"type casts\" are *not* valid TS expressions.\n// But we parse them here and change them when completing the arrow function.\nfunction typedParseParenItem() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eatTypeToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.question);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.colon)) {\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_2__.isTypeScriptEnabled) {\n      (0,_typescript__WEBPACK_IMPORTED_MODULE_5__.tsParseTypeAnnotation)();\n    } else if (_traverser_base__WEBPACK_IMPORTED_MODULE_2__.isFlowEnabled) {\n      (0,_flow__WEBPACK_IMPORTED_MODULE_4__.flowParseTypeAnnotation)();\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9wYXJzZXIvcGx1Z2lucy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRTtBQUNuQjtBQUNrQjtBQUNSO0FBQ2Q7QUFDSTs7QUFFbkQ7QUFDQTtBQUNBOztBQUVBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxNQUFNLHVEQUFLLENBQUMsdURBQUU7QUFDZCxxQkFBcUIsK0RBQWE7QUFDbEMscUJBQXFCLHVEQUFFLHVCQUF1Qix1REFBRSx1QkFBdUIsdURBQUU7QUFDekU7QUFDQTtBQUNBO0FBQ0EsRUFBRSwyRUFBb0I7QUFDdEI7O0FBRUE7QUFDQTtBQUNPO0FBQ1AsRUFBRSw4REFBWSxDQUFDLHVEQUFFO0FBQ2pCLE1BQU0sdURBQUssQ0FBQyx1REFBRTtBQUNkLFFBQVEsZ0VBQW1CO0FBQzNCLE1BQU0sa0VBQXFCO0FBQzNCLE1BQU0sU0FBUywwREFBYTtBQUM1QixNQUFNLDhEQUF1QjtBQUM3QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1saWJyYXJ5LWRvY3MvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9wYXJzZXIvcGx1Z2lucy90eXBlcy5qcz8wMDE2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZWF0VHlwZVRva2VuLCBsb29rYWhlYWRUeXBlLCBtYXRjaH0gZnJvbSBcIi4uL3Rva2VuaXplci9pbmRleFwiO1xuaW1wb3J0IHtUb2tlblR5cGUgYXMgdHR9IGZyb20gXCIuLi90b2tlbml6ZXIvdHlwZXNcIjtcbmltcG9ydCB7aXNGbG93RW5hYmxlZCwgaXNUeXBlU2NyaXB0RW5hYmxlZH0gZnJvbSBcIi4uL3RyYXZlcnNlci9iYXNlXCI7XG5pbXBvcnQge2Jhc2VQYXJzZUNvbmRpdGlvbmFsfSBmcm9tIFwiLi4vdHJhdmVyc2VyL2V4cHJlc3Npb25cIjtcbmltcG9ydCB7Zmxvd1BhcnNlVHlwZUFubm90YXRpb259IGZyb20gXCIuL2Zsb3dcIjtcbmltcG9ydCB7dHNQYXJzZVR5cGVBbm5vdGF0aW9ufSBmcm9tIFwiLi90eXBlc2NyaXB0XCI7XG5cbi8qKlxuICogQ29tbW9uIHBhcnNlciBjb2RlIGZvciBUeXBlU2NyaXB0IGFuZCBGbG93LlxuICovXG5cbi8vIEFuIGFwcGFyZW50IGNvbmRpdGlvbmFsIGV4cHJlc3Npb24gY291bGQgYWN0dWFsbHkgYmUgYW4gb3B0aW9uYWwgcGFyYW1ldGVyIGluIGFuIGFycm93IGZ1bmN0aW9uLlxuZXhwb3J0IGZ1bmN0aW9uIHR5cGVkUGFyc2VDb25kaXRpb25hbChub0luKSB7XG4gIC8vIElmIHdlIHNlZSA/OiwgdGhpcyBjYW4ndCBwb3NzaWJseSBiZSBhIHZhbGlkIGNvbmRpdGlvbmFsLiB0eXBlZFBhcnNlUGFyZW5JdGVtIHdpbGwgYmUgY2FsbGVkXG4gIC8vIGxhdGVyIHRvIGZpbmlzaCBvZmYgdGhlIGFycm93IHBhcmFtZXRlci4gV2UgYWxzbyBuZWVkIHRvIGhhbmRsZSBiYXJlID8gdG9rZW5zIGZvciBvcHRpb25hbFxuICAvLyBwYXJhbWV0ZXJzIHdpdGhvdXQgdHlwZSBhbm5vdGF0aW9ucywgaS5lLiA/LCBhbmQgPykgLlxuICBpZiAobWF0Y2godHQucXVlc3Rpb24pKSB7XG4gICAgY29uc3QgbmV4dFR5cGUgPSBsb29rYWhlYWRUeXBlKCk7XG4gICAgaWYgKG5leHRUeXBlID09PSB0dC5jb2xvbiB8fCBuZXh0VHlwZSA9PT0gdHQuY29tbWEgfHwgbmV4dFR5cGUgPT09IHR0LnBhcmVuUikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBiYXNlUGFyc2VDb25kaXRpb25hbChub0luKTtcbn1cblxuLy8gTm90ZTogVGhlc2UgXCJ0eXBlIGNhc3RzXCIgYXJlICpub3QqIHZhbGlkIFRTIGV4cHJlc3Npb25zLlxuLy8gQnV0IHdlIHBhcnNlIHRoZW0gaGVyZSBhbmQgY2hhbmdlIHRoZW0gd2hlbiBjb21wbGV0aW5nIHRoZSBhcnJvdyBmdW5jdGlvbi5cbmV4cG9ydCBmdW5jdGlvbiB0eXBlZFBhcnNlUGFyZW5JdGVtKCkge1xuICBlYXRUeXBlVG9rZW4odHQucXVlc3Rpb24pO1xuICBpZiAobWF0Y2godHQuY29sb24pKSB7XG4gICAgaWYgKGlzVHlwZVNjcmlwdEVuYWJsZWQpIHtcbiAgICAgIHRzUGFyc2VUeXBlQW5ub3RhdGlvbigpO1xuICAgIH0gZWxzZSBpZiAoaXNGbG93RW5hYmxlZCkge1xuICAgICAgZmxvd1BhcnNlVHlwZUFubm90YXRpb24oKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/typescript.js":
/*!********************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/plugins/typescript.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tsAfterParseClassSuper: () => (/* binding */ tsAfterParseClassSuper),\n/* harmony export */   tsAfterParseVarHead: () => (/* binding */ tsAfterParseVarHead),\n/* harmony export */   tsIsDeclarationStart: () => (/* binding */ tsIsDeclarationStart),\n/* harmony export */   tsParseArrow: () => (/* binding */ tsParseArrow),\n/* harmony export */   tsParseAssignableListItemTypes: () => (/* binding */ tsParseAssignableListItemTypes),\n/* harmony export */   tsParseExportDeclaration: () => (/* binding */ tsParseExportDeclaration),\n/* harmony export */   tsParseExportSpecifier: () => (/* binding */ tsParseExportSpecifier),\n/* harmony export */   tsParseFunctionBodyAndFinish: () => (/* binding */ tsParseFunctionBodyAndFinish),\n/* harmony export */   tsParseIdentifierStatement: () => (/* binding */ tsParseIdentifierStatement),\n/* harmony export */   tsParseImportEqualsDeclaration: () => (/* binding */ tsParseImportEqualsDeclaration),\n/* harmony export */   tsParseImportSpecifier: () => (/* binding */ tsParseImportSpecifier),\n/* harmony export */   tsParseMaybeAssign: () => (/* binding */ tsParseMaybeAssign),\n/* harmony export */   tsParseMaybeAssignWithJSX: () => (/* binding */ tsParseMaybeAssignWithJSX),\n/* harmony export */   tsParseMaybeAssignWithoutJSX: () => (/* binding */ tsParseMaybeAssignWithoutJSX),\n/* harmony export */   tsParseMaybeDecoratorArguments: () => (/* binding */ tsParseMaybeDecoratorArguments),\n/* harmony export */   tsParseModifier: () => (/* binding */ tsParseModifier),\n/* harmony export */   tsParseModifiers: () => (/* binding */ tsParseModifiers),\n/* harmony export */   tsParseNonConditionalType: () => (/* binding */ tsParseNonConditionalType),\n/* harmony export */   tsParseSubscript: () => (/* binding */ tsParseSubscript),\n/* harmony export */   tsParseType: () => (/* binding */ tsParseType),\n/* harmony export */   tsParseTypeAnnotation: () => (/* binding */ tsParseTypeAnnotation),\n/* harmony export */   tsParseTypeAssertion: () => (/* binding */ tsParseTypeAssertion),\n/* harmony export */   tsStartParseAsyncArrowFromCallExpression: () => (/* binding */ tsStartParseAsyncArrowFromCallExpression),\n/* harmony export */   tsStartParseFunctionParams: () => (/* binding */ tsStartParseFunctionParams),\n/* harmony export */   tsStartParseObjPropValue: () => (/* binding */ tsStartParseObjPropValue),\n/* harmony export */   tsTryParseClassMemberWithIsStatic: () => (/* binding */ tsTryParseClassMemberWithIsStatic),\n/* harmony export */   tsTryParseExport: () => (/* binding */ tsTryParseExport),\n/* harmony export */   tsTryParseExportDefaultExpression: () => (/* binding */ tsTryParseExportDefaultExpression),\n/* harmony export */   tsTryParseJSXTypeArgument: () => (/* binding */ tsTryParseJSXTypeArgument),\n/* harmony export */   tsTryParseStatementContent: () => (/* binding */ tsTryParseStatementContent),\n/* harmony export */   tsTryParseTypeAnnotation: () => (/* binding */ tsTryParseTypeAnnotation),\n/* harmony export */   tsTryParseTypeParameters: () => (/* binding */ tsTryParseTypeParameters)\n/* harmony export */ });\n/* harmony import */ var _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tokenizer/index */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _traverser_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../traverser/base */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js\");\n/* harmony import */ var _traverser_expression__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../traverser/expression */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/expression.js\");\n/* harmony import */ var _traverser_lval__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../traverser/lval */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/lval.js\");\n/* harmony import */ var _traverser_statement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../traverser/statement */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/statement.js\");\n/* harmony import */ var _traverser_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../traverser/util */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/util.js\");\n/* harmony import */ var _jsx__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./jsx */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/jsx/index.js\");\n\n\n\n\n\n\n\n\n\n\nfunction tsIsIdentifier() {\n  // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n  // See https://github.com/Microsoft/TypeScript/issues/15008\n  return (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name);\n}\n\nfunction isLiteralPropertyName() {\n  return (\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) ||\n    Boolean(_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type & _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.IS_KEYWORD) ||\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string) ||\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.num) ||\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bigint) ||\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.decimal)\n  );\n}\n\nfunction tsNextTokenCanFollowModifier() {\n  // Note: TypeScript's implementation is much more complicated because\n  // more things are considered modifiers there.\n  // This implementation only handles modifiers not handled by babylon itself. And \"static\".\n  // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n  const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  const canFollowModifier =\n    ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL) ||\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL) ||\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.star) ||\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.ellipsis) ||\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.hash) ||\n      isLiteralPropertyName()) &&\n    !(0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.hasPrecedingLineBreak)();\n\n  if (canFollowModifier) {\n    return true;\n  } else {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n    return false;\n  }\n}\n\nfunction tsParseModifiers(allowedModifiers) {\n  while (true) {\n    const modifier = tsParseModifier(allowedModifiers);\n    if (modifier === null) {\n      break;\n    }\n  }\n}\n\n/** Parses a modifier matching one the given modifier names. */\nfunction tsParseModifier(\n  allowedModifiers,\n) {\n  if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n    return null;\n  }\n\n  const modifier = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.contextualKeyword;\n  if (allowedModifiers.indexOf(modifier) !== -1 && tsNextTokenCanFollowModifier()) {\n    switch (modifier) {\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._readonly:\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._readonly;\n        break;\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._abstract:\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._abstract;\n        break;\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._static:\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._static;\n        break;\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._public:\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._public;\n        break;\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._private:\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._private;\n        break;\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._protected:\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._protected;\n        break;\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._override:\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._override;\n        break;\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._declare:\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._declare;\n        break;\n      default:\n        break;\n    }\n    return modifier;\n  }\n  return null;\n}\n\nfunction tsParseEntityName() {\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  while ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dot)) {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  }\n}\n\nfunction tsParseTypeReference() {\n  tsParseEntityName();\n  if (!(0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.hasPrecedingLineBreak)() && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseThisTypePredicate() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  tsParseTypeAnnotation();\n}\n\nfunction tsParseThisTypeNode() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n}\n\nfunction tsParseTypeQuery() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._typeof);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._import)) {\n    tsParseImportType();\n  } else {\n    tsParseEntityName();\n  }\n  if (!(0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.hasPrecedingLineBreak)() && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseImportType() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._import);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dot)) {\n    tsParseEntityName();\n  }\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseTypeParameter() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._const);\n  const hadIn = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._in);\n  const hadOut = (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._out);\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._const);\n  if ((hadIn || hadOut) && !(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n    // The \"in\" or \"out\" keyword must have actually been the type parameter\n    // name, so set it as the name.\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name;\n  } else {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  }\n\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._extends)) {\n    tsParseType();\n  }\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n    tsParseType();\n  }\n}\n\nfunction tsTryParseTypeParameters() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    tsParseTypeParameters();\n  }\n}\n\nfunction tsParseTypeParameters() {\n  const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.typeParameterStart)) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  } else {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.unexpected)();\n  }\n\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    tsParseTypeParameter();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma);\n  }\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n}\n\n// Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n// but here it's always false, because this is only used for types.\nfunction tsFillSignature(returnToken) {\n  // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n  const returnTokenRequired = returnToken === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.arrow;\n  tsTryParseTypeParameters();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL);\n  // Create a scope even though we're doing type parsing so we don't accidentally\n  // treat params as top-level bindings.\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.scopeDepth++;\n  tsParseBindingListForSignature(false /* isBlockScope */);\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.scopeDepth--;\n  if (returnTokenRequired) {\n    tsParseTypeOrTypePredicateAnnotation(returnToken);\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(returnToken)) {\n    tsParseTypeOrTypePredicateAnnotation(returnToken);\n  }\n}\n\nfunction tsParseBindingListForSignature(isBlockScope) {\n  (0,_traverser_lval__WEBPACK_IMPORTED_MODULE_5__.parseBindingList)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR, isBlockScope);\n}\n\nfunction tsParseTypeMemberSemicolon() {\n  if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma)) {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.semicolon)();\n  }\n}\n\nfunction tsParseSignatureMember() {\n  tsFillSignature(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon);\n  tsParseTypeMemberSemicolon();\n}\n\nfunction tsIsUnambiguouslyIndexSignature() {\n  const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)(); // Skip '{'\n  const isIndexSignature = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon);\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n  return isIndexSignature;\n}\n\nfunction tsTryParseIndexSignature() {\n  if (!((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL) && tsIsUnambiguouslyIndexSignature())) {\n    return false;\n  }\n\n  const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL);\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  tsParseTypeAnnotation();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR);\n\n  tsTryParseTypeAnnotation();\n  tsParseTypeMemberSemicolon();\n\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n  return true;\n}\n\nfunction tsParsePropertyOrMethodSignature(isReadonly) {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question);\n\n  if (!isReadonly && ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan))) {\n    tsFillSignature(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon);\n    tsParseTypeMemberSemicolon();\n  } else {\n    tsTryParseTypeAnnotation();\n    tsParseTypeMemberSemicolon();\n  }\n}\n\nfunction tsParseTypeMember() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    // call signature\n    tsParseSignatureMember();\n    return;\n  }\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._new)) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n      // constructor signature\n      tsParseSignatureMember();\n    } else {\n      tsParsePropertyOrMethodSignature(false);\n    }\n    return;\n  }\n  const readonly = !!tsParseModifier([_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._readonly]);\n\n  const found = tsTryParseIndexSignature();\n  if (found) {\n    return;\n  }\n  if (\n    ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._get) || (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._set)) &&\n    tsNextTokenCanFollowModifier()\n  ) {\n    // This is a getter/setter on a type. The tsNextTokenCanFollowModifier\n    // function already called next() for us, so continue parsing the name.\n  }\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parsePropertyName)(-1 /* Types don't need context IDs. */);\n  tsParsePropertyOrMethodSignature(readonly);\n}\n\nfunction tsParseTypeLiteral() {\n  tsParseObjectTypeMembers();\n}\n\nfunction tsParseObjectTypeMembers() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL);\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    tsParseTypeMember();\n  }\n}\n\nfunction tsLookaheadIsStartOfMappedType() {\n  const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n  const isStartOfMappedType = tsIsStartOfMappedType();\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n  return isStartOfMappedType;\n}\n\nfunction tsIsStartOfMappedType() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.plus) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.minus)) {\n    return (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._readonly);\n  }\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._readonly)) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  }\n  if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL)) {\n    return false;\n  }\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  if (!tsIsIdentifier()) {\n    return false;\n  }\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  return (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._in);\n}\n\nfunction tsParseMappedTypeParameter() {\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._in);\n  tsParseType();\n}\n\nfunction tsParseMappedType() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.plus) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.minus)) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._readonly);\n  } else {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._readonly);\n  }\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL);\n  tsParseMappedTypeParameter();\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._as)) {\n    tsParseType();\n  }\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.plus) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.minus)) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question);\n  } else {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question);\n  }\n  tsTryParseType();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.semicolon)();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR);\n}\n\nfunction tsParseTupleType() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL);\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    // Do not validate presence of either none or only labeled elements\n    tsParseTupleElementType();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma);\n  }\n}\n\nfunction tsParseTupleElementType() {\n  // parses `...TsType[]`\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.ellipsis)) {\n    tsParseType();\n  } else {\n    // parses `TsType?`\n    tsParseType();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question);\n  }\n\n  // The type we parsed above was actually a label\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    // Labeled tuple types must affix the label with `...` or `?`, so no need to handle those here\n    tsParseType();\n  }\n}\n\nfunction tsParseParenthesizedType() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL);\n  tsParseType();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR);\n}\n\nfunction tsParseTemplateLiteralType() {\n  // Finish `, read quasi\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.nextTemplateToken)();\n  // Finish quasi, read ${\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.nextTemplateToken)();\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.backQuote) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dollarBraceL);\n    tsParseType();\n    // Finish }, read quasi\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.nextTemplateToken)();\n    // Finish quasi, read either ${ or `\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.nextTemplateToken)();\n  }\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n}\n\nvar FunctionType; (function (FunctionType) {\n  const TSFunctionType = 0; FunctionType[FunctionType[\"TSFunctionType\"] = TSFunctionType] = \"TSFunctionType\";\n  const TSConstructorType = TSFunctionType + 1; FunctionType[FunctionType[\"TSConstructorType\"] = TSConstructorType] = \"TSConstructorType\";\n  const TSAbstractConstructorType = TSConstructorType + 1; FunctionType[FunctionType[\"TSAbstractConstructorType\"] = TSAbstractConstructorType] = \"TSAbstractConstructorType\";\n})(FunctionType || (FunctionType = {}));\n\nfunction tsParseFunctionOrConstructorType(type) {\n  if (type === FunctionType.TSAbstractConstructorType) {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._abstract);\n  }\n  if (type === FunctionType.TSConstructorType || type === FunctionType.TSAbstractConstructorType) {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._new);\n  }\n  const oldInDisallowConditionalTypesContext = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext = false;\n  tsFillSignature(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.arrow);\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n}\n\nfunction tsParseNonArrayType() {\n  switch (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type) {\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name:\n      tsParseTypeReference();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._void:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._null:\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.num:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bigint:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.decimal:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._true:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._false:\n      (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseLiteral)();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.minus:\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n      (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseLiteral)();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._this: {\n      tsParseThisTypeNode();\n      if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._is) && !(0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.hasPrecedingLineBreak)()) {\n        tsParseThisTypePredicate();\n      }\n      return;\n    }\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._typeof:\n      tsParseTypeQuery();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._import:\n      tsParseImportType();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL:\n      if (tsLookaheadIsStartOfMappedType()) {\n        tsParseMappedType();\n      } else {\n        tsParseTypeLiteral();\n      }\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL:\n      tsParseTupleType();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL:\n      tsParseParenthesizedType();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.backQuote:\n      tsParseTemplateLiteralType();\n      return;\n    default:\n      if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type & _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.IS_KEYWORD) {\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name;\n        return;\n      }\n      break;\n  }\n\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.unexpected)();\n}\n\nfunction tsParseArrayTypeOrHigher() {\n  tsParseNonArrayType();\n  while (!(0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.hasPrecedingLineBreak)() && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL)) {\n    if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR)) {\n      // If we hit ] immediately, this is an array type, otherwise it's an indexed access type.\n      tsParseType();\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR);\n    }\n  }\n}\n\nfunction tsParseInferType() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._infer);\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._extends)) {\n    // Infer type constraints introduce an ambiguity about whether the \"extends\"\n    // is a constraint for this infer type or is another conditional type.\n    const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._extends);\n    const oldInDisallowConditionalTypesContext = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext;\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext = true;\n    tsParseType();\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error || (!_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question))) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n    }\n  }\n}\n\nfunction tsParseTypeOperatorOrHigher() {\n  if (\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._keyof) ||\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._unique) ||\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._readonly)\n  ) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    tsParseTypeOperatorOrHigher();\n  } else if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._infer)) {\n    tsParseInferType();\n  } else {\n    const oldInDisallowConditionalTypesContext = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext;\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext = false;\n    tsParseArrayTypeOrHigher();\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n  }\n}\n\nfunction tsParseIntersectionTypeOrHigher() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitwiseAND);\n  tsParseTypeOperatorOrHigher();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitwiseAND)) {\n    while ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitwiseAND)) {\n      tsParseTypeOperatorOrHigher();\n    }\n  }\n}\n\nfunction tsParseUnionTypeOrHigher() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitwiseOR);\n  tsParseIntersectionTypeOrHigher();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitwiseOR)) {\n    while ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitwiseOR)) {\n      tsParseIntersectionTypeOrHigher();\n    }\n  }\n}\n\nfunction tsIsStartOfFunctionType() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    return true;\n  }\n  return (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL) && tsLookaheadIsUnambiguouslyStartOfFunctionType();\n}\n\nfunction tsSkipParameterStart() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._this)) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    return true;\n  }\n  // If this is a possible array/object destructure, walk to the matching bracket/brace.\n  // The next token after will tell us definitively whether this is a function param.\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL)) {\n    let depth = 1;\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    while (depth > 0 && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n      if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL)) {\n        depth++;\n      } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR)) {\n        depth--;\n      }\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction tsLookaheadIsUnambiguouslyStartOfFunctionType() {\n  const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n  const isUnambiguouslyStartOfFunctionType = tsIsUnambiguouslyStartOfFunctionType();\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n  return isUnambiguouslyStartOfFunctionType;\n}\n\nfunction tsIsUnambiguouslyStartOfFunctionType() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.ellipsis)) {\n    // ( )\n    // ( ...\n    return true;\n  }\n  if (tsSkipParameterStart()) {\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n      // ( xxx :\n      // ( xxx ,\n      // ( xxx ?\n      // ( xxx =\n      return true;\n    }\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR)) {\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n      if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.arrow)) {\n        // ( xxx ) =>\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction tsParseTypeOrTypePredicateAnnotation(returnToken) {\n  const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(returnToken);\n  const finishedReturn = tsParseTypePredicateOrAssertsPrefix();\n  if (!finishedReturn) {\n    tsParseType();\n  }\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n}\n\nfunction tsTryParseTypeOrTypePredicateAnnotation() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    tsParseTypeOrTypePredicateAnnotation(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon);\n  }\n}\n\nfunction tsTryParseTypeAnnotation() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    tsParseTypeAnnotation();\n  }\n}\n\nfunction tsTryParseType() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    tsParseType();\n  }\n}\n\n/**\n * Detect a few special return syntax cases: `x is T`, `asserts x`, `asserts x is T`,\n * `asserts this is T`.\n *\n * Returns true if we parsed the return type, false if there's still a type to be parsed.\n */\nfunction tsParseTypePredicateOrAssertsPrefix() {\n  const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._asserts)) {\n    // Normally this is `asserts x is T`, but at this point, it might be `asserts is T` (a user-\n    // defined type guard on the `asserts` variable) or just a type called `asserts`.\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._is)) {\n      // If we see `asserts is`, then this must be of the form `asserts is T`, since\n      // `asserts is is T` isn't valid.\n      tsParseType();\n      return true;\n    } else if (tsIsIdentifier() || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._this)) {\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n      if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._is)) {\n        // If we see `is`, then this is `asserts x is T`. Otherwise, it's `asserts x`.\n        tsParseType();\n      }\n      return true;\n    } else {\n      // Regular type, so bail out and start type parsing from scratch.\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n      return false;\n    }\n  } else if (tsIsIdentifier() || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._this)) {\n    // This is a regular identifier, which may or may not have \"is\" after it.\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._is) && !(0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.hasPrecedingLineBreak)()) {\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n      tsParseType();\n      return true;\n    } else {\n      // Regular type, so bail out and start type parsing from scratch.\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n      return false;\n    }\n  }\n  return false;\n}\n\nfunction tsParseTypeAnnotation() {\n  const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon);\n  tsParseType();\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n}\n\nfunction tsParseType() {\n  tsParseNonConditionalType();\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext || (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.hasPrecedingLineBreak)() || !(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._extends)) {\n    return;\n  }\n  // extends type\n  const oldInDisallowConditionalTypesContext = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext = true;\n  tsParseNonConditionalType();\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question);\n  // true type\n  tsParseType();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon);\n  // false type\n  tsParseType();\n}\n\nfunction isAbstractConstructorSignature() {\n  return (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._abstract) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._new;\n}\n\nfunction tsParseNonConditionalType() {\n  if (tsIsStartOfFunctionType()) {\n    tsParseFunctionOrConstructorType(FunctionType.TSFunctionType);\n    return;\n  }\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._new)) {\n    // As in `new () => Date`\n    tsParseFunctionOrConstructorType(FunctionType.TSConstructorType);\n    return;\n  } else if (isAbstractConstructorSignature()) {\n    // As in `abstract new () => Date`\n    tsParseFunctionOrConstructorType(FunctionType.TSAbstractConstructorType);\n    return;\n  }\n  tsParseUnionTypeOrHigher();\n}\n\nfunction tsParseTypeAssertion() {\n  const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n  tsParseType();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan);\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseMaybeUnary)();\n}\n\nfunction tsTryParseJSXTypeArgument() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagStart)) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.typeParameterStart;\n    const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n    while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n      tsParseType();\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma);\n    }\n    // Process >, but the one after needs to be parsed JSX-style.\n    (0,_jsx__WEBPACK_IMPORTED_MODULE_8__.nextJSXTagToken)();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n  }\n}\n\nfunction tsParseHeritageClause() {\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    tsParseExpressionWithTypeArguments();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma);\n  }\n}\n\nfunction tsParseExpressionWithTypeArguments() {\n  // Note: TS uses parseLeftHandSideExpressionOrHigher,\n  // then has grammar errors later if it's not an EntityName.\n  tsParseEntityName();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseInterfaceDeclaration() {\n  (0,_traverser_lval__WEBPACK_IMPORTED_MODULE_5__.parseBindingIdentifier)(false);\n  tsTryParseTypeParameters();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._extends)) {\n    tsParseHeritageClause();\n  }\n  tsParseObjectTypeMembers();\n}\n\nfunction tsParseTypeAliasDeclaration() {\n  (0,_traverser_lval__WEBPACK_IMPORTED_MODULE_5__.parseBindingIdentifier)(false);\n  tsTryParseTypeParameters();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq);\n  tsParseType();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.semicolon)();\n}\n\nfunction tsParseEnumMember() {\n  // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)) {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseLiteral)();\n  } else {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  }\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n    const eqIndex = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1;\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseMaybeAssign)();\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[eqIndex].rhsEndIndex = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length;\n  }\n}\n\nfunction tsParseEnumDeclaration() {\n  (0,_traverser_lval__WEBPACK_IMPORTED_MODULE_5__.parseBindingIdentifier)(false);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL);\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    tsParseEnumMember();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma);\n  }\n}\n\nfunction tsParseModuleBlock() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL);\n  (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_6__.parseBlockBody)(/* end */ _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR);\n}\n\nfunction tsParseModuleOrNamespaceDeclaration() {\n  (0,_traverser_lval__WEBPACK_IMPORTED_MODULE_5__.parseBindingIdentifier)(false);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dot)) {\n    tsParseModuleOrNamespaceDeclaration();\n  } else {\n    tsParseModuleBlock();\n  }\n}\n\nfunction tsParseAmbientExternalModuleDeclaration() {\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._global)) {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)) {\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseExprAtom)();\n  } else {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.unexpected)();\n  }\n\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL)) {\n    tsParseModuleBlock();\n  } else {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.semicolon)();\n  }\n}\n\nfunction tsParseImportEqualsDeclaration() {\n  (0,_traverser_lval__WEBPACK_IMPORTED_MODULE_5__.parseImportedIdentifier)();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq);\n  tsParseModuleReference();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.semicolon)();\n}\n\nfunction tsIsExternalModuleReference() {\n  return (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._require) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL;\n}\n\nfunction tsParseModuleReference() {\n  if (tsIsExternalModuleReference()) {\n    tsParseExternalModuleReference();\n  } else {\n    tsParseEntityName();\n  }\n}\n\nfunction tsParseExternalModuleReference() {\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._require);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL);\n  if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)) {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.unexpected)();\n  }\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseLiteral)();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR);\n}\n\n// Utilities\n\n// Returns true if a statement matched.\nfunction tsTryParseDeclare() {\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isLineTerminator)()) {\n    return false;\n  }\n  switch (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type) {\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._function: {\n      const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n      // We don't need to precisely get the function start here, since it's only used to mark\n      // the function as a type if it's bodiless, and it's already a type here.\n      const functionStart = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.start;\n      (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_6__.parseFunction)(functionStart, /* isStatement */ true);\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n      return true;\n    }\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._class: {\n      const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n      (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_6__.parseClass)(/* isStatement */ true, /* optionalId */ false);\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n      return true;\n    }\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._const: {\n      if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._const) && (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isLookaheadContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._enum)) {\n        const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n        // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n        (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._const);\n        (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._enum);\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._enum;\n        tsParseEnumDeclaration();\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n        return true;\n      }\n    }\n    // falls through\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._var:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._let: {\n      const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n      (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_6__.parseVarStatement)(_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type !== _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._var);\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n      return true;\n    }\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name: {\n      const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n      const contextualKeyword = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.contextualKeyword;\n      let matched = false;\n      if (contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._global) {\n        tsParseAmbientExternalModuleDeclaration();\n        matched = true;\n      } else {\n        matched = tsParseDeclaration(contextualKeyword, /* isBeforeToken */ true);\n      }\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n      return matched;\n    }\n    default:\n      return false;\n  }\n}\n\n// Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n// Returns true if it matched a declaration.\nfunction tsTryParseExportDeclaration() {\n  return tsParseDeclaration(_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.contextualKeyword, /* isBeforeToken */ true);\n}\n\n// Returns true if it matched a statement.\nfunction tsParseExpressionStatement(contextualKeyword) {\n  switch (contextualKeyword) {\n    case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._declare: {\n      const declareTokenIndex = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1;\n      const matched = tsTryParseDeclare();\n      if (matched) {\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[declareTokenIndex].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._declare;\n        return true;\n      }\n      break;\n    }\n    case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._global:\n      // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n      // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n      if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL)) {\n        tsParseModuleBlock();\n        return true;\n      }\n      break;\n\n    default:\n      return tsParseDeclaration(contextualKeyword, /* isBeforeToken */ false);\n  }\n  return false;\n}\n\n/**\n * Common code for parsing a declaration.\n *\n * isBeforeToken indicates that the current parser state is at the contextual\n * keyword (and that it is not yet emitted) rather than reading the token after\n * it. When isBeforeToken is true, we may be preceded by an `export` token and\n * should include that token in a type context we create, e.g. to handle\n * `export interface` or `export type`. (This is a bit of a hack and should be\n * cleaned up at some point.)\n *\n * Returns true if it matched a declaration.\n */\nfunction tsParseDeclaration(contextualKeyword, isBeforeToken) {\n  switch (contextualKeyword) {\n    case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._abstract:\n      if (tsCheckLineTerminator(isBeforeToken) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._class)) {\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._abstract;\n        (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_6__.parseClass)(/* isStatement */ true, /* optionalId */ false);\n        return true;\n      }\n      break;\n\n    case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._enum:\n      if (tsCheckLineTerminator(isBeforeToken) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._enum;\n        tsParseEnumDeclaration();\n        return true;\n      }\n      break;\n\n    case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._interface:\n      if (tsCheckLineTerminator(isBeforeToken) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n        // `next` is true in \"export\" and \"declare\" contexts, so we want to remove that token\n        // as well.\n        const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(isBeforeToken ? 2 : 1);\n        tsParseInterfaceDeclaration();\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n        return true;\n      }\n      break;\n\n    case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._module:\n      if (tsCheckLineTerminator(isBeforeToken)) {\n        if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)) {\n          const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(isBeforeToken ? 2 : 1);\n          tsParseAmbientExternalModuleDeclaration();\n          (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n          return true;\n        } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n          const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(isBeforeToken ? 2 : 1);\n          tsParseModuleOrNamespaceDeclaration();\n          (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n          return true;\n        }\n      }\n      break;\n\n    case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._namespace:\n      if (tsCheckLineTerminator(isBeforeToken) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n        const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(isBeforeToken ? 2 : 1);\n        tsParseModuleOrNamespaceDeclaration();\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n        return true;\n      }\n      break;\n\n    case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type:\n      if (tsCheckLineTerminator(isBeforeToken) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n        const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(isBeforeToken ? 2 : 1);\n        tsParseTypeAliasDeclaration();\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n        return true;\n      }\n      break;\n\n    default:\n      break;\n  }\n  return false;\n}\n\nfunction tsCheckLineTerminator(isBeforeToken) {\n  if (isBeforeToken) {\n    // Babel checks hasFollowingLineBreak here and returns false, but this\n    // doesn't actually come up, e.g. `export interface` can never be on its own\n    // line in valid code.\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    return true;\n  } else {\n    return !(0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isLineTerminator)();\n  }\n}\n\n// Returns true if there was a generic async arrow function.\nfunction tsTryParseGenericAsyncArrowFunction() {\n  const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n\n  tsParseTypeParameters();\n  (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_6__.parseFunctionParams)();\n  tsTryParseTypeOrTypePredicateAnnotation();\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.arrow);\n\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n    return false;\n  }\n\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseFunctionBody)(true);\n  return true;\n}\n\n/**\n * If necessary, hack the tokenizer state so that this bitshift was actually a\n * less-than token, then keep parsing. This should only be used in situations\n * where we restore from snapshot on error (which reverts this change) or\n * where bitshift would be illegal anyway (e.g. in a class \"extends\" clause).\n *\n * This hack is useful to handle situations like foo<<T>() => void>() where\n * there can legitimately be two open-angle-brackets in a row in TS.\n */\nfunction tsParseTypeArgumentsWithPossibleBitshift() {\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitShiftL) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.pos -= 1;\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan);\n  }\n  tsParseTypeArguments();\n}\n\nfunction tsParseTypeArguments() {\n  const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan);\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan) && !_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    tsParseType();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma);\n  }\n  if (!oldIsType) {\n    // If the type arguments are present in an expression context, e.g.\n    // f<number>(), then the > sign should be tokenized as a non-type token.\n    // In particular, f(a < b, c >= d) should parse the >= as a single token,\n    // resulting in a syntax error and fallback to the non-type-args\n    // interpretation. In the success case, even though the > is tokenized as a\n    // non-type token, it still must be marked as a type token so that it is\n    // erased.\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.rescan_gt)();\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan);\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].isType = true;\n  } else {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan);\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n  }\n}\n\nfunction tsIsDeclarationStart() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n    switch (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.contextualKeyword) {\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._abstract:\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._declare:\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._enum:\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._interface:\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._module:\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._namespace:\n      case _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type:\n        return true;\n      default:\n        break;\n    }\n  }\n\n  return false;\n}\n\n// ======================================================\n// OVERRIDES\n// ======================================================\n\nfunction tsParseFunctionBodyAndFinish(functionStart, funcContextId) {\n  // For arrow functions, `parseArrow` handles the return type itself.\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    tsParseTypeOrTypePredicateAnnotation(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon);\n  }\n\n  // The original code checked the node type to make sure this function type allows a missing\n  // body, but we skip that to avoid sending around the node type. We instead just use the\n  // allowExpressionBody boolean to make sure it's not an arrow function.\n  if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL) && (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isLineTerminator)()) {\n    // Retroactively mark the function declaration as a type.\n    let i = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1;\n    while (\n      i >= 0 &&\n      (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[i].start >= functionStart ||\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[i].type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._default ||\n        _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[i].type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export)\n    ) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[i].isType = true;\n      i--;\n    }\n    return;\n  }\n\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseFunctionBody)(false, funcContextId);\n}\n\nfunction tsParseSubscript(\n  startTokenIndex,\n  noCalls,\n  stopState,\n) {\n  if (!(0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.hasPrecedingLineBreak)() && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bang)) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.nonNullAssertion;\n    return;\n  }\n\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitShiftL)) {\n    // There are number of things we are going to \"maybe\" parse, like type arguments on\n    // tagged template expressions. If any of them fail, walk it back and continue.\n    const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n\n    if (!noCalls && (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.atPossibleAsync)()) {\n      // Almost certainly this is a generic async function `async <T>() => ...\n      // But it might be a call with a type argument `async<T>();`\n      const asyncArrowFn = tsTryParseGenericAsyncArrowFunction();\n      if (asyncArrowFn) {\n        return;\n      }\n    }\n    tsParseTypeArgumentsWithPossibleBitshift();\n    if (!noCalls && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL)) {\n      // With f<T>(), the subscriptStartIndex marker is on the ( token.\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n      (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseCallExpressionArguments)();\n    } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.backQuote)) {\n      // Tagged template with a type argument.\n      (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseTemplate)();\n    } else if (\n      // The remaining possible case is an instantiation expression, e.g.\n      // Array<number> . Check for a few cases that would disqualify it and\n      // cause us to bail out.\n      // a<b>>c is not (a<b>)>c, but a<(b>>c)\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan ||\n      // a<b>c is (a<b)>c\n      (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type !== _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL &&\n        Boolean(_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type & _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.IS_EXPRESSION_START) &&\n        !(0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.hasPrecedingLineBreak)())\n    ) {\n      // Bail out. We have something like a<b>c, which is not an expression with\n      // type arguments but an (a < b) > c comparison.\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.unexpected)();\n    }\n\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n    } else {\n      return;\n    }\n  } else if (!noCalls && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.questionDot) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan) {\n    // If we see f?.<, then this must be an optional call with a type argument.\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[startTokenIndex].isOptionalChainStart = true;\n    // With f?.<T>(), the subscriptStartIndex marker is on the ?. token.\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n\n    tsParseTypeArguments();\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL);\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseCallExpressionArguments)();\n  }\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.baseParseSubscript)(startTokenIndex, noCalls, stopState);\n}\n\nfunction tsTryParseExport() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._import)) {\n    // One of these cases:\n    // export import A = B;\n    // export import type A = require(\"A\");\n    if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)() !== _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq) {\n      // Eat a `type` token, unless it's actually an identifier name.\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type);\n    }\n    tsParseImportEqualsDeclaration();\n    return true;\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n    // `export = x;`\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseExpression)();\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.semicolon)();\n    return true;\n  } else if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._as)) {\n    // `export as namespace A;`\n    // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._namespace);\n    (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.semicolon)();\n    return true;\n  } else {\n    if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type)) {\n      const nextType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)();\n      // export type {foo} from 'a';\n      // export type * from 'a';'\n      // export type * as ns from 'a';'\n      if (nextType === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL || nextType === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.star) {\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)();\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Parse a TS import specifier, which may be prefixed with \"type\" and may be of\n * the form `foo as bar`.\n *\n * The number of identifier-like tokens we see happens to be enough to uniquely\n * identify the form, so simply count the number of identifiers rather than\n * matching the words `type` or `as`. This is particularly important because\n * `type` and `as` could each actually be plain identifiers rather than\n * keywords.\n */\nfunction tsParseImportSpecifier() {\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n    // import {foo}\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ImportDeclaration;\n    return;\n  }\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n    // import {type foo}\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ImportDeclaration;\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 2].isType = true;\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].isType = true;\n    return;\n  }\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n    // import {foo as bar}\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 3].identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ImportAccess;\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ImportDeclaration;\n    return;\n  }\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  // import {type foo as bar}\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 3].identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ImportAccess;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ImportDeclaration;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 4].isType = true;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 3].isType = true;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 2].isType = true;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].isType = true;\n}\n\n/**\n * Just like named import specifiers, export specifiers can have from 1 to 4\n * tokens, inclusive, and the number of tokens determines the role of each token.\n */\nfunction tsParseExportSpecifier() {\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n    // export {foo}\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ExportAccess;\n    return;\n  }\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n    // export {type foo}\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ExportAccess;\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 2].isType = true;\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].isType = true;\n    return;\n  }\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n    // export {foo as bar}\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 3].identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ExportAccess;\n    return;\n  }\n  (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.parseIdentifier)();\n  // export {type foo as bar}\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 3].identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ExportAccess;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 4].isType = true;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 3].isType = true;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 2].isType = true;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].isType = true;\n}\n\nfunction tsTryParseExportDefaultExpression() {\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._abstract) && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._class) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._abstract;\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.next)(); // Skip \"abstract\"\n    (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_6__.parseClass)(true, true);\n    return true;\n  }\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._interface)) {\n    // Make sure \"export default\" are considered type tokens so the whole thing is removed.\n    const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(2);\n    tsParseDeclaration(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._interface, true);\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n    return true;\n  }\n  return false;\n}\n\nfunction tsTryParseStatementContent() {\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._const) {\n    const ahead = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadTypeAndKeyword)();\n    if (ahead.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name && ahead.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._enum) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._const);\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._enum);\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._enum;\n      tsParseEnumDeclaration();\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction tsTryParseClassMemberWithIsStatic(isStatic) {\n  const memberStartIndexAfterStatic = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length;\n  tsParseModifiers([\n    _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._abstract,\n    _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._readonly,\n    _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._declare,\n    _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._static,\n    _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._override,\n  ]);\n\n  const modifiersEndIndex = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length;\n  const found = tsTryParseIndexSignature();\n  if (found) {\n    // Index signatures are type declarations, so set the modifier tokens as\n    // type tokens. Most tokens could be assumed to be type tokens, but `static`\n    // is ambiguous unless we set it explicitly here.\n    const memberStartIndex = isStatic\n      ? memberStartIndexAfterStatic - 1\n      : memberStartIndexAfterStatic;\n    for (let i = memberStartIndex; i < modifiersEndIndex; i++) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[i].isType = true;\n    }\n    return true;\n  }\n  return false;\n}\n\n// Note: The reason we do this in `parseIdentifierStatement` and not `parseStatement`\n// is that e.g. `type()` is valid JS, so we must try parsing that first.\n// If it's really a type, we will parse `type` as the statement, and can correct it here\n// by parsing the rest.\nfunction tsParseIdentifierStatement(contextualKeyword) {\n  const matched = tsParseExpressionStatement(contextualKeyword);\n  if (!matched) {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.semicolon)();\n  }\n}\n\nfunction tsParseExportDeclaration() {\n  // \"export declare\" is equivalent to just \"export\".\n  const isDeclare = (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._declare);\n  if (isDeclare) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._declare;\n  }\n\n  let matchedDeclaration = false;\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n    if (isDeclare) {\n      const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(2);\n      matchedDeclaration = tsTryParseExportDeclaration();\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n    } else {\n      matchedDeclaration = tsTryParseExportDeclaration();\n    }\n  }\n  if (!matchedDeclaration) {\n    if (isDeclare) {\n      const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(2);\n      (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_6__.parseStatement)(true);\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n    } else {\n      (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_6__.parseStatement)(true);\n    }\n  }\n}\n\nfunction tsAfterParseClassSuper(hasSuper) {\n  if (hasSuper && ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitShiftL))) {\n    tsParseTypeArgumentsWithPossibleBitshift();\n  }\n  if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._implements)) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._implements;\n    const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(1);\n    tsParseHeritageClause();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n  }\n}\n\nfunction tsStartParseObjPropValue() {\n  tsTryParseTypeParameters();\n}\n\nfunction tsStartParseFunctionParams() {\n  tsTryParseTypeParameters();\n}\n\n// `let x: number;`\nfunction tsAfterParseVarHead() {\n  const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n  if (!(0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.hasPrecedingLineBreak)()) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bang);\n  }\n  tsTryParseTypeAnnotation();\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n}\n\n// parse the return type of an async arrow function - let foo = (async (): number => {});\nfunction tsStartParseAsyncArrowFromCallExpression() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    tsParseTypeAnnotation();\n  }\n}\n\n// Returns true if the expression was an arrow function.\nfunction tsParseMaybeAssign(noIn, isWithinParens) {\n  // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.isJSXEnabled) {\n    return tsParseMaybeAssignWithJSX(noIn, isWithinParens);\n  } else {\n    return tsParseMaybeAssignWithoutJSX(noIn, isWithinParens);\n  }\n}\n\nfunction tsParseMaybeAssignWithJSX(noIn, isWithinParens) {\n  if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    return (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.baseParseMaybeAssign)(noIn, isWithinParens);\n  }\n\n  // Prefer to parse JSX if possible. But may be an arrow fn.\n  const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n  let wasArrow = (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.baseParseMaybeAssign)(noIn, isWithinParens);\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n  } else {\n    return wasArrow;\n  }\n\n  // Otherwise, try as type-parameterized arrow function.\n  _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.typeParameterStart;\n  // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n  tsParseTypeParameters();\n  wasArrow = (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.baseParseMaybeAssign)(noIn, isWithinParens);\n  if (!wasArrow) {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.unexpected)();\n  }\n\n  return wasArrow;\n}\n\nfunction tsParseMaybeAssignWithoutJSX(noIn, isWithinParens) {\n  if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan)) {\n    return (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.baseParseMaybeAssign)(noIn, isWithinParens);\n  }\n\n  const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n  // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n  tsParseTypeParameters();\n  const wasArrow = (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.baseParseMaybeAssign)(noIn, isWithinParens);\n  if (!wasArrow) {\n    (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.unexpected)();\n  }\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n  } else {\n    return wasArrow;\n  }\n\n  // Try parsing a type cast instead of an arrow function.\n  // This will start with a type assertion (via parseMaybeUnary).\n  // But don't directly call `tsParseTypeAssertion` because we want to handle any binary after it.\n  return (0,_traverser_expression__WEBPACK_IMPORTED_MODULE_4__.baseParseMaybeAssign)(noIn, isWithinParens);\n}\n\nfunction tsParseArrow() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon)) {\n    // This is different from how the TS parser does it.\n    // TS uses lookahead. Babylon parses it as a parenthesized expression and converts.\n    const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.snapshot();\n\n    tsParseTypeOrTypePredicateAnnotation(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.colon);\n    if ((0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.canInsertSemicolon)()) (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.unexpected)();\n    if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.arrow)) (0,_traverser_util__WEBPACK_IMPORTED_MODULE_7__.unexpected)();\n\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_3__.state.restoreFromSnapshot(snapshot);\n    }\n  }\n  return (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.arrow);\n}\n\n// Allow type annotations inside of a parameter list.\nfunction tsParseAssignableListItemTypes() {\n  const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.pushTypeContext)(0);\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.question);\n  tsTryParseTypeAnnotation();\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.popTypeContext)(oldIsType);\n}\n\nfunction tsParseMaybeDecoratorArguments() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.lessThan) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bitShiftL)) {\n    tsParseTypeArgumentsWithPossibleBitshift();\n  }\n  (0,_traverser_statement__WEBPACK_IMPORTED_MODULE_6__.baseParseMaybeDecoratorArguments)();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/typescript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/tokenizer/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IdentifierRole: () => (/* binding */ IdentifierRole),\n/* harmony export */   JSXRole: () => (/* binding */ JSXRole),\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   TypeAndKeyword: () => (/* binding */ TypeAndKeyword),\n/* harmony export */   eat: () => (/* binding */ eat),\n/* harmony export */   eatTypeToken: () => (/* binding */ eatTypeToken),\n/* harmony export */   finishToken: () => (/* binding */ finishToken),\n/* harmony export */   getTokenFromCode: () => (/* binding */ getTokenFromCode),\n/* harmony export */   isBlockScopedDeclaration: () => (/* binding */ isBlockScopedDeclaration),\n/* harmony export */   isDeclaration: () => (/* binding */ isDeclaration),\n/* harmony export */   isFunctionScopedDeclaration: () => (/* binding */ isFunctionScopedDeclaration),\n/* harmony export */   isNonTopLevelDeclaration: () => (/* binding */ isNonTopLevelDeclaration),\n/* harmony export */   isObjectShorthandDeclaration: () => (/* binding */ isObjectShorthandDeclaration),\n/* harmony export */   isTopLevelDeclaration: () => (/* binding */ isTopLevelDeclaration),\n/* harmony export */   lookaheadCharCode: () => (/* binding */ lookaheadCharCode),\n/* harmony export */   lookaheadType: () => (/* binding */ lookaheadType),\n/* harmony export */   lookaheadTypeAndKeyword: () => (/* binding */ lookaheadTypeAndKeyword),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   next: () => (/* binding */ next),\n/* harmony export */   nextTemplateToken: () => (/* binding */ nextTemplateToken),\n/* harmony export */   nextToken: () => (/* binding */ nextToken),\n/* harmony export */   nextTokenStart: () => (/* binding */ nextTokenStart),\n/* harmony export */   nextTokenStartSince: () => (/* binding */ nextTokenStartSince),\n/* harmony export */   popTypeContext: () => (/* binding */ popTypeContext),\n/* harmony export */   pushTypeContext: () => (/* binding */ pushTypeContext),\n/* harmony export */   rescan_gt: () => (/* binding */ rescan_gt),\n/* harmony export */   retokenizeSlashAsRegex: () => (/* binding */ retokenizeSlashAsRegex),\n/* harmony export */   skipLineComment: () => (/* binding */ skipLineComment),\n/* harmony export */   skipSpace: () => (/* binding */ skipSpace),\n/* harmony export */   skipWord: () => (/* binding */ skipWord)\n/* harmony export */ });\n/* harmony import */ var _traverser_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../traverser/base */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js\");\n/* harmony import */ var _traverser_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../traverser/util */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/util.js\");\n/* harmony import */ var _util_charcodes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/charcodes */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js\");\n/* harmony import */ var _util_identifier__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/identifier */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/identifier.js\");\n/* harmony import */ var _util_whitespace__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/whitespace */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/whitespace.js\");\n/* harmony import */ var _keywords__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _readWord__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./readWord */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/readWord.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* eslint max-len: 0 */\n\n\n\n\n\n\n\n\n\n\nvar IdentifierRole; (function (IdentifierRole) {\n  const Access = 0; IdentifierRole[IdentifierRole[\"Access\"] = Access] = \"Access\";\n  const ExportAccess = Access + 1; IdentifierRole[IdentifierRole[\"ExportAccess\"] = ExportAccess] = \"ExportAccess\";\n  const TopLevelDeclaration = ExportAccess + 1; IdentifierRole[IdentifierRole[\"TopLevelDeclaration\"] = TopLevelDeclaration] = \"TopLevelDeclaration\";\n  const FunctionScopedDeclaration = TopLevelDeclaration + 1; IdentifierRole[IdentifierRole[\"FunctionScopedDeclaration\"] = FunctionScopedDeclaration] = \"FunctionScopedDeclaration\";\n  const BlockScopedDeclaration = FunctionScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"BlockScopedDeclaration\"] = BlockScopedDeclaration] = \"BlockScopedDeclaration\";\n  const ObjectShorthandTopLevelDeclaration = BlockScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthandTopLevelDeclaration\"] = ObjectShorthandTopLevelDeclaration] = \"ObjectShorthandTopLevelDeclaration\";\n  const ObjectShorthandFunctionScopedDeclaration = ObjectShorthandTopLevelDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthandFunctionScopedDeclaration\"] = ObjectShorthandFunctionScopedDeclaration] = \"ObjectShorthandFunctionScopedDeclaration\";\n  const ObjectShorthandBlockScopedDeclaration = ObjectShorthandFunctionScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthandBlockScopedDeclaration\"] = ObjectShorthandBlockScopedDeclaration] = \"ObjectShorthandBlockScopedDeclaration\";\n  const ObjectShorthand = ObjectShorthandBlockScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthand\"] = ObjectShorthand] = \"ObjectShorthand\";\n  // Any identifier bound in an import statement, e.g. both A and b from\n  // `import A, * as b from 'A';`\n  const ImportDeclaration = ObjectShorthand + 1; IdentifierRole[IdentifierRole[\"ImportDeclaration\"] = ImportDeclaration] = \"ImportDeclaration\";\n  const ObjectKey = ImportDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectKey\"] = ObjectKey] = \"ObjectKey\";\n  // The `foo` in `import {foo as bar} from \"./abc\";`.\n  const ImportAccess = ObjectKey + 1; IdentifierRole[IdentifierRole[\"ImportAccess\"] = ImportAccess] = \"ImportAccess\";\n})(IdentifierRole || (IdentifierRole = {}));\n\n/**\n * Extra information on jsxTagStart tokens, used to determine which of the three\n * jsx functions are called in the automatic transform.\n */\nvar JSXRole; (function (JSXRole) {\n  // The element is self-closing or has a body that resolves to empty. We\n  // shouldn't emit children at all in this case.\n  const NoChildren = 0; JSXRole[JSXRole[\"NoChildren\"] = NoChildren] = \"NoChildren\";\n  // The element has a single explicit child, which might still be an arbitrary\n  // expression like an array. We should emit that expression as the children.\n  const OneChild = NoChildren + 1; JSXRole[JSXRole[\"OneChild\"] = OneChild] = \"OneChild\";\n  // The element has at least two explicitly-specified children or has spread\n  // children, so child positions are assumed to be \"static\". We should wrap\n  // these children in an array.\n  const StaticChildren = OneChild + 1; JSXRole[JSXRole[\"StaticChildren\"] = StaticChildren] = \"StaticChildren\";\n  // The element has a prop named \"key\" after a prop spread, so we should fall\n  // back to the createElement function.\n  const KeyAfterPropSpread = StaticChildren + 1; JSXRole[JSXRole[\"KeyAfterPropSpread\"] = KeyAfterPropSpread] = \"KeyAfterPropSpread\";\n})(JSXRole || (JSXRole = {}));\n\nfunction isDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.TopLevelDeclaration ||\n    role === IdentifierRole.FunctionScopedDeclaration ||\n    role === IdentifierRole.BlockScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration\n  );\n}\n\nfunction isNonTopLevelDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.FunctionScopedDeclaration ||\n    role === IdentifierRole.BlockScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration\n  );\n}\n\nfunction isTopLevelDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.TopLevelDeclaration ||\n    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    role === IdentifierRole.ImportDeclaration\n  );\n}\n\nfunction isBlockScopedDeclaration(token) {\n  const role = token.identifierRole;\n  // Treat top-level declarations as block scope since the distinction doesn't matter here.\n  return (\n    role === IdentifierRole.TopLevelDeclaration ||\n    role === IdentifierRole.BlockScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration\n  );\n}\n\nfunction isFunctionScopedDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.FunctionScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration\n  );\n}\n\nfunction isObjectShorthandDeclaration(token) {\n  return (\n    token.identifierRole === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    token.identifierRole === IdentifierRole.ObjectShorthandBlockScopedDeclaration ||\n    token.identifierRole === IdentifierRole.ObjectShorthandFunctionScopedDeclaration\n  );\n}\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\nclass Token {\n  constructor() {\n    this.type = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.type;\n    this.contextualKeyword = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.contextualKeyword;\n    this.start = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.start;\n    this.end = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.end;\n    this.scopeDepth = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.scopeDepth;\n    this.isType = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.isType;\n    this.identifierRole = null;\n    this.jsxRole = null;\n    this.shadowsGlobal = false;\n    this.isAsyncOperation = false;\n    this.contextId = null;\n    this.rhsEndIndex = null;\n    this.isExpression = false;\n    this.numNullishCoalesceStarts = 0;\n    this.numNullishCoalesceEnds = 0;\n    this.isOptionalChainStart = false;\n    this.isOptionalChainEnd = false;\n    this.subscriptStartIndex = null;\n    this.nullishStartIndex = null;\n  }\n\n  \n  \n  \n  \n  \n  \n  \n  \n  // Initially false for all tokens, then may be computed in a follow-up step that does scope\n  // analysis.\n  \n  // Initially false for all tokens, but may be set during transform to mark it as containing an\n  // await operation.\n  \n  \n  // For assignments, the index of the RHS. For export tokens, the end of the export.\n  \n  // For class tokens, records if the class is a class expression or a class statement.\n  \n  // Number of times to insert a `nullishCoalesce(` snippet before this token.\n  \n  // Number of times to insert a `)` snippet after this token.\n  \n  // If true, insert an `optionalChain([` snippet before this token.\n  \n  // If true, insert a `])` snippet after this token.\n  \n  // Tag for `.`, `?.`, `[`, `?.[`, `(`, and `?.(` to denote the \"root\" token for this\n  // subscript chain. This can be used to determine if this chain is an optional chain.\n  \n  // Tag for `??` operators to denote the root token for this nullish coalescing call.\n  \n}\n\n// ## Tokenizer\n\n// Move to the next token\nfunction next() {\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.tokens.push(new Token());\n  nextToken();\n}\n\n// Call instead of next when inside a template, since that needs to be handled differently.\nfunction nextTemplateToken() {\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.tokens.push(new Token());\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.start = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n  readTmplToken();\n}\n\n// The tokenizer never parses regexes by default. Instead, the parser is responsible for\n// instructing it to parse a regex when we see a slash at the start of an expression.\nfunction retokenizeSlashAsRegex() {\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.type === _types__WEBPACK_IMPORTED_MODULE_7__.TokenType.assign) {\n    --_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n  }\n  readRegexp();\n}\n\nfunction pushTypeContext(existingTokensInType) {\n  for (let i = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.tokens.length - existingTokensInType; i < _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.tokens.length; i++) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.tokens[i].isType = true;\n  }\n  const oldIsType = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.isType;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.isType = true;\n  return oldIsType;\n}\n\nfunction popTypeContext(oldIsType) {\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.isType = oldIsType;\n}\n\nfunction eat(type) {\n  if (match(type)) {\n    next();\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction eatTypeToken(tokenType) {\n  const oldIsType = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.isType;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.isType = true;\n  eat(tokenType);\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.isType = oldIsType;\n}\n\nfunction match(type) {\n  return _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.type === type;\n}\n\nfunction lookaheadType() {\n  const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.snapshot();\n  next();\n  const type = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.type;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.restoreFromSnapshot(snapshot);\n  return type;\n}\n\nclass TypeAndKeyword {\n  \n  \n  constructor(type, contextualKeyword) {\n    this.type = type;\n    this.contextualKeyword = contextualKeyword;\n  }\n}\n\nfunction lookaheadTypeAndKeyword() {\n  const snapshot = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.snapshot();\n  next();\n  const type = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.type;\n  const contextualKeyword = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.contextualKeyword;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.restoreFromSnapshot(snapshot);\n  return new TypeAndKeyword(type, contextualKeyword);\n}\n\nfunction nextTokenStart() {\n  return nextTokenStartSince(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n}\n\nfunction nextTokenStartSince(pos) {\n  _util_whitespace__WEBPACK_IMPORTED_MODULE_4__.skipWhiteSpace.lastIndex = pos;\n  const skip = _util_whitespace__WEBPACK_IMPORTED_MODULE_4__.skipWhiteSpace.exec(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.input);\n  return pos + skip[0].length;\n}\n\nfunction lookaheadCharCode() {\n  return _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(nextTokenStart());\n}\n\n// Read a single token, updating the parser object's token-related\n// properties.\nfunction nextToken() {\n  skipSpace();\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.start = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos >= _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length) {\n    const tokens = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.tokens;\n    // We normally run past the end a bit, but if we're way past the end, avoid an infinite loop.\n    // Also check the token positions rather than the types since sometimes we rewrite the token\n    // type to something else.\n    if (\n      tokens.length >= 2 &&\n      tokens[tokens.length - 1].start >= _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length &&\n      tokens[tokens.length - 2].start >= _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length\n    ) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_1__.unexpected)(\"Unexpectedly reached the end of input.\");\n    }\n    finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.eof);\n    return;\n  }\n  readToken(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos));\n}\n\nfunction readToken(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (\n    _util_identifier__WEBPACK_IMPORTED_MODULE_3__.IS_IDENTIFIER_START[code] ||\n    code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.backslash ||\n    (code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.atSign && _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1) === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.atSign)\n  ) {\n    (0,_readWord__WEBPACK_IMPORTED_MODULE_6__[\"default\"])();\n  } else {\n    getTokenFromCode(code);\n  }\n}\n\nfunction skipBlockComment() {\n  while (\n    _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos) !== _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.asterisk ||\n    _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1) !== _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.slash\n  ) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos++;\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos > _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_1__.unexpected)(\"Unterminated comment\", _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos - 2);\n      return;\n    }\n  }\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos += 2;\n}\n\nfunction skipLineComment(startSkip) {\n  let ch = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt((_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos += startSkip));\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos < _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length) {\n    while (\n      ch !== _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lineFeed &&\n      ch !== _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.carriageReturn &&\n      ch !== _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lineSeparator &&\n      ch !== _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.paragraphSeparator &&\n      ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos < _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length\n    ) {\n      ch = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n    }\n  }\n}\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments.\nfunction skipSpace() {\n  while (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos < _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length) {\n    const ch = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n    switch (ch) {\n      case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.carriageReturn:\n        if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1) === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lineFeed) {\n          ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n        }\n\n      case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lineFeed:\n      case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lineSeparator:\n      case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.paragraphSeparator:\n        ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n        break;\n\n      case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.slash:\n        switch (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1)) {\n          case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.asterisk:\n            _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos += 2;\n            skipBlockComment();\n            break;\n\n          case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.slash:\n            skipLineComment(2);\n            break;\n\n          default:\n            return;\n        }\n        break;\n\n      default:\n        if (_util_whitespace__WEBPACK_IMPORTED_MODULE_4__.IS_WHITESPACE[ch]) {\n          ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n        } else {\n          return;\n        }\n    }\n  }\n}\n\n// Called at the end of every token. Sets various fields, and skips the space after the token, so\n// that the next one's `start` will point at the right position.\nfunction finishToken(\n  type,\n  contextualKeyword = _keywords__WEBPACK_IMPORTED_MODULE_5__.ContextualKeyword.NONE,\n) {\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.end = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.type = type;\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.contextualKeyword = contextualKeyword;\n}\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\nfunction readToken_dot() {\n  const nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1);\n  if (nextChar >= _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit0 && nextChar <= _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit9) {\n    readNumber(true);\n    return;\n  }\n\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.dot && _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 2) === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.dot) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos += 3;\n    finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.ellipsis);\n  } else {\n    ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n    finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.dot);\n  }\n}\n\nfunction readToken_slash() {\n  const nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1);\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo) {\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.assign, 2);\n  } else {\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.slash, 1);\n  }\n}\n\nfunction readToken_mult_modulo(code) {\n  // '%*'\n  let tokenType = code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.asterisk ? _types__WEBPACK_IMPORTED_MODULE_7__.TokenType.star : _types__WEBPACK_IMPORTED_MODULE_7__.TokenType.modulo;\n  let width = 1;\n  let nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1);\n\n  // Exponentiation operator **\n  if (code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.asterisk && nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.asterisk) {\n    width++;\n    nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 2);\n    tokenType = _types__WEBPACK_IMPORTED_MODULE_7__.TokenType.exponent;\n  }\n\n  // Match *= or %=, disallowing *=> which can be valid in flow.\n  if (\n    nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo &&\n    _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 2) !== _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.greaterThan\n  ) {\n    width++;\n    tokenType = _types__WEBPACK_IMPORTED_MODULE_7__.TokenType.assign;\n  }\n\n  finishOp(tokenType, width);\n}\n\nfunction readToken_pipe_amp(code) {\n  // '|&'\n  const nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1);\n\n  if (nextChar === code) {\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 2) === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo) {\n      // ||= or &&=\n      finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.assign, 3);\n    } else {\n      // || or &&\n      finishOp(code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.verticalBar ? _types__WEBPACK_IMPORTED_MODULE_7__.TokenType.logicalOR : _types__WEBPACK_IMPORTED_MODULE_7__.TokenType.logicalAND, 2);\n    }\n    return;\n  }\n\n  if (code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.verticalBar) {\n    // '|>'\n    if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.greaterThan) {\n      finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.pipeline, 2);\n      return;\n    } else if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.rightCurlyBrace && _traverser_base__WEBPACK_IMPORTED_MODULE_0__.isFlowEnabled) {\n      // '|}'\n      finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.braceBarR, 2);\n      return;\n    }\n  }\n\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo) {\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.assign, 2);\n    return;\n  }\n\n  finishOp(code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.verticalBar ? _types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bitwiseOR : _types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bitwiseAND, 1);\n}\n\nfunction readToken_caret() {\n  // '^'\n  const nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1);\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo) {\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.assign, 2);\n  } else {\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bitwiseXOR, 1);\n  }\n}\n\nfunction readToken_plus_min(code) {\n  // '+-'\n  const nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1);\n\n  if (nextChar === code) {\n    // Tentatively call this a prefix operator, but it might be changed to postfix later.\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.preIncDec, 2);\n    return;\n  }\n\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo) {\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.assign, 2);\n  } else if (code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.plusSign) {\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.plus, 1);\n  } else {\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.minus, 1);\n  }\n}\n\nfunction readToken_lt() {\n  const nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1);\n\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lessThan) {\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 2) === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo) {\n      finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.assign, 3);\n      return;\n    }\n    // We see <<, but need to be really careful about whether to treat it as a\n    // true left-shift or as two < tokens.\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.isType) {\n      // Within a type, << might come up in a snippet like `Array<<T>() => void>`,\n      // so treat it as two < tokens. Importantly, this should only override <<\n      // rather than other tokens like <= . If we treated <= as < in a type\n      // context, then the snippet `a as T <= 1` would incorrectly start parsing\n      // a type argument on T. We don't need to worry about `a as T << 1`\n      // because TypeScript disallows that syntax.\n      finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.lessThan, 1);\n    } else {\n      // Outside a type, this might be a true left-shift operator, or it might\n      // still be two open-type-arg tokens, such as in `f<<T>() => void>()`. We\n      // look at the token while considering the `f`, so we don't yet know that\n      // we're in a type context. In this case, we initially tokenize as a\n      // left-shift and correct after-the-fact as necessary in\n      // tsParseTypeArgumentsWithPossibleBitshift .\n      finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bitShiftL, 2);\n    }\n    return;\n  }\n\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo) {\n    // <=\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.relationalOrEqual, 2);\n  } else {\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.lessThan, 1);\n  }\n}\n\nfunction readToken_gt() {\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.isType) {\n    // Avoid right-shift for things like `Array<Array<string>>` and\n    // greater-than-or-equal for things like `const a: Array<number>=[];`.\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.greaterThan, 1);\n    return;\n  }\n\n  const nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1);\n\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.greaterThan) {\n    const size = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 2) === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.greaterThan ? 3 : 2;\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + size) === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo) {\n      finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.assign, size + 1);\n      return;\n    }\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bitShiftR, size);\n    return;\n  }\n\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo) {\n    // >=\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.relationalOrEqual, 2);\n  } else {\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.greaterThan, 1);\n  }\n}\n\n/**\n * Reinterpret a possible > token when transitioning from a type to a non-type\n * context.\n *\n * This comes up in two situations where >= needs to be treated as one token:\n * - After an `as` expression, like in the code `a as T >= 1`.\n * - In a type argument in an expression context, e.g. `f(a < b, c >= d)`, we\n *   need to see the token as >= so that we get an error and backtrack to\n *   normal expression parsing.\n *\n * Other situations require >= to be seen as two tokens, e.g.\n * `const x: Array<T>=[];`, so it's important to treat > as its own token in\n * typical type parsing situations.\n */\nfunction rescan_gt() {\n  if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.type === _types__WEBPACK_IMPORTED_MODULE_7__.TokenType.greaterThan) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos -= 1;\n    readToken_gt();\n  }\n}\n\nfunction readToken_eq_excl(code) {\n  // '=!'\n  const nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1);\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo) {\n    finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.equality, _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 2) === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo ? 3 : 2);\n    return;\n  }\n  if (code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo && nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.greaterThan) {\n    // '=>'\n    _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos += 2;\n    finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.arrow);\n    return;\n  }\n  finishOp(code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo ? _types__WEBPACK_IMPORTED_MODULE_7__.TokenType.eq : _types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bang, 1);\n}\n\nfunction readToken_question() {\n  // '?'\n  const nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1);\n  const nextChar2 = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 2);\n  if (\n    nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.questionMark &&\n    // In Flow (but not TypeScript), ??string is a valid type that should be\n    // tokenized as two individual ? tokens.\n    !(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.isFlowEnabled && _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.isType)\n  ) {\n    if (nextChar2 === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo) {\n      // '??='\n      finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.assign, 3);\n    } else {\n      // '??'\n      finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.nullishCoalescing, 2);\n    }\n  } else if (\n    nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.dot &&\n    !(nextChar2 >= _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit0 && nextChar2 <= _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit9)\n  ) {\n    // '.' not followed by a number\n    _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos += 2;\n    finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.questionDot);\n  } else {\n    ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n    finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.question);\n  }\n}\n\nfunction getTokenFromCode(code) {\n  switch (code) {\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.numberSign:\n      ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n      finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.hash);\n      return;\n\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.dot:\n      readToken_dot();\n      return;\n\n    // Punctuation tokens.\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.leftParenthesis:\n      ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n      finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenL);\n      return;\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.rightParenthesis:\n      ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n      finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenR);\n      return;\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.semicolon:\n      ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n      finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.semi);\n      return;\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.comma:\n      ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n      finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.comma);\n      return;\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.leftSquareBracket:\n      ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n      finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bracketL);\n      return;\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.rightSquareBracket:\n      ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n      finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bracketR);\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.leftCurlyBrace:\n      if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.isFlowEnabled && _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1) === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.verticalBar) {\n        finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.braceBarL, 2);\n      } else {\n        ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n        finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.braceL);\n      }\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.rightCurlyBrace:\n      ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n      finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.braceR);\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.colon:\n      if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1) === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.colon) {\n        finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.doubleColon, 2);\n      } else {\n        ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n        finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.colon);\n      }\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.questionMark:\n      readToken_question();\n      return;\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.atSign:\n      ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n      finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.at);\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.graveAccent:\n      ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n      finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.backQuote);\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit0: {\n      const nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1);\n      // '0x', '0X', '0o', '0O', '0b', '0B'\n      if (\n        nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lowercaseX ||\n        nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.uppercaseX ||\n        nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lowercaseO ||\n        nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.uppercaseO ||\n        nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lowercaseB ||\n        nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.uppercaseB\n      ) {\n        readRadixNumber();\n        return;\n      }\n    }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit1:\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit2:\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit3:\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit4:\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit5:\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit6:\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit7:\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit8:\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit9:\n      readNumber(false);\n      return;\n\n    // Quotes produce strings.\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.quotationMark:\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.apostrophe:\n      readString(code);\n      return;\n\n    // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.slash:\n      readToken_slash();\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.percentSign:\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.asterisk:\n      readToken_mult_modulo(code);\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.verticalBar:\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.ampersand:\n      readToken_pipe_amp(code);\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.caret:\n      readToken_caret();\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.plusSign:\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.dash:\n      readToken_plus_min(code);\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lessThan:\n      readToken_lt();\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.greaterThan:\n      readToken_gt();\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.equalsTo:\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.exclamationMark:\n      readToken_eq_excl(code);\n      return;\n\n    case _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.tilde:\n      finishOp(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.tilde, 1);\n      return;\n\n    default:\n      break;\n  }\n\n  (0,_traverser_util__WEBPACK_IMPORTED_MODULE_1__.unexpected)(`Unexpected character '${String.fromCharCode(code)}'`, _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n}\n\nfunction finishOp(type, size) {\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos += size;\n  finishToken(type);\n}\n\nfunction readRegexp() {\n  const start = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n  let escaped = false;\n  let inClass = false;\n  for (;;) {\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos >= _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_1__.unexpected)(\"Unterminated regular expression\", start);\n      return;\n    }\n    const code = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n    if (escaped) {\n      escaped = false;\n    } else {\n      if (code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.leftSquareBracket) {\n        inClass = true;\n      } else if (code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.rightSquareBracket && inClass) {\n        inClass = false;\n      } else if (code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.slash && !inClass) {\n        break;\n      }\n      escaped = code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.backslash;\n    }\n    ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n  }\n  ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n  // Need to use `skipWord` because '\\uXXXX' sequences are allowed here (don't ask).\n  skipWord();\n\n  finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.regexp);\n}\n\n/**\n * Read a decimal integer. Note that this can't be unified with the similar code\n * in readRadixNumber (which also handles hex digits) because \"e\" needs to be\n * the end of the integer so that we can properly handle scientific notation.\n */\nfunction readInt() {\n  while (true) {\n    const code = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n    if ((code >= _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit0 && code <= _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit9) || code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.underscore) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos++;\n    } else {\n      break;\n    }\n  }\n}\n\nfunction readRadixNumber() {\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos += 2; // 0x\n\n  // Walk to the end of the number, allowing hex digits.\n  while (true) {\n    const code = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n    if (\n      (code >= _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit0 && code <= _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.digit9) ||\n      (code >= _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lowercaseA && code <= _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lowercaseF) ||\n      (code >= _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.uppercaseA && code <= _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.uppercaseF) ||\n      code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.underscore\n    ) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos++;\n    } else {\n      break;\n    }\n  }\n\n  const nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lowercaseN) {\n    ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n    finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bigint);\n  } else {\n    finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.num);\n  }\n}\n\n// Read an integer, octal integer, or floating-point number.\nfunction readNumber(startsWithDot) {\n  let isBigInt = false;\n  let isDecimal = false;\n\n  if (!startsWithDot) {\n    readInt();\n  }\n\n  let nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.dot) {\n    ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n    readInt();\n    nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n  }\n\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.uppercaseE || nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lowercaseE) {\n    nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n    if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.plusSign || nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.dash) {\n      ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n    }\n    readInt();\n    nextChar = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n  }\n\n  if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lowercaseN) {\n    ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n    isBigInt = true;\n  } else if (nextChar === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lowercaseM) {\n    ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n    isDecimal = true;\n  }\n\n  if (isBigInt) {\n    finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bigint);\n    return;\n  }\n\n  if (isDecimal) {\n    finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.decimal);\n    return;\n  }\n\n  finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.num);\n}\n\nfunction readString(quote) {\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos++;\n  for (;;) {\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos >= _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_1__.unexpected)(\"Unterminated string constant\");\n      return;\n    }\n    const ch = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n    if (ch === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.backslash) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos++;\n    } else if (ch === quote) {\n      break;\n    }\n    _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos++;\n  }\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos++;\n  finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.string);\n}\n\n// Reads template string tokens.\nfunction readTmplToken() {\n  for (;;) {\n    if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos >= _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length) {\n      (0,_traverser_util__WEBPACK_IMPORTED_MODULE_1__.unexpected)(\"Unterminated template\");\n      return;\n    }\n    const ch = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n    if (\n      ch === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.graveAccent ||\n      (ch === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.dollarSign && _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos + 1) === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.leftCurlyBrace)\n    ) {\n      if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos === _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.start && match(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.template)) {\n        if (ch === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.dollarSign) {\n          _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos += 2;\n          finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.dollarBraceL);\n          return;\n        } else {\n          ++_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n          finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.backQuote);\n          return;\n        }\n      }\n      finishToken(_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.template);\n      return;\n    }\n    if (ch === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.backslash) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos++;\n    }\n    _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos++;\n  }\n}\n\n// Skip to the end of the current word. Note that this is the same as the snippet at the end of\n// readWord, but calling skipWord from readWord seems to slightly hurt performance from some rough\n// measurements.\nfunction skipWord() {\n  while (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos < _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length) {\n    const ch = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos);\n    if (_util_identifier__WEBPACK_IMPORTED_MODULE_3__.IS_IDENTIFIER_CHAR[ch]) {\n      _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos++;\n    } else if (ch === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.backslash) {\n      // \\u\n      _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos += 2;\n      if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos) === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.leftCurlyBrace) {\n        while (\n          _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos < _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length &&\n          _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(_traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos) !== _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.rightCurlyBrace\n        ) {\n          _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos++;\n        }\n        _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos++;\n      }\n    } else {\n      break;\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js":
/*!********************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextualKeyword: () => (/* binding */ ContextualKeyword)\n/* harmony export */ });\nvar ContextualKeyword; (function (ContextualKeyword) {\n  const NONE = 0; ContextualKeyword[ContextualKeyword[\"NONE\"] = NONE] = \"NONE\";\n  const _abstract = NONE + 1; ContextualKeyword[ContextualKeyword[\"_abstract\"] = _abstract] = \"_abstract\";\n  const _accessor = _abstract + 1; ContextualKeyword[ContextualKeyword[\"_accessor\"] = _accessor] = \"_accessor\";\n  const _as = _accessor + 1; ContextualKeyword[ContextualKeyword[\"_as\"] = _as] = \"_as\";\n  const _assert = _as + 1; ContextualKeyword[ContextualKeyword[\"_assert\"] = _assert] = \"_assert\";\n  const _asserts = _assert + 1; ContextualKeyword[ContextualKeyword[\"_asserts\"] = _asserts] = \"_asserts\";\n  const _async = _asserts + 1; ContextualKeyword[ContextualKeyword[\"_async\"] = _async] = \"_async\";\n  const _await = _async + 1; ContextualKeyword[ContextualKeyword[\"_await\"] = _await] = \"_await\";\n  const _checks = _await + 1; ContextualKeyword[ContextualKeyword[\"_checks\"] = _checks] = \"_checks\";\n  const _constructor = _checks + 1; ContextualKeyword[ContextualKeyword[\"_constructor\"] = _constructor] = \"_constructor\";\n  const _declare = _constructor + 1; ContextualKeyword[ContextualKeyword[\"_declare\"] = _declare] = \"_declare\";\n  const _enum = _declare + 1; ContextualKeyword[ContextualKeyword[\"_enum\"] = _enum] = \"_enum\";\n  const _exports = _enum + 1; ContextualKeyword[ContextualKeyword[\"_exports\"] = _exports] = \"_exports\";\n  const _from = _exports + 1; ContextualKeyword[ContextualKeyword[\"_from\"] = _from] = \"_from\";\n  const _get = _from + 1; ContextualKeyword[ContextualKeyword[\"_get\"] = _get] = \"_get\";\n  const _global = _get + 1; ContextualKeyword[ContextualKeyword[\"_global\"] = _global] = \"_global\";\n  const _implements = _global + 1; ContextualKeyword[ContextualKeyword[\"_implements\"] = _implements] = \"_implements\";\n  const _infer = _implements + 1; ContextualKeyword[ContextualKeyword[\"_infer\"] = _infer] = \"_infer\";\n  const _interface = _infer + 1; ContextualKeyword[ContextualKeyword[\"_interface\"] = _interface] = \"_interface\";\n  const _is = _interface + 1; ContextualKeyword[ContextualKeyword[\"_is\"] = _is] = \"_is\";\n  const _keyof = _is + 1; ContextualKeyword[ContextualKeyword[\"_keyof\"] = _keyof] = \"_keyof\";\n  const _mixins = _keyof + 1; ContextualKeyword[ContextualKeyword[\"_mixins\"] = _mixins] = \"_mixins\";\n  const _module = _mixins + 1; ContextualKeyword[ContextualKeyword[\"_module\"] = _module] = \"_module\";\n  const _namespace = _module + 1; ContextualKeyword[ContextualKeyword[\"_namespace\"] = _namespace] = \"_namespace\";\n  const _of = _namespace + 1; ContextualKeyword[ContextualKeyword[\"_of\"] = _of] = \"_of\";\n  const _opaque = _of + 1; ContextualKeyword[ContextualKeyword[\"_opaque\"] = _opaque] = \"_opaque\";\n  const _out = _opaque + 1; ContextualKeyword[ContextualKeyword[\"_out\"] = _out] = \"_out\";\n  const _override = _out + 1; ContextualKeyword[ContextualKeyword[\"_override\"] = _override] = \"_override\";\n  const _private = _override + 1; ContextualKeyword[ContextualKeyword[\"_private\"] = _private] = \"_private\";\n  const _protected = _private + 1; ContextualKeyword[ContextualKeyword[\"_protected\"] = _protected] = \"_protected\";\n  const _proto = _protected + 1; ContextualKeyword[ContextualKeyword[\"_proto\"] = _proto] = \"_proto\";\n  const _public = _proto + 1; ContextualKeyword[ContextualKeyword[\"_public\"] = _public] = \"_public\";\n  const _readonly = _public + 1; ContextualKeyword[ContextualKeyword[\"_readonly\"] = _readonly] = \"_readonly\";\n  const _require = _readonly + 1; ContextualKeyword[ContextualKeyword[\"_require\"] = _require] = \"_require\";\n  const _satisfies = _require + 1; ContextualKeyword[ContextualKeyword[\"_satisfies\"] = _satisfies] = \"_satisfies\";\n  const _set = _satisfies + 1; ContextualKeyword[ContextualKeyword[\"_set\"] = _set] = \"_set\";\n  const _static = _set + 1; ContextualKeyword[ContextualKeyword[\"_static\"] = _static] = \"_static\";\n  const _symbol = _static + 1; ContextualKeyword[ContextualKeyword[\"_symbol\"] = _symbol] = \"_symbol\";\n  const _type = _symbol + 1; ContextualKeyword[ContextualKeyword[\"_type\"] = _type] = \"_type\";\n  const _unique = _type + 1; ContextualKeyword[ContextualKeyword[\"_unique\"] = _unique] = \"_unique\";\n  const _using = _unique + 1; ContextualKeyword[ContextualKeyword[\"_using\"] = _using] = \"_using\";\n})(ContextualKeyword || (ContextualKeyword = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9wYXJzZXIvdG9rZW5pemVyL2tleXdvcmRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyx1QkFBdUI7QUFDOUIsa0JBQWtCO0FBQ2xCLDhCQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsNkJBQTZCO0FBQzdCLDJCQUEyQjtBQUMzQixnQ0FBZ0M7QUFDaEMsK0JBQStCO0FBQy9CLDZCQUE2QjtBQUM3Qiw4QkFBOEI7QUFDOUIsb0NBQW9DO0FBQ3BDLHFDQUFxQztBQUNyQyw4QkFBOEI7QUFDOUIsOEJBQThCO0FBQzlCLDhCQUE4QjtBQUM5QiwwQkFBMEI7QUFDMUIsNEJBQTRCO0FBQzVCLG1DQUFtQztBQUNuQyxrQ0FBa0M7QUFDbEMsaUNBQWlDO0FBQ2pDLDhCQUE4QjtBQUM5QiwwQkFBMEI7QUFDMUIsOEJBQThCO0FBQzlCLCtCQUErQjtBQUMvQixrQ0FBa0M7QUFDbEMsOEJBQThCO0FBQzlCLDJCQUEyQjtBQUMzQiw0QkFBNEI7QUFDNUIsOEJBQThCO0FBQzlCLGtDQUFrQztBQUNsQyxtQ0FBbUM7QUFDbkMsaUNBQWlDO0FBQ2pDLDhCQUE4QjtBQUM5QixpQ0FBaUM7QUFDakMsa0NBQWtDO0FBQ2xDLG1DQUFtQztBQUNuQywrQkFBK0I7QUFDL0IsNEJBQTRCO0FBQzVCLCtCQUErQjtBQUMvQiw2QkFBNkI7QUFDN0IsNkJBQTZCO0FBQzdCLDhCQUE4QjtBQUM5QixDQUFDLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3BhcnNlci90b2tlbml6ZXIva2V5d29yZHMuanM/ZmZhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIENvbnRleHR1YWxLZXl3b3JkOyAoZnVuY3Rpb24gKENvbnRleHR1YWxLZXl3b3JkKSB7XG4gIGNvbnN0IE5PTkUgPSAwOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIk5PTkVcIl0gPSBOT05FXSA9IFwiTk9ORVwiO1xuICBjb25zdCBfYWJzdHJhY3QgPSBOT05FICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfYWJzdHJhY3RcIl0gPSBfYWJzdHJhY3RdID0gXCJfYWJzdHJhY3RcIjtcbiAgY29uc3QgX2FjY2Vzc29yID0gX2Fic3RyYWN0ICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfYWNjZXNzb3JcIl0gPSBfYWNjZXNzb3JdID0gXCJfYWNjZXNzb3JcIjtcbiAgY29uc3QgX2FzID0gX2FjY2Vzc29yICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfYXNcIl0gPSBfYXNdID0gXCJfYXNcIjtcbiAgY29uc3QgX2Fzc2VydCA9IF9hcyArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2Fzc2VydFwiXSA9IF9hc3NlcnRdID0gXCJfYXNzZXJ0XCI7XG4gIGNvbnN0IF9hc3NlcnRzID0gX2Fzc2VydCArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2Fzc2VydHNcIl0gPSBfYXNzZXJ0c10gPSBcIl9hc3NlcnRzXCI7XG4gIGNvbnN0IF9hc3luYyA9IF9hc3NlcnRzICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfYXN5bmNcIl0gPSBfYXN5bmNdID0gXCJfYXN5bmNcIjtcbiAgY29uc3QgX2F3YWl0ID0gX2FzeW5jICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfYXdhaXRcIl0gPSBfYXdhaXRdID0gXCJfYXdhaXRcIjtcbiAgY29uc3QgX2NoZWNrcyA9IF9hd2FpdCArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2NoZWNrc1wiXSA9IF9jaGVja3NdID0gXCJfY2hlY2tzXCI7XG4gIGNvbnN0IF9jb25zdHJ1Y3RvciA9IF9jaGVja3MgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9jb25zdHJ1Y3RvclwiXSA9IF9jb25zdHJ1Y3Rvcl0gPSBcIl9jb25zdHJ1Y3RvclwiO1xuICBjb25zdCBfZGVjbGFyZSA9IF9jb25zdHJ1Y3RvciArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2RlY2xhcmVcIl0gPSBfZGVjbGFyZV0gPSBcIl9kZWNsYXJlXCI7XG4gIGNvbnN0IF9lbnVtID0gX2RlY2xhcmUgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9lbnVtXCJdID0gX2VudW1dID0gXCJfZW51bVwiO1xuICBjb25zdCBfZXhwb3J0cyA9IF9lbnVtICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfZXhwb3J0c1wiXSA9IF9leHBvcnRzXSA9IFwiX2V4cG9ydHNcIjtcbiAgY29uc3QgX2Zyb20gPSBfZXhwb3J0cyArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2Zyb21cIl0gPSBfZnJvbV0gPSBcIl9mcm9tXCI7XG4gIGNvbnN0IF9nZXQgPSBfZnJvbSArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2dldFwiXSA9IF9nZXRdID0gXCJfZ2V0XCI7XG4gIGNvbnN0IF9nbG9iYWwgPSBfZ2V0ICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfZ2xvYmFsXCJdID0gX2dsb2JhbF0gPSBcIl9nbG9iYWxcIjtcbiAgY29uc3QgX2ltcGxlbWVudHMgPSBfZ2xvYmFsICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfaW1wbGVtZW50c1wiXSA9IF9pbXBsZW1lbnRzXSA9IFwiX2ltcGxlbWVudHNcIjtcbiAgY29uc3QgX2luZmVyID0gX2ltcGxlbWVudHMgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9pbmZlclwiXSA9IF9pbmZlcl0gPSBcIl9pbmZlclwiO1xuICBjb25zdCBfaW50ZXJmYWNlID0gX2luZmVyICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfaW50ZXJmYWNlXCJdID0gX2ludGVyZmFjZV0gPSBcIl9pbnRlcmZhY2VcIjtcbiAgY29uc3QgX2lzID0gX2ludGVyZmFjZSArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2lzXCJdID0gX2lzXSA9IFwiX2lzXCI7XG4gIGNvbnN0IF9rZXlvZiA9IF9pcyArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2tleW9mXCJdID0gX2tleW9mXSA9IFwiX2tleW9mXCI7XG4gIGNvbnN0IF9taXhpbnMgPSBfa2V5b2YgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9taXhpbnNcIl0gPSBfbWl4aW5zXSA9IFwiX21peGluc1wiO1xuICBjb25zdCBfbW9kdWxlID0gX21peGlucyArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX21vZHVsZVwiXSA9IF9tb2R1bGVdID0gXCJfbW9kdWxlXCI7XG4gIGNvbnN0IF9uYW1lc3BhY2UgPSBfbW9kdWxlICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfbmFtZXNwYWNlXCJdID0gX25hbWVzcGFjZV0gPSBcIl9uYW1lc3BhY2VcIjtcbiAgY29uc3QgX29mID0gX25hbWVzcGFjZSArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX29mXCJdID0gX29mXSA9IFwiX29mXCI7XG4gIGNvbnN0IF9vcGFxdWUgPSBfb2YgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9vcGFxdWVcIl0gPSBfb3BhcXVlXSA9IFwiX29wYXF1ZVwiO1xuICBjb25zdCBfb3V0ID0gX29wYXF1ZSArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX291dFwiXSA9IF9vdXRdID0gXCJfb3V0XCI7XG4gIGNvbnN0IF9vdmVycmlkZSA9IF9vdXQgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9vdmVycmlkZVwiXSA9IF9vdmVycmlkZV0gPSBcIl9vdmVycmlkZVwiO1xuICBjb25zdCBfcHJpdmF0ZSA9IF9vdmVycmlkZSArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX3ByaXZhdGVcIl0gPSBfcHJpdmF0ZV0gPSBcIl9wcml2YXRlXCI7XG4gIGNvbnN0IF9wcm90ZWN0ZWQgPSBfcHJpdmF0ZSArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX3Byb3RlY3RlZFwiXSA9IF9wcm90ZWN0ZWRdID0gXCJfcHJvdGVjdGVkXCI7XG4gIGNvbnN0IF9wcm90byA9IF9wcm90ZWN0ZWQgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9wcm90b1wiXSA9IF9wcm90b10gPSBcIl9wcm90b1wiO1xuICBjb25zdCBfcHVibGljID0gX3Byb3RvICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfcHVibGljXCJdID0gX3B1YmxpY10gPSBcIl9wdWJsaWNcIjtcbiAgY29uc3QgX3JlYWRvbmx5ID0gX3B1YmxpYyArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX3JlYWRvbmx5XCJdID0gX3JlYWRvbmx5XSA9IFwiX3JlYWRvbmx5XCI7XG4gIGNvbnN0IF9yZXF1aXJlID0gX3JlYWRvbmx5ICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfcmVxdWlyZVwiXSA9IF9yZXF1aXJlXSA9IFwiX3JlcXVpcmVcIjtcbiAgY29uc3QgX3NhdGlzZmllcyA9IF9yZXF1aXJlICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfc2F0aXNmaWVzXCJdID0gX3NhdGlzZmllc10gPSBcIl9zYXRpc2ZpZXNcIjtcbiAgY29uc3QgX3NldCA9IF9zYXRpc2ZpZXMgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9zZXRcIl0gPSBfc2V0XSA9IFwiX3NldFwiO1xuICBjb25zdCBfc3RhdGljID0gX3NldCArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX3N0YXRpY1wiXSA9IF9zdGF0aWNdID0gXCJfc3RhdGljXCI7XG4gIGNvbnN0IF9zeW1ib2wgPSBfc3RhdGljICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfc3ltYm9sXCJdID0gX3N5bWJvbF0gPSBcIl9zeW1ib2xcIjtcbiAgY29uc3QgX3R5cGUgPSBfc3ltYm9sICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfdHlwZVwiXSA9IF90eXBlXSA9IFwiX3R5cGVcIjtcbiAgY29uc3QgX3VuaXF1ZSA9IF90eXBlICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfdW5pcXVlXCJdID0gX3VuaXF1ZV0gPSBcIl91bmlxdWVcIjtcbiAgY29uc3QgX3VzaW5nID0gX3VuaXF1ZSArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX3VzaW5nXCJdID0gX3VzaW5nXSA9IFwiX3VzaW5nXCI7XG59KShDb250ZXh0dWFsS2V5d29yZCB8fCAoQ29udGV4dHVhbEtleXdvcmQgPSB7fSkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/readWord.js":
/*!********************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/tokenizer/readWord.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ readWord)\n/* harmony export */ });\n/* harmony import */ var _traverser_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../traverser/base */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js\");\n/* harmony import */ var _util_charcodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/charcodes */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js\");\n/* harmony import */ var _util_identifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/identifier */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/identifier.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _readWordTree__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./readWordTree */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/readWordTree.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n\n\n\n\n\n\n\n/**\n * Read an identifier, producing either a name token or matching on one of the existing keywords.\n * For performance, we pre-generate big decision tree that we traverse. Each node represents a\n * prefix and has 27 values, where the first value is the token or contextual token, if any (-1 if\n * not), and the other 26 values are the transitions to other nodes, or -1 to stop.\n */\nfunction readWord() {\n  let treePos = 0;\n  let code = 0;\n  let pos = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos;\n  while (pos < _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length) {\n    code = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(pos);\n    if (code < _util_charcodes__WEBPACK_IMPORTED_MODULE_1__.charCodes.lowercaseA || code > _util_charcodes__WEBPACK_IMPORTED_MODULE_1__.charCodes.lowercaseZ) {\n      break;\n    }\n    const next = _readWordTree__WEBPACK_IMPORTED_MODULE_4__.READ_WORD_TREE[treePos + (code - _util_charcodes__WEBPACK_IMPORTED_MODULE_1__.charCodes.lowercaseA) + 1];\n    if (next === -1) {\n      break;\n    } else {\n      treePos = next;\n      pos++;\n    }\n  }\n\n  const keywordValue = _readWordTree__WEBPACK_IMPORTED_MODULE_4__.READ_WORD_TREE[treePos];\n  if (keywordValue > -1 && !_util_identifier__WEBPACK_IMPORTED_MODULE_2__.IS_IDENTIFIER_CHAR[code]) {\n    _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos = pos;\n    if (keywordValue & 1) {\n      (0,_index__WEBPACK_IMPORTED_MODULE_3__.finishToken)(keywordValue >>> 1);\n    } else {\n      (0,_index__WEBPACK_IMPORTED_MODULE_3__.finishToken)(_types__WEBPACK_IMPORTED_MODULE_5__.TokenType.name, keywordValue >>> 1);\n    }\n    return;\n  }\n\n  while (pos < _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length) {\n    const ch = _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(pos);\n    if (_util_identifier__WEBPACK_IMPORTED_MODULE_2__.IS_IDENTIFIER_CHAR[ch]) {\n      pos++;\n    } else if (ch === _util_charcodes__WEBPACK_IMPORTED_MODULE_1__.charCodes.backslash) {\n      // \\u\n      pos += 2;\n      if (_traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(pos) === _util_charcodes__WEBPACK_IMPORTED_MODULE_1__.charCodes.leftCurlyBrace) {\n        while (pos < _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.length && _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(pos) !== _util_charcodes__WEBPACK_IMPORTED_MODULE_1__.charCodes.rightCurlyBrace) {\n          pos++;\n        }\n        pos++;\n      }\n    } else if (ch === _util_charcodes__WEBPACK_IMPORTED_MODULE_1__.charCodes.atSign && _traverser_base__WEBPACK_IMPORTED_MODULE_0__.input.charCodeAt(pos + 1) === _util_charcodes__WEBPACK_IMPORTED_MODULE_1__.charCodes.atSign) {\n      pos += 2;\n    } else {\n      break;\n    }\n  }\n  _traverser_base__WEBPACK_IMPORTED_MODULE_0__.state.pos = pos;\n  (0,_index__WEBPACK_IMPORTED_MODULE_3__.finishToken)(_types__WEBPACK_IMPORTED_MODULE_5__.TokenType.name);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9wYXJzZXIvdG9rZW5pemVyL3JlYWRXb3JkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBK0M7QUFDSDtBQUNVO0FBQ2xCO0FBQ1U7QUFDTjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2U7QUFDZjtBQUNBO0FBQ0EsWUFBWSxrREFBSztBQUNqQixlQUFlLGtEQUFLO0FBQ3BCLFdBQVcsa0RBQUs7QUFDaEIsZUFBZSxzREFBUyxzQkFBc0Isc0RBQVM7QUFDdkQ7QUFDQTtBQUNBLGlCQUFpQix5REFBYyxtQkFBbUIsc0RBQVM7QUFDM0Q7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIseURBQWM7QUFDckMsNEJBQTRCLGdFQUFrQjtBQUM5QyxJQUFJLGtEQUFLO0FBQ1Q7QUFDQSxNQUFNLG1EQUFXO0FBQ2pCLE1BQU07QUFDTixNQUFNLG1EQUFXLENBQUMsNkNBQUU7QUFDcEI7QUFDQTtBQUNBOztBQUVBLGVBQWUsa0RBQUs7QUFDcEIsZUFBZSxrREFBSztBQUNwQixRQUFRLGdFQUFrQjtBQUMxQjtBQUNBLE1BQU0sZ0JBQWdCLHNEQUFTO0FBQy9CO0FBQ0E7QUFDQSxVQUFVLGtEQUFLLHFCQUFxQixzREFBUztBQUM3QyxxQkFBcUIsa0RBQUssV0FBVyxrREFBSyxxQkFBcUIsc0RBQVM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGdCQUFnQixzREFBUyxXQUFXLGtEQUFLLHlCQUF5QixzREFBUztBQUNqRjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxFQUFFLGtEQUFLO0FBQ1AsRUFBRSxtREFBVyxDQUFDLDZDQUFFO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktbGlicmFyeS1kb2NzLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC9lc20vcGFyc2VyL3Rva2VuaXplci9yZWFkV29yZC5qcz84YzMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aW5wdXQsIHN0YXRlfSBmcm9tIFwiLi4vdHJhdmVyc2VyL2Jhc2VcIjtcbmltcG9ydCB7Y2hhckNvZGVzfSBmcm9tIFwiLi4vdXRpbC9jaGFyY29kZXNcIjtcbmltcG9ydCB7SVNfSURFTlRJRklFUl9DSEFSfSBmcm9tIFwiLi4vdXRpbC9pZGVudGlmaWVyXCI7XG5pbXBvcnQge2ZpbmlzaFRva2VufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHtSRUFEX1dPUkRfVFJFRX0gZnJvbSBcIi4vcmVhZFdvcmRUcmVlXCI7XG5pbXBvcnQge1Rva2VuVHlwZSBhcyB0dH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuLyoqXG4gKiBSZWFkIGFuIGlkZW50aWZpZXIsIHByb2R1Y2luZyBlaXRoZXIgYSBuYW1lIHRva2VuIG9yIG1hdGNoaW5nIG9uIG9uZSBvZiB0aGUgZXhpc3Rpbmcga2V5d29yZHMuXG4gKiBGb3IgcGVyZm9ybWFuY2UsIHdlIHByZS1nZW5lcmF0ZSBiaWcgZGVjaXNpb24gdHJlZSB0aGF0IHdlIHRyYXZlcnNlLiBFYWNoIG5vZGUgcmVwcmVzZW50cyBhXG4gKiBwcmVmaXggYW5kIGhhcyAyNyB2YWx1ZXMsIHdoZXJlIHRoZSBmaXJzdCB2YWx1ZSBpcyB0aGUgdG9rZW4gb3IgY29udGV4dHVhbCB0b2tlbiwgaWYgYW55ICgtMSBpZlxuICogbm90KSwgYW5kIHRoZSBvdGhlciAyNiB2YWx1ZXMgYXJlIHRoZSB0cmFuc2l0aW9ucyB0byBvdGhlciBub2Rlcywgb3IgLTEgdG8gc3RvcC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVhZFdvcmQoKSB7XG4gIGxldCB0cmVlUG9zID0gMDtcbiAgbGV0IGNvZGUgPSAwO1xuICBsZXQgcG9zID0gc3RhdGUucG9zO1xuICB3aGlsZSAocG9zIDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgY29kZSA9IGlucHV0LmNoYXJDb2RlQXQocG9zKTtcbiAgICBpZiAoY29kZSA8IGNoYXJDb2Rlcy5sb3dlcmNhc2VBIHx8IGNvZGUgPiBjaGFyQ29kZXMubG93ZXJjYXNlWikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IG5leHQgPSBSRUFEX1dPUkRfVFJFRVt0cmVlUG9zICsgKGNvZGUgLSBjaGFyQ29kZXMubG93ZXJjYXNlQSkgKyAxXTtcbiAgICBpZiAobmV4dCA9PT0gLTEpIHtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmVlUG9zID0gbmV4dDtcbiAgICAgIHBvcysrO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGtleXdvcmRWYWx1ZSA9IFJFQURfV09SRF9UUkVFW3RyZWVQb3NdO1xuICBpZiAoa2V5d29yZFZhbHVlID4gLTEgJiYgIUlTX0lERU5USUZJRVJfQ0hBUltjb2RlXSkge1xuICAgIHN0YXRlLnBvcyA9IHBvcztcbiAgICBpZiAoa2V5d29yZFZhbHVlICYgMSkge1xuICAgICAgZmluaXNoVG9rZW4oa2V5d29yZFZhbHVlID4+PiAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmluaXNoVG9rZW4odHQubmFtZSwga2V5d29yZFZhbHVlID4+PiAxKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgd2hpbGUgKHBvcyA8IGlucHV0Lmxlbmd0aCkge1xuICAgIGNvbnN0IGNoID0gaW5wdXQuY2hhckNvZGVBdChwb3MpO1xuICAgIGlmIChJU19JREVOVElGSUVSX0NIQVJbY2hdKSB7XG4gICAgICBwb3MrKztcbiAgICB9IGVsc2UgaWYgKGNoID09PSBjaGFyQ29kZXMuYmFja3NsYXNoKSB7XG4gICAgICAvLyBcXHVcbiAgICAgIHBvcyArPSAyO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocG9zKSA9PT0gY2hhckNvZGVzLmxlZnRDdXJseUJyYWNlKSB7XG4gICAgICAgIHdoaWxlIChwb3MgPCBpbnB1dC5sZW5ndGggJiYgaW5wdXQuY2hhckNvZGVBdChwb3MpICE9PSBjaGFyQ29kZXMucmlnaHRDdXJseUJyYWNlKSB7XG4gICAgICAgICAgcG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgcG9zKys7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gY2hhckNvZGVzLmF0U2lnbiAmJiBpbnB1dC5jaGFyQ29kZUF0KHBvcyArIDEpID09PSBjaGFyQ29kZXMuYXRTaWduKSB7XG4gICAgICBwb3MgKz0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YXRlLnBvcyA9IHBvcztcbiAgZmluaXNoVG9rZW4odHQubmFtZSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/readWord.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/readWordTree.js":
/*!************************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/tokenizer/readWordTree.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   READ_WORD_TREE: () => (/* binding */ READ_WORD_TREE)\n/* harmony export */ });\n/* harmony import */ var _keywords__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n// Generated file, do not edit! Run \"yarn generate\" to re-generate this file.\n\n\n\n// prettier-ignore\nconst READ_WORD_TREE = new Int32Array([\n  // \"\"\n  -1, 27, 783, 918, 1755, 2376, 2862, 3483, -1, 3699, -1, 4617, 4752, 4833, 5130, 5508, 5940, -1, 6480, 6939, 7749, 8181, 8451, 8613, -1, 8829, -1,\n  // \"a\"\n  -1, -1, 54, 243, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 432, -1, -1, -1, 675, -1, -1, -1,\n  // \"ab\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1,\n  // \"abs\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1,\n  // \"abst\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"abstr\"\n  -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"abstra\"\n  -1, -1, -1, 189, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"abstrac\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 216, -1, -1, -1, -1, -1, -1,\n  // \"abstract\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._abstract << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ac\"\n  -1, -1, -1, 270, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"acc\"\n  -1, -1, -1, -1, -1, 297, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"acce\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 324, -1, -1, -1, -1, -1, -1, -1,\n  // \"acces\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 351, -1, -1, -1, -1, -1, -1, -1,\n  // \"access\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 378, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"accesso\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 405, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"accessor\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._accessor << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"as\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._as << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 459, -1, -1, -1, -1, -1, 594, -1,\n  // \"ass\"\n  -1, -1, -1, -1, -1, 486, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"asse\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 513, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"asser\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 540, -1, -1, -1, -1, -1, -1,\n  // \"assert\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._assert << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 567, -1, -1, -1, -1, -1, -1, -1,\n  // \"asserts\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._asserts << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"asy\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 621, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"asyn\"\n  -1, -1, -1, 648, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"async\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._async << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"aw\"\n  -1, 702, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"awa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 729, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"awai\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 756, -1, -1, -1, -1, -1, -1,\n  // \"await\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._await << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"b\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 810, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"br\"\n  -1, -1, -1, -1, -1, 837, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"bre\"\n  -1, 864, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"brea\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 891, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"break\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._break << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"c\"\n  -1, 945, -1, -1, -1, -1, -1, -1, 1107, -1, -1, -1, 1242, -1, -1, 1350, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ca\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 972, 1026, -1, -1, -1, -1, -1, -1,\n  // \"cas\"\n  -1, -1, -1, -1, -1, 999, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"case\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._case << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cat\"\n  -1, -1, -1, 1053, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"catc\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 1080, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"catch\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._catch << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ch\"\n  -1, -1, -1, -1, -1, 1134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"che\"\n  -1, -1, -1, 1161, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"chec\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1188, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"check\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1215, -1, -1, -1, -1, -1, -1, -1,\n  // \"checks\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._checks << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cl\"\n  -1, 1269, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cla\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1296, -1, -1, -1, -1, -1, -1, -1,\n  // \"clas\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1323, -1, -1, -1, -1, -1, -1, -1,\n  // \"class\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._class << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"co\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1377, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"con\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1404, 1620, -1, -1, -1, -1, -1, -1,\n  // \"cons\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1431, -1, -1, -1, -1, -1, -1,\n  // \"const\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._const << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1458, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"constr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1485, -1, -1, -1, -1, -1,\n  // \"constru\"\n  -1, -1, -1, 1512, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"construc\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1539, -1, -1, -1, -1, -1, -1,\n  // \"construct\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1566, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"constructo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1593, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"constructor\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._constructor << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cont\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 1647, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"conti\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1674, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"contin\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1701, -1, -1, -1, -1, -1,\n  // \"continu\"\n  -1, -1, -1, -1, -1, 1728, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"continue\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._continue << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"d\"\n  -1, -1, -1, -1, -1, 1782, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2349, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"de\"\n  -1, -1, 1809, 1971, -1, -1, 2106, -1, -1, -1, -1, -1, 2241, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"deb\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1836, -1, -1, -1, -1, -1,\n  // \"debu\"\n  -1, -1, -1, -1, -1, -1, -1, 1863, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debug\"\n  -1, -1, -1, -1, -1, -1, -1, 1890, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debugg\"\n  -1, -1, -1, -1, -1, 1917, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debugge\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1944, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debugger\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._debugger << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"dec\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1998, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"decl\"\n  -1, 2025, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"decla\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2052, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"declar\"\n  -1, -1, -1, -1, -1, 2079, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"declare\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._declare << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"def\"\n  -1, 2133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"defa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2160, -1, -1, -1, -1, -1,\n  // \"defau\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2187, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"defaul\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2214, -1, -1, -1, -1, -1, -1,\n  // \"default\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._default << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"del\"\n  -1, -1, -1, -1, -1, 2268, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"dele\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2295, -1, -1, -1, -1, -1, -1,\n  // \"delet\"\n  -1, -1, -1, -1, -1, 2322, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"delete\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._delete << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"do\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._do << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"e\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2403, -1, 2484, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2565, -1, -1,\n  // \"el\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2430, -1, -1, -1, -1, -1, -1, -1,\n  // \"els\"\n  -1, -1, -1, -1, -1, 2457, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"else\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._else << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"en\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2511, -1, -1, -1, -1, -1,\n  // \"enu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2538, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"enum\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._enum << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ex\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2592, -1, -1, -1, 2727, -1, -1, -1, -1, -1, -1,\n  // \"exp\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2619, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"expo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2646, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"expor\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2673, -1, -1, -1, -1, -1, -1,\n  // \"export\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2700, -1, -1, -1, -1, -1, -1, -1,\n  // \"exports\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._exports << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ext\"\n  -1, -1, -1, -1, -1, 2754, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"exte\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2781, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"exten\"\n  -1, -1, -1, -1, 2808, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"extend\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2835, -1, -1, -1, -1, -1, -1, -1,\n  // \"extends\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._extends << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"f\"\n  -1, 2889, -1, -1, -1, -1, -1, -1, -1, 2997, -1, -1, -1, -1, -1, 3159, -1, -1, 3213, -1, -1, 3294, -1, -1, -1, -1, -1,\n  // \"fa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2916, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fal\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2943, -1, -1, -1, -1, -1, -1, -1,\n  // \"fals\"\n  -1, -1, -1, -1, -1, 2970, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"false\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._false << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3024, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fin\"\n  -1, 3051, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fina\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3078, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"final\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"finall\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3132, -1,\n  // \"finally\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._finally << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3186, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"for\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._for << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3240, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fro\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3267, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"from\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._from << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3321, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fun\"\n  -1, -1, -1, 3348, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"func\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3375, -1, -1, -1, -1, -1, -1,\n  // \"funct\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 3402, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"functi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3429, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"functio\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3456, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"function\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._function << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"g\"\n  -1, -1, -1, -1, -1, 3510, -1, -1, -1, -1, -1, -1, 3564, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ge\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3537, -1, -1, -1, -1, -1, -1,\n  // \"get\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._get << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"gl\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3591, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"glo\"\n  -1, -1, 3618, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"glob\"\n  -1, 3645, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"globa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3672, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"global\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._global << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"i\"\n  -1, -1, -1, -1, -1, -1, 3726, -1, -1, -1, -1, -1, -1, 3753, 4077, -1, -1, -1, -1, 4590, -1, -1, -1, -1, -1, -1, -1,\n  // \"if\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._if << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"im\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3780, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"imp\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3807, -1, -1, 3996, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impl\"\n  -1, -1, -1, -1, -1, 3834, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"imple\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3861, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"implem\"\n  -1, -1, -1, -1, -1, 3888, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impleme\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3915, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"implemen\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3942, -1, -1, -1, -1, -1, -1,\n  // \"implement\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3969, -1, -1, -1, -1, -1, -1, -1,\n  // \"implements\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._implements << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4023, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impor\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4050, -1, -1, -1, -1, -1, -1,\n  // \"import\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._import << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"in\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._in << 1) + 1, -1, -1, -1, -1, -1, 4104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4185, 4401, -1, -1, -1, -1, -1, -1,\n  // \"inf\"\n  -1, -1, -1, -1, -1, 4131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"infe\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4158, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"infer\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._infer << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ins\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4212, -1, -1, -1, -1, -1, -1,\n  // \"inst\"\n  -1, 4239, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"insta\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4266, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instan\"\n  -1, -1, -1, 4293, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instanc\"\n  -1, -1, -1, -1, -1, 4320, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instance\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4347, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instanceo\"\n  -1, -1, -1, -1, -1, -1, 4374, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instanceof\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._instanceof << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"int\"\n  -1, -1, -1, -1, -1, 4428, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"inte\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4455, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"inter\"\n  -1, -1, -1, -1, -1, -1, 4482, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interf\"\n  -1, 4509, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interfa\"\n  -1, -1, -1, 4536, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interfac\"\n  -1, -1, -1, -1, -1, 4563, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interface\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._interface << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"is\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._is << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"k\"\n  -1, -1, -1, -1, -1, 4644, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ke\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4671, -1,\n  // \"key\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4698, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"keyo\"\n  -1, -1, -1, -1, -1, -1, 4725, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"keyof\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._keyof << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"l\"\n  -1, -1, -1, -1, -1, 4779, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"le\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4806, -1, -1, -1, -1, -1, -1,\n  // \"let\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._let << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"m\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 4860, -1, -1, -1, -1, -1, 4995, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4887, -1, -1,\n  // \"mix\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 4914, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mixi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4941, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mixin\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4968, -1, -1, -1, -1, -1, -1, -1,\n  // \"mixins\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._mixins << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mo\"\n  -1, -1, -1, -1, 5022, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mod\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5049, -1, -1, -1, -1, -1,\n  // \"modu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5076, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"modul\"\n  -1, -1, -1, -1, -1, 5103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"module\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._module << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"n\"\n  -1, 5157, -1, -1, -1, 5373, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5427, -1, -1, -1, -1, -1,\n  // \"na\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"nam\"\n  -1, -1, -1, -1, -1, 5211, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"name\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5238, -1, -1, -1, -1, -1, -1, -1,\n  // \"names\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5265, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namesp\"\n  -1, 5292, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namespa\"\n  -1, -1, -1, 5319, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namespac\"\n  -1, -1, -1, -1, -1, 5346, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namespace\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._namespace << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ne\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5400, -1, -1, -1,\n  // \"new\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._new << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"nu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5454, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"nul\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5481, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"null\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._null << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"o\"\n  -1, -1, -1, -1, -1, -1, 5535, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5562, -1, -1, -1, -1, 5697, 5751, -1, -1, -1, -1,\n  // \"of\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._of << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"op\"\n  -1, 5589, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"opa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5616, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"opaq\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5643, -1, -1, -1, -1, -1,\n  // \"opaqu\"\n  -1, -1, -1, -1, -1, 5670, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"opaque\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._opaque << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ou\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5724, -1, -1, -1, -1, -1, -1,\n  // \"out\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._out << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ov\"\n  -1, -1, -1, -1, -1, 5778, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ove\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5805, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"over\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5832, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"overr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 5859, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"overri\"\n  -1, -1, -1, -1, 5886, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"overrid\"\n  -1, -1, -1, -1, -1, 5913, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"override\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._override << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"p\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5967, -1, -1, 6345, -1, -1, -1, -1, -1,\n  // \"pr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 5994, -1, -1, -1, -1, -1, 6129, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pri\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6021, -1, -1, -1, -1,\n  // \"priv\"\n  -1, 6048, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"priva\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6075, -1, -1, -1, -1, -1, -1,\n  // \"privat\"\n  -1, -1, -1, -1, -1, 6102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"private\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._private << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pro\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6156, -1, -1, -1, -1, -1, -1,\n  // \"prot\"\n  -1, -1, -1, -1, -1, 6183, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6318, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"prote\"\n  -1, -1, -1, 6210, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"protec\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6237, -1, -1, -1, -1, -1, -1,\n  // \"protect\"\n  -1, -1, -1, -1, -1, 6264, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"protecte\"\n  -1, -1, -1, -1, 6291, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"protected\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._protected << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"proto\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._proto << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pu\"\n  -1, -1, 6372, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pub\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6399, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"publ\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6426, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"publi\"\n  -1, -1, -1, 6453, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"public\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._public << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"r\"\n  -1, -1, -1, -1, -1, 6507, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"re\"\n  -1, 6534, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6696, -1, -1, 6831, -1, -1, -1, -1, -1, -1,\n  // \"rea\"\n  -1, -1, -1, -1, 6561, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"read\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6588, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"reado\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6615, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"readon\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6642, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"readonl\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6669, -1,\n  // \"readonly\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._readonly << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"req\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6723, -1, -1, -1, -1, -1,\n  // \"requ\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6750, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"requi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6777, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"requir\"\n  -1, -1, -1, -1, -1, 6804, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"require\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._require << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ret\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6858, -1, -1, -1, -1, -1,\n  // \"retu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6885, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"retur\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6912, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"return\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._return << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"s\"\n  -1, 6966, -1, -1, -1, 7182, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7236, 7371, -1, 7479, -1, 7614, -1,\n  // \"sa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6993, -1, -1, -1, -1, -1, -1,\n  // \"sat\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7020, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sati\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7047, -1, -1, -1, -1, -1, -1, -1,\n  // \"satis\"\n  -1, -1, -1, -1, -1, -1, 7074, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"satisf\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"satisfi\"\n  -1, -1, -1, -1, -1, 7128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"satisfie\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7155, -1, -1, -1, -1, -1, -1, -1,\n  // \"satisfies\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._satisfies << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"se\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7209, -1, -1, -1, -1, -1, -1,\n  // \"set\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._set << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"st\"\n  -1, 7263, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sta\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7290, -1, -1, -1, -1, -1, -1,\n  // \"stat\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7317, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"stati\"\n  -1, -1, -1, 7344, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"static\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._static << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"su\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7398, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sup\"\n  -1, -1, -1, -1, -1, 7425, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"supe\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7452, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"super\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._super << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sw\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7506, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"swi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7533, -1, -1, -1, -1, -1, -1,\n  // \"swit\"\n  -1, -1, -1, 7560, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"switc\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 7587, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"switch\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._switch << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sy\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7641, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sym\"\n  -1, -1, 7668, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"symb\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7695, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"symbo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7722, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"symbol\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._symbol << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"t\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 7776, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7938, -1, -1, -1, -1, -1, -1, 8046, -1,\n  // \"th\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7803, -1, -1, -1, -1, -1, -1, -1, -1, 7857, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"thi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7830, -1, -1, -1, -1, -1, -1, -1,\n  // \"this\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._this << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"thr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7884, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"thro\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7911, -1, -1, -1,\n  // \"throw\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._throw << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"tr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7965, -1, -1, -1, 8019, -1,\n  // \"tru\"\n  -1, -1, -1, -1, -1, 7992, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"true\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._true << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"try\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._try << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ty\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8073, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"typ\"\n  -1, -1, -1, -1, -1, 8100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"type\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._type << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"typeo\"\n  -1, -1, -1, -1, -1, -1, 8154, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"typeof\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._typeof << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"u\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8208, -1, -1, -1, -1, 8343, -1, -1, -1, -1, -1, -1, -1,\n  // \"un\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8235, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"uni\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8262, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"uniq\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8289, -1, -1, -1, -1, -1,\n  // \"uniqu\"\n  -1, -1, -1, -1, -1, 8316, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"unique\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._unique << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"us\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8370, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"usi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8397, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"usin\"\n  -1, -1, -1, -1, -1, -1, -1, 8424, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"using\"\n  _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._using << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"v\"\n  -1, 8478, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8532, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"va\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8505, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"var\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._var << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"vo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8559, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"voi\"\n  -1, -1, -1, -1, 8586, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"void\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._void << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"w\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 8640, 8748, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"wh\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8667, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"whi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8694, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"whil\"\n  -1, -1, -1, -1, -1, 8721, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"while\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._while << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"wi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8775, -1, -1, -1, -1, -1, -1,\n  // \"wit\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 8802, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"with\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._with << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"y\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8856, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yi\"\n  -1, -1, -1, -1, -1, 8883, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yie\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8910, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yiel\"\n  -1, -1, -1, -1, 8937, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yield\"\n  (_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._yield << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/readWordTree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/state.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/tokenizer/state.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Scope: () => (/* binding */ Scope),\n/* harmony export */   StateSnapshot: () => (/* binding */ StateSnapshot),\n/* harmony export */   \"default\": () => (/* binding */ State)\n/* harmony export */ });\n/* harmony import */ var _keywords__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n\n\n\n\nclass Scope {\n  \n  \n  \n\n  constructor(startTokenIndex, endTokenIndex, isFunctionScope) {\n    this.startTokenIndex = startTokenIndex;\n    this.endTokenIndex = endTokenIndex;\n    this.isFunctionScope = isFunctionScope;\n  }\n}\n\nclass StateSnapshot {\n  constructor(\n     potentialArrowAt,\n     noAnonFunctionType,\n     inDisallowConditionalTypesContext,\n     tokensLength,\n     scopesLength,\n     pos,\n     type,\n     contextualKeyword,\n     start,\n     end,\n     isType,\n     scopeDepth,\n     error,\n  ) {;this.potentialArrowAt = potentialArrowAt;this.noAnonFunctionType = noAnonFunctionType;this.inDisallowConditionalTypesContext = inDisallowConditionalTypesContext;this.tokensLength = tokensLength;this.scopesLength = scopesLength;this.pos = pos;this.type = type;this.contextualKeyword = contextualKeyword;this.start = start;this.end = end;this.isType = isType;this.scopeDepth = scopeDepth;this.error = error;}\n}\n\nclass State {constructor() { State.prototype.__init.call(this);State.prototype.__init2.call(this);State.prototype.__init3.call(this);State.prototype.__init4.call(this);State.prototype.__init5.call(this);State.prototype.__init6.call(this);State.prototype.__init7.call(this);State.prototype.__init8.call(this);State.prototype.__init9.call(this);State.prototype.__init10.call(this);State.prototype.__init11.call(this);State.prototype.__init12.call(this);State.prototype.__init13.call(this); }\n  // Used to signify the start of a potential arrow function\n  __init() {this.potentialArrowAt = -1}\n\n  // Used by Flow to handle an edge case involving function type parsing.\n  __init2() {this.noAnonFunctionType = false}\n\n  // Used by TypeScript to handle ambiguities when parsing conditional types.\n  __init3() {this.inDisallowConditionalTypesContext = false}\n\n  // Token store.\n  __init4() {this.tokens = []}\n\n  // Array of all observed scopes, ordered by their ending position.\n  __init5() {this.scopes = []}\n\n  // The current position of the tokenizer in the input.\n  __init6() {this.pos = 0}\n\n  // Information about the current token.\n  __init7() {this.type = _types__WEBPACK_IMPORTED_MODULE_1__.TokenType.eof}\n  __init8() {this.contextualKeyword = _keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword.NONE}\n  __init9() {this.start = 0}\n  __init10() {this.end = 0}\n\n  __init11() {this.isType = false}\n  __init12() {this.scopeDepth = 0}\n\n  /**\n   * If the parser is in an error state, then the token is always tt.eof and all functions can\n   * keep executing but should be written so they don't get into an infinite loop in this situation.\n   *\n   * This approach, combined with the ability to snapshot and restore state, allows us to implement\n   * backtracking without exceptions and without needing to explicitly propagate error states\n   * everywhere.\n   */\n  __init13() {this.error = null}\n\n  snapshot() {\n    return new StateSnapshot(\n      this.potentialArrowAt,\n      this.noAnonFunctionType,\n      this.inDisallowConditionalTypesContext,\n      this.tokens.length,\n      this.scopes.length,\n      this.pos,\n      this.type,\n      this.contextualKeyword,\n      this.start,\n      this.end,\n      this.isType,\n      this.scopeDepth,\n      this.error,\n    );\n  }\n\n  restoreFromSnapshot(snapshot) {\n    this.potentialArrowAt = snapshot.potentialArrowAt;\n    this.noAnonFunctionType = snapshot.noAnonFunctionType;\n    this.inDisallowConditionalTypesContext = snapshot.inDisallowConditionalTypesContext;\n    this.tokens.length = snapshot.tokensLength;\n    this.scopes.length = snapshot.scopesLength;\n    this.pos = snapshot.pos;\n    this.type = snapshot.type;\n    this.contextualKeyword = snapshot.contextualKeyword;\n    this.start = snapshot.start;\n    this.end = snapshot.end;\n    this.isType = snapshot.isType;\n    this.scopeDepth = snapshot.scopeDepth;\n    this.error = snapshot.error;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9wYXJzZXIvdG9rZW5pemVyL3N0YXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUM2QztBQUNKOztBQUVsQztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSx5Q0FBeUMsNkNBQTZDLDJFQUEyRSxpQ0FBaUMsaUNBQWlDLGVBQWUsaUJBQWlCLDJDQUEyQyxtQkFBbUIsZUFBZSxxQkFBcUIsNkJBQTZCO0FBQ3hZOztBQUVlLGFBQWEsZ0JBQWdCLGtDQUFrQyxtQ0FBbUMsbUNBQW1DLG1DQUFtQyxtQ0FBbUMsbUNBQW1DLG1DQUFtQyxtQ0FBbUMsbUNBQW1DLG9DQUFvQyxvQ0FBb0Msb0NBQW9DO0FBQ2xkO0FBQ0EsWUFBWTs7QUFFWjtBQUNBLGFBQWE7O0FBRWI7QUFDQSxhQUFhOztBQUViO0FBQ0EsYUFBYTs7QUFFYjtBQUNBLGFBQWE7O0FBRWI7QUFDQSxhQUFhOztBQUViO0FBQ0EsYUFBYSxZQUFZLDZDQUFFO0FBQzNCLGFBQWEseUJBQXlCLHdEQUFpQjtBQUN2RCxhQUFhO0FBQ2IsY0FBYzs7QUFFZCxjQUFjO0FBQ2QsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktbGlicmFyeS1kb2NzLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC9lc20vcGFyc2VyL3Rva2VuaXplci9zdGF0ZS5qcz85NjllIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHtDb250ZXh0dWFsS2V5d29yZH0gZnJvbSBcIi4va2V5d29yZHNcIjtcbmltcG9ydCB7IFRva2VuVHlwZSBhcyB0dH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNsYXNzIFNjb3BlIHtcbiAgXG4gIFxuICBcblxuICBjb25zdHJ1Y3RvcihzdGFydFRva2VuSW5kZXgsIGVuZFRva2VuSW5kZXgsIGlzRnVuY3Rpb25TY29wZSkge1xuICAgIHRoaXMuc3RhcnRUb2tlbkluZGV4ID0gc3RhcnRUb2tlbkluZGV4O1xuICAgIHRoaXMuZW5kVG9rZW5JbmRleCA9IGVuZFRva2VuSW5kZXg7XG4gICAgdGhpcy5pc0Z1bmN0aW9uU2NvcGUgPSBpc0Z1bmN0aW9uU2NvcGU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0YXRlU25hcHNob3Qge1xuICBjb25zdHJ1Y3RvcihcbiAgICAgcG90ZW50aWFsQXJyb3dBdCxcbiAgICAgbm9Bbm9uRnVuY3Rpb25UeXBlLFxuICAgICBpbkRpc2FsbG93Q29uZGl0aW9uYWxUeXBlc0NvbnRleHQsXG4gICAgIHRva2Vuc0xlbmd0aCxcbiAgICAgc2NvcGVzTGVuZ3RoLFxuICAgICBwb3MsXG4gICAgIHR5cGUsXG4gICAgIGNvbnRleHR1YWxLZXl3b3JkLFxuICAgICBzdGFydCxcbiAgICAgZW5kLFxuICAgICBpc1R5cGUsXG4gICAgIHNjb3BlRGVwdGgsXG4gICAgIGVycm9yLFxuICApIHs7dGhpcy5wb3RlbnRpYWxBcnJvd0F0ID0gcG90ZW50aWFsQXJyb3dBdDt0aGlzLm5vQW5vbkZ1bmN0aW9uVHlwZSA9IG5vQW5vbkZ1bmN0aW9uVHlwZTt0aGlzLmluRGlzYWxsb3dDb25kaXRpb25hbFR5cGVzQ29udGV4dCA9IGluRGlzYWxsb3dDb25kaXRpb25hbFR5cGVzQ29udGV4dDt0aGlzLnRva2Vuc0xlbmd0aCA9IHRva2Vuc0xlbmd0aDt0aGlzLnNjb3Blc0xlbmd0aCA9IHNjb3Blc0xlbmd0aDt0aGlzLnBvcyA9IHBvczt0aGlzLnR5cGUgPSB0eXBlO3RoaXMuY29udGV4dHVhbEtleXdvcmQgPSBjb250ZXh0dWFsS2V5d29yZDt0aGlzLnN0YXJ0ID0gc3RhcnQ7dGhpcy5lbmQgPSBlbmQ7dGhpcy5pc1R5cGUgPSBpc1R5cGU7dGhpcy5zY29wZURlcHRoID0gc2NvcGVEZXB0aDt0aGlzLmVycm9yID0gZXJyb3I7fVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZSB7Y29uc3RydWN0b3IoKSB7IFN0YXRlLnByb3RvdHlwZS5fX2luaXQuY2FsbCh0aGlzKTtTdGF0ZS5wcm90b3R5cGUuX19pbml0Mi5jYWxsKHRoaXMpO1N0YXRlLnByb3RvdHlwZS5fX2luaXQzLmNhbGwodGhpcyk7U3RhdGUucHJvdG90eXBlLl9faW5pdDQuY2FsbCh0aGlzKTtTdGF0ZS5wcm90b3R5cGUuX19pbml0NS5jYWxsKHRoaXMpO1N0YXRlLnByb3RvdHlwZS5fX2luaXQ2LmNhbGwodGhpcyk7U3RhdGUucHJvdG90eXBlLl9faW5pdDcuY2FsbCh0aGlzKTtTdGF0ZS5wcm90b3R5cGUuX19pbml0OC5jYWxsKHRoaXMpO1N0YXRlLnByb3RvdHlwZS5fX2luaXQ5LmNhbGwodGhpcyk7U3RhdGUucHJvdG90eXBlLl9faW5pdDEwLmNhbGwodGhpcyk7U3RhdGUucHJvdG90eXBlLl9faW5pdDExLmNhbGwodGhpcyk7U3RhdGUucHJvdG90eXBlLl9faW5pdDEyLmNhbGwodGhpcyk7U3RhdGUucHJvdG90eXBlLl9faW5pdDEzLmNhbGwodGhpcyk7IH1cbiAgLy8gVXNlZCB0byBzaWduaWZ5IHRoZSBzdGFydCBvZiBhIHBvdGVudGlhbCBhcnJvdyBmdW5jdGlvblxuICBfX2luaXQoKSB7dGhpcy5wb3RlbnRpYWxBcnJvd0F0ID0gLTF9XG5cbiAgLy8gVXNlZCBieSBGbG93IHRvIGhhbmRsZSBhbiBlZGdlIGNhc2UgaW52b2x2aW5nIGZ1bmN0aW9uIHR5cGUgcGFyc2luZy5cbiAgX19pbml0MigpIHt0aGlzLm5vQW5vbkZ1bmN0aW9uVHlwZSA9IGZhbHNlfVxuXG4gIC8vIFVzZWQgYnkgVHlwZVNjcmlwdCB0byBoYW5kbGUgYW1iaWd1aXRpZXMgd2hlbiBwYXJzaW5nIGNvbmRpdGlvbmFsIHR5cGVzLlxuICBfX2luaXQzKCkge3RoaXMuaW5EaXNhbGxvd0NvbmRpdGlvbmFsVHlwZXNDb250ZXh0ID0gZmFsc2V9XG5cbiAgLy8gVG9rZW4gc3RvcmUuXG4gIF9faW5pdDQoKSB7dGhpcy50b2tlbnMgPSBbXX1cblxuICAvLyBBcnJheSBvZiBhbGwgb2JzZXJ2ZWQgc2NvcGVzLCBvcmRlcmVkIGJ5IHRoZWlyIGVuZGluZyBwb3NpdGlvbi5cbiAgX19pbml0NSgpIHt0aGlzLnNjb3BlcyA9IFtdfVxuXG4gIC8vIFRoZSBjdXJyZW50IHBvc2l0aW9uIG9mIHRoZSB0b2tlbml6ZXIgaW4gdGhlIGlucHV0LlxuICBfX2luaXQ2KCkge3RoaXMucG9zID0gMH1cblxuICAvLyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCB0b2tlbi5cbiAgX19pbml0NygpIHt0aGlzLnR5cGUgPSB0dC5lb2Z9XG4gIF9faW5pdDgoKSB7dGhpcy5jb250ZXh0dWFsS2V5d29yZCA9IENvbnRleHR1YWxLZXl3b3JkLk5PTkV9XG4gIF9faW5pdDkoKSB7dGhpcy5zdGFydCA9IDB9XG4gIF9faW5pdDEwKCkge3RoaXMuZW5kID0gMH1cblxuICBfX2luaXQxMSgpIHt0aGlzLmlzVHlwZSA9IGZhbHNlfVxuICBfX2luaXQxMigpIHt0aGlzLnNjb3BlRGVwdGggPSAwfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUgcGFyc2VyIGlzIGluIGFuIGVycm9yIHN0YXRlLCB0aGVuIHRoZSB0b2tlbiBpcyBhbHdheXMgdHQuZW9mIGFuZCBhbGwgZnVuY3Rpb25zIGNhblxuICAgKiBrZWVwIGV4ZWN1dGluZyBidXQgc2hvdWxkIGJlIHdyaXR0ZW4gc28gdGhleSBkb24ndCBnZXQgaW50byBhbiBpbmZpbml0ZSBsb29wIGluIHRoaXMgc2l0dWF0aW9uLlxuICAgKlxuICAgKiBUaGlzIGFwcHJvYWNoLCBjb21iaW5lZCB3aXRoIHRoZSBhYmlsaXR5IHRvIHNuYXBzaG90IGFuZCByZXN0b3JlIHN0YXRlLCBhbGxvd3MgdXMgdG8gaW1wbGVtZW50XG4gICAqIGJhY2t0cmFja2luZyB3aXRob3V0IGV4Y2VwdGlvbnMgYW5kIHdpdGhvdXQgbmVlZGluZyB0byBleHBsaWNpdGx5IHByb3BhZ2F0ZSBlcnJvciBzdGF0ZXNcbiAgICogZXZlcnl3aGVyZS5cbiAgICovXG4gIF9faW5pdDEzKCkge3RoaXMuZXJyb3IgPSBudWxsfVxuXG4gIHNuYXBzaG90KCkge1xuICAgIHJldHVybiBuZXcgU3RhdGVTbmFwc2hvdChcbiAgICAgIHRoaXMucG90ZW50aWFsQXJyb3dBdCxcbiAgICAgIHRoaXMubm9Bbm9uRnVuY3Rpb25UeXBlLFxuICAgICAgdGhpcy5pbkRpc2FsbG93Q29uZGl0aW9uYWxUeXBlc0NvbnRleHQsXG4gICAgICB0aGlzLnRva2Vucy5sZW5ndGgsXG4gICAgICB0aGlzLnNjb3Blcy5sZW5ndGgsXG4gICAgICB0aGlzLnBvcyxcbiAgICAgIHRoaXMudHlwZSxcbiAgICAgIHRoaXMuY29udGV4dHVhbEtleXdvcmQsXG4gICAgICB0aGlzLnN0YXJ0LFxuICAgICAgdGhpcy5lbmQsXG4gICAgICB0aGlzLmlzVHlwZSxcbiAgICAgIHRoaXMuc2NvcGVEZXB0aCxcbiAgICAgIHRoaXMuZXJyb3IsXG4gICAgKTtcbiAgfVxuXG4gIHJlc3RvcmVGcm9tU25hcHNob3Qoc25hcHNob3QpIHtcbiAgICB0aGlzLnBvdGVudGlhbEFycm93QXQgPSBzbmFwc2hvdC5wb3RlbnRpYWxBcnJvd0F0O1xuICAgIHRoaXMubm9Bbm9uRnVuY3Rpb25UeXBlID0gc25hcHNob3Qubm9Bbm9uRnVuY3Rpb25UeXBlO1xuICAgIHRoaXMuaW5EaXNhbGxvd0NvbmRpdGlvbmFsVHlwZXNDb250ZXh0ID0gc25hcHNob3QuaW5EaXNhbGxvd0NvbmRpdGlvbmFsVHlwZXNDb250ZXh0O1xuICAgIHRoaXMudG9rZW5zLmxlbmd0aCA9IHNuYXBzaG90LnRva2Vuc0xlbmd0aDtcbiAgICB0aGlzLnNjb3Blcy5sZW5ndGggPSBzbmFwc2hvdC5zY29wZXNMZW5ndGg7XG4gICAgdGhpcy5wb3MgPSBzbmFwc2hvdC5wb3M7XG4gICAgdGhpcy50eXBlID0gc25hcHNob3QudHlwZTtcbiAgICB0aGlzLmNvbnRleHR1YWxLZXl3b3JkID0gc25hcHNob3QuY29udGV4dHVhbEtleXdvcmQ7XG4gICAgdGhpcy5zdGFydCA9IHNuYXBzaG90LnN0YXJ0O1xuICAgIHRoaXMuZW5kID0gc25hcHNob3QuZW5kO1xuICAgIHRoaXMuaXNUeXBlID0gc25hcHNob3QuaXNUeXBlO1xuICAgIHRoaXMuc2NvcGVEZXB0aCA9IHNuYXBzaG90LnNjb3BlRGVwdGg7XG4gICAgdGhpcy5lcnJvciA9IHNuYXBzaG90LmVycm9yO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/state.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/tokenizer/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenType: () => (/* binding */ TokenType),\n/* harmony export */   formatTokenType: () => (/* binding */ formatTokenType)\n/* harmony export */ });\n// Generated file, do not edit! Run \"yarn generate\" to re-generate this file.\n/* istanbul ignore file */\n/**\n * Enum of all token types, with bit fields to signify meaningful properties.\n */\nvar TokenType; (function (TokenType) {\n  // Precedence 0 means not an operator; otherwise it is a positive number up to 12.\n  const PRECEDENCE_MASK = 0xf; TokenType[TokenType[\"PRECEDENCE_MASK\"] = PRECEDENCE_MASK] = \"PRECEDENCE_MASK\";\n  const IS_KEYWORD = 1 << 4; TokenType[TokenType[\"IS_KEYWORD\"] = IS_KEYWORD] = \"IS_KEYWORD\";\n  const IS_ASSIGN = 1 << 5; TokenType[TokenType[\"IS_ASSIGN\"] = IS_ASSIGN] = \"IS_ASSIGN\";\n  const IS_RIGHT_ASSOCIATIVE = 1 << 6; TokenType[TokenType[\"IS_RIGHT_ASSOCIATIVE\"] = IS_RIGHT_ASSOCIATIVE] = \"IS_RIGHT_ASSOCIATIVE\";\n  const IS_PREFIX = 1 << 7; TokenType[TokenType[\"IS_PREFIX\"] = IS_PREFIX] = \"IS_PREFIX\";\n  const IS_POSTFIX = 1 << 8; TokenType[TokenType[\"IS_POSTFIX\"] = IS_POSTFIX] = \"IS_POSTFIX\";\n  const IS_EXPRESSION_START = 1 << 9; TokenType[TokenType[\"IS_EXPRESSION_START\"] = IS_EXPRESSION_START] = \"IS_EXPRESSION_START\";\n\n  const num = 512; TokenType[TokenType[\"num\"] = num] = \"num\"; // num startsExpr\n  const bigint = 1536; TokenType[TokenType[\"bigint\"] = bigint] = \"bigint\"; // bigint startsExpr\n  const decimal = 2560; TokenType[TokenType[\"decimal\"] = decimal] = \"decimal\"; // decimal startsExpr\n  const regexp = 3584; TokenType[TokenType[\"regexp\"] = regexp] = \"regexp\"; // regexp startsExpr\n  const string = 4608; TokenType[TokenType[\"string\"] = string] = \"string\"; // string startsExpr\n  const name = 5632; TokenType[TokenType[\"name\"] = name] = \"name\"; // name startsExpr\n  const eof = 6144; TokenType[TokenType[\"eof\"] = eof] = \"eof\"; // eof\n  const bracketL = 7680; TokenType[TokenType[\"bracketL\"] = bracketL] = \"bracketL\"; // [ startsExpr\n  const bracketR = 8192; TokenType[TokenType[\"bracketR\"] = bracketR] = \"bracketR\"; // ]\n  const braceL = 9728; TokenType[TokenType[\"braceL\"] = braceL] = \"braceL\"; // { startsExpr\n  const braceBarL = 10752; TokenType[TokenType[\"braceBarL\"] = braceBarL] = \"braceBarL\"; // {| startsExpr\n  const braceR = 11264; TokenType[TokenType[\"braceR\"] = braceR] = \"braceR\"; // }\n  const braceBarR = 12288; TokenType[TokenType[\"braceBarR\"] = braceBarR] = \"braceBarR\"; // |}\n  const parenL = 13824; TokenType[TokenType[\"parenL\"] = parenL] = \"parenL\"; // ( startsExpr\n  const parenR = 14336; TokenType[TokenType[\"parenR\"] = parenR] = \"parenR\"; // )\n  const comma = 15360; TokenType[TokenType[\"comma\"] = comma] = \"comma\"; // ,\n  const semi = 16384; TokenType[TokenType[\"semi\"] = semi] = \"semi\"; // ;\n  const colon = 17408; TokenType[TokenType[\"colon\"] = colon] = \"colon\"; // :\n  const doubleColon = 18432; TokenType[TokenType[\"doubleColon\"] = doubleColon] = \"doubleColon\"; // ::\n  const dot = 19456; TokenType[TokenType[\"dot\"] = dot] = \"dot\"; // .\n  const question = 20480; TokenType[TokenType[\"question\"] = question] = \"question\"; // ?\n  const questionDot = 21504; TokenType[TokenType[\"questionDot\"] = questionDot] = \"questionDot\"; // ?.\n  const arrow = 22528; TokenType[TokenType[\"arrow\"] = arrow] = \"arrow\"; // =>\n  const template = 23552; TokenType[TokenType[\"template\"] = template] = \"template\"; // template\n  const ellipsis = 24576; TokenType[TokenType[\"ellipsis\"] = ellipsis] = \"ellipsis\"; // ...\n  const backQuote = 25600; TokenType[TokenType[\"backQuote\"] = backQuote] = \"backQuote\"; // `\n  const dollarBraceL = 27136; TokenType[TokenType[\"dollarBraceL\"] = dollarBraceL] = \"dollarBraceL\"; // ${ startsExpr\n  const at = 27648; TokenType[TokenType[\"at\"] = at] = \"at\"; // @\n  const hash = 29184; TokenType[TokenType[\"hash\"] = hash] = \"hash\"; // # startsExpr\n  const eq = 29728; TokenType[TokenType[\"eq\"] = eq] = \"eq\"; // = isAssign\n  const assign = 30752; TokenType[TokenType[\"assign\"] = assign] = \"assign\"; // _= isAssign\n  const preIncDec = 32640; TokenType[TokenType[\"preIncDec\"] = preIncDec] = \"preIncDec\"; // ++/-- prefix postfix startsExpr\n  const postIncDec = 33664; TokenType[TokenType[\"postIncDec\"] = postIncDec] = \"postIncDec\"; // ++/-- prefix postfix startsExpr\n  const bang = 34432; TokenType[TokenType[\"bang\"] = bang] = \"bang\"; // ! prefix startsExpr\n  const tilde = 35456; TokenType[TokenType[\"tilde\"] = tilde] = \"tilde\"; // ~ prefix startsExpr\n  const pipeline = 35841; TokenType[TokenType[\"pipeline\"] = pipeline] = \"pipeline\"; // |> prec:1\n  const nullishCoalescing = 36866; TokenType[TokenType[\"nullishCoalescing\"] = nullishCoalescing] = \"nullishCoalescing\"; // ?? prec:2\n  const logicalOR = 37890; TokenType[TokenType[\"logicalOR\"] = logicalOR] = \"logicalOR\"; // || prec:2\n  const logicalAND = 38915; TokenType[TokenType[\"logicalAND\"] = logicalAND] = \"logicalAND\"; // && prec:3\n  const bitwiseOR = 39940; TokenType[TokenType[\"bitwiseOR\"] = bitwiseOR] = \"bitwiseOR\"; // | prec:4\n  const bitwiseXOR = 40965; TokenType[TokenType[\"bitwiseXOR\"] = bitwiseXOR] = \"bitwiseXOR\"; // ^ prec:5\n  const bitwiseAND = 41990; TokenType[TokenType[\"bitwiseAND\"] = bitwiseAND] = \"bitwiseAND\"; // & prec:6\n  const equality = 43015; TokenType[TokenType[\"equality\"] = equality] = \"equality\"; // ==/!= prec:7\n  const lessThan = 44040; TokenType[TokenType[\"lessThan\"] = lessThan] = \"lessThan\"; // < prec:8\n  const greaterThan = 45064; TokenType[TokenType[\"greaterThan\"] = greaterThan] = \"greaterThan\"; // > prec:8\n  const relationalOrEqual = 46088; TokenType[TokenType[\"relationalOrEqual\"] = relationalOrEqual] = \"relationalOrEqual\"; // <=/>= prec:8\n  const bitShiftL = 47113; TokenType[TokenType[\"bitShiftL\"] = bitShiftL] = \"bitShiftL\"; // << prec:9\n  const bitShiftR = 48137; TokenType[TokenType[\"bitShiftR\"] = bitShiftR] = \"bitShiftR\"; // >>/>>> prec:9\n  const plus = 49802; TokenType[TokenType[\"plus\"] = plus] = \"plus\"; // + prec:10 prefix startsExpr\n  const minus = 50826; TokenType[TokenType[\"minus\"] = minus] = \"minus\"; // - prec:10 prefix startsExpr\n  const modulo = 51723; TokenType[TokenType[\"modulo\"] = modulo] = \"modulo\"; // % prec:11 startsExpr\n  const star = 52235; TokenType[TokenType[\"star\"] = star] = \"star\"; // * prec:11\n  const slash = 53259; TokenType[TokenType[\"slash\"] = slash] = \"slash\"; // / prec:11\n  const exponent = 54348; TokenType[TokenType[\"exponent\"] = exponent] = \"exponent\"; // ** prec:12 rightAssociative\n  const jsxName = 55296; TokenType[TokenType[\"jsxName\"] = jsxName] = \"jsxName\"; // jsxName\n  const jsxText = 56320; TokenType[TokenType[\"jsxText\"] = jsxText] = \"jsxText\"; // jsxText\n  const jsxEmptyText = 57344; TokenType[TokenType[\"jsxEmptyText\"] = jsxEmptyText] = \"jsxEmptyText\"; // jsxEmptyText\n  const jsxTagStart = 58880; TokenType[TokenType[\"jsxTagStart\"] = jsxTagStart] = \"jsxTagStart\"; // jsxTagStart startsExpr\n  const jsxTagEnd = 59392; TokenType[TokenType[\"jsxTagEnd\"] = jsxTagEnd] = \"jsxTagEnd\"; // jsxTagEnd\n  const typeParameterStart = 60928; TokenType[TokenType[\"typeParameterStart\"] = typeParameterStart] = \"typeParameterStart\"; // typeParameterStart startsExpr\n  const nonNullAssertion = 61440; TokenType[TokenType[\"nonNullAssertion\"] = nonNullAssertion] = \"nonNullAssertion\"; // nonNullAssertion\n  const _break = 62480; TokenType[TokenType[\"_break\"] = _break] = \"_break\"; // break keyword\n  const _case = 63504; TokenType[TokenType[\"_case\"] = _case] = \"_case\"; // case keyword\n  const _catch = 64528; TokenType[TokenType[\"_catch\"] = _catch] = \"_catch\"; // catch keyword\n  const _continue = 65552; TokenType[TokenType[\"_continue\"] = _continue] = \"_continue\"; // continue keyword\n  const _debugger = 66576; TokenType[TokenType[\"_debugger\"] = _debugger] = \"_debugger\"; // debugger keyword\n  const _default = 67600; TokenType[TokenType[\"_default\"] = _default] = \"_default\"; // default keyword\n  const _do = 68624; TokenType[TokenType[\"_do\"] = _do] = \"_do\"; // do keyword\n  const _else = 69648; TokenType[TokenType[\"_else\"] = _else] = \"_else\"; // else keyword\n  const _finally = 70672; TokenType[TokenType[\"_finally\"] = _finally] = \"_finally\"; // finally keyword\n  const _for = 71696; TokenType[TokenType[\"_for\"] = _for] = \"_for\"; // for keyword\n  const _function = 73232; TokenType[TokenType[\"_function\"] = _function] = \"_function\"; // function keyword startsExpr\n  const _if = 73744; TokenType[TokenType[\"_if\"] = _if] = \"_if\"; // if keyword\n  const _return = 74768; TokenType[TokenType[\"_return\"] = _return] = \"_return\"; // return keyword\n  const _switch = 75792; TokenType[TokenType[\"_switch\"] = _switch] = \"_switch\"; // switch keyword\n  const _throw = 77456; TokenType[TokenType[\"_throw\"] = _throw] = \"_throw\"; // throw keyword prefix startsExpr\n  const _try = 77840; TokenType[TokenType[\"_try\"] = _try] = \"_try\"; // try keyword\n  const _var = 78864; TokenType[TokenType[\"_var\"] = _var] = \"_var\"; // var keyword\n  const _let = 79888; TokenType[TokenType[\"_let\"] = _let] = \"_let\"; // let keyword\n  const _const = 80912; TokenType[TokenType[\"_const\"] = _const] = \"_const\"; // const keyword\n  const _while = 81936; TokenType[TokenType[\"_while\"] = _while] = \"_while\"; // while keyword\n  const _with = 82960; TokenType[TokenType[\"_with\"] = _with] = \"_with\"; // with keyword\n  const _new = 84496; TokenType[TokenType[\"_new\"] = _new] = \"_new\"; // new keyword startsExpr\n  const _this = 85520; TokenType[TokenType[\"_this\"] = _this] = \"_this\"; // this keyword startsExpr\n  const _super = 86544; TokenType[TokenType[\"_super\"] = _super] = \"_super\"; // super keyword startsExpr\n  const _class = 87568; TokenType[TokenType[\"_class\"] = _class] = \"_class\"; // class keyword startsExpr\n  const _extends = 88080; TokenType[TokenType[\"_extends\"] = _extends] = \"_extends\"; // extends keyword\n  const _export = 89104; TokenType[TokenType[\"_export\"] = _export] = \"_export\"; // export keyword\n  const _import = 90640; TokenType[TokenType[\"_import\"] = _import] = \"_import\"; // import keyword startsExpr\n  const _yield = 91664; TokenType[TokenType[\"_yield\"] = _yield] = \"_yield\"; // yield keyword startsExpr\n  const _null = 92688; TokenType[TokenType[\"_null\"] = _null] = \"_null\"; // null keyword startsExpr\n  const _true = 93712; TokenType[TokenType[\"_true\"] = _true] = \"_true\"; // true keyword startsExpr\n  const _false = 94736; TokenType[TokenType[\"_false\"] = _false] = \"_false\"; // false keyword startsExpr\n  const _in = 95256; TokenType[TokenType[\"_in\"] = _in] = \"_in\"; // in prec:8 keyword\n  const _instanceof = 96280; TokenType[TokenType[\"_instanceof\"] = _instanceof] = \"_instanceof\"; // instanceof prec:8 keyword\n  const _typeof = 97936; TokenType[TokenType[\"_typeof\"] = _typeof] = \"_typeof\"; // typeof keyword prefix startsExpr\n  const _void = 98960; TokenType[TokenType[\"_void\"] = _void] = \"_void\"; // void keyword prefix startsExpr\n  const _delete = 99984; TokenType[TokenType[\"_delete\"] = _delete] = \"_delete\"; // delete keyword prefix startsExpr\n  const _async = 100880; TokenType[TokenType[\"_async\"] = _async] = \"_async\"; // async keyword startsExpr\n  const _get = 101904; TokenType[TokenType[\"_get\"] = _get] = \"_get\"; // get keyword startsExpr\n  const _set = 102928; TokenType[TokenType[\"_set\"] = _set] = \"_set\"; // set keyword startsExpr\n  const _declare = 103952; TokenType[TokenType[\"_declare\"] = _declare] = \"_declare\"; // declare keyword startsExpr\n  const _readonly = 104976; TokenType[TokenType[\"_readonly\"] = _readonly] = \"_readonly\"; // readonly keyword startsExpr\n  const _abstract = 106000; TokenType[TokenType[\"_abstract\"] = _abstract] = \"_abstract\"; // abstract keyword startsExpr\n  const _static = 107024; TokenType[TokenType[\"_static\"] = _static] = \"_static\"; // static keyword startsExpr\n  const _public = 107536; TokenType[TokenType[\"_public\"] = _public] = \"_public\"; // public keyword\n  const _private = 108560; TokenType[TokenType[\"_private\"] = _private] = \"_private\"; // private keyword\n  const _protected = 109584; TokenType[TokenType[\"_protected\"] = _protected] = \"_protected\"; // protected keyword\n  const _override = 110608; TokenType[TokenType[\"_override\"] = _override] = \"_override\"; // override keyword\n  const _as = 112144; TokenType[TokenType[\"_as\"] = _as] = \"_as\"; // as keyword startsExpr\n  const _enum = 113168; TokenType[TokenType[\"_enum\"] = _enum] = \"_enum\"; // enum keyword startsExpr\n  const _type = 114192; TokenType[TokenType[\"_type\"] = _type] = \"_type\"; // type keyword startsExpr\n  const _implements = 115216; TokenType[TokenType[\"_implements\"] = _implements] = \"_implements\"; // implements keyword startsExpr\n})(TokenType || (TokenType = {}));\nfunction formatTokenType(tokenType) {\n  switch (tokenType) {\n    case TokenType.num:\n      return \"num\";\n    case TokenType.bigint:\n      return \"bigint\";\n    case TokenType.decimal:\n      return \"decimal\";\n    case TokenType.regexp:\n      return \"regexp\";\n    case TokenType.string:\n      return \"string\";\n    case TokenType.name:\n      return \"name\";\n    case TokenType.eof:\n      return \"eof\";\n    case TokenType.bracketL:\n      return \"[\";\n    case TokenType.bracketR:\n      return \"]\";\n    case TokenType.braceL:\n      return \"{\";\n    case TokenType.braceBarL:\n      return \"{|\";\n    case TokenType.braceR:\n      return \"}\";\n    case TokenType.braceBarR:\n      return \"|}\";\n    case TokenType.parenL:\n      return \"(\";\n    case TokenType.parenR:\n      return \")\";\n    case TokenType.comma:\n      return \",\";\n    case TokenType.semi:\n      return \";\";\n    case TokenType.colon:\n      return \":\";\n    case TokenType.doubleColon:\n      return \"::\";\n    case TokenType.dot:\n      return \".\";\n    case TokenType.question:\n      return \"?\";\n    case TokenType.questionDot:\n      return \"?.\";\n    case TokenType.arrow:\n      return \"=>\";\n    case TokenType.template:\n      return \"template\";\n    case TokenType.ellipsis:\n      return \"...\";\n    case TokenType.backQuote:\n      return \"`\";\n    case TokenType.dollarBraceL:\n      return \"${\";\n    case TokenType.at:\n      return \"@\";\n    case TokenType.hash:\n      return \"#\";\n    case TokenType.eq:\n      return \"=\";\n    case TokenType.assign:\n      return \"_=\";\n    case TokenType.preIncDec:\n      return \"++/--\";\n    case TokenType.postIncDec:\n      return \"++/--\";\n    case TokenType.bang:\n      return \"!\";\n    case TokenType.tilde:\n      return \"~\";\n    case TokenType.pipeline:\n      return \"|>\";\n    case TokenType.nullishCoalescing:\n      return \"??\";\n    case TokenType.logicalOR:\n      return \"||\";\n    case TokenType.logicalAND:\n      return \"&&\";\n    case TokenType.bitwiseOR:\n      return \"|\";\n    case TokenType.bitwiseXOR:\n      return \"^\";\n    case TokenType.bitwiseAND:\n      return \"&\";\n    case TokenType.equality:\n      return \"==/!=\";\n    case TokenType.lessThan:\n      return \"<\";\n    case TokenType.greaterThan:\n      return \">\";\n    case TokenType.relationalOrEqual:\n      return \"<=/>=\";\n    case TokenType.bitShiftL:\n      return \"<<\";\n    case TokenType.bitShiftR:\n      return \">>/>>>\";\n    case TokenType.plus:\n      return \"+\";\n    case TokenType.minus:\n      return \"-\";\n    case TokenType.modulo:\n      return \"%\";\n    case TokenType.star:\n      return \"*\";\n    case TokenType.slash:\n      return \"/\";\n    case TokenType.exponent:\n      return \"**\";\n    case TokenType.jsxName:\n      return \"jsxName\";\n    case TokenType.jsxText:\n      return \"jsxText\";\n    case TokenType.jsxEmptyText:\n      return \"jsxEmptyText\";\n    case TokenType.jsxTagStart:\n      return \"jsxTagStart\";\n    case TokenType.jsxTagEnd:\n      return \"jsxTagEnd\";\n    case TokenType.typeParameterStart:\n      return \"typeParameterStart\";\n    case TokenType.nonNullAssertion:\n      return \"nonNullAssertion\";\n    case TokenType._break:\n      return \"break\";\n    case TokenType._case:\n      return \"case\";\n    case TokenType._catch:\n      return \"catch\";\n    case TokenType._continue:\n      return \"continue\";\n    case TokenType._debugger:\n      return \"debugger\";\n    case TokenType._default:\n      return \"default\";\n    case TokenType._do:\n      return \"do\";\n    case TokenType._else:\n      return \"else\";\n    case TokenType._finally:\n      return \"finally\";\n    case TokenType._for:\n      return \"for\";\n    case TokenType._function:\n      return \"function\";\n    case TokenType._if:\n      return \"if\";\n    case TokenType._return:\n      return \"return\";\n    case TokenType._switch:\n      return \"switch\";\n    case TokenType._throw:\n      return \"throw\";\n    case TokenType._try:\n      return \"try\";\n    case TokenType._var:\n      return \"var\";\n    case TokenType._let:\n      return \"let\";\n    case TokenType._const:\n      return \"const\";\n    case TokenType._while:\n      return \"while\";\n    case TokenType._with:\n      return \"with\";\n    case TokenType._new:\n      return \"new\";\n    case TokenType._this:\n      return \"this\";\n    case TokenType._super:\n      return \"super\";\n    case TokenType._class:\n      return \"class\";\n    case TokenType._extends:\n      return \"extends\";\n    case TokenType._export:\n      return \"export\";\n    case TokenType._import:\n      return \"import\";\n    case TokenType._yield:\n      return \"yield\";\n    case TokenType._null:\n      return \"null\";\n    case TokenType._true:\n      return \"true\";\n    case TokenType._false:\n      return \"false\";\n    case TokenType._in:\n      return \"in\";\n    case TokenType._instanceof:\n      return \"instanceof\";\n    case TokenType._typeof:\n      return \"typeof\";\n    case TokenType._void:\n      return \"void\";\n    case TokenType._delete:\n      return \"delete\";\n    case TokenType._async:\n      return \"async\";\n    case TokenType._get:\n      return \"get\";\n    case TokenType._set:\n      return \"set\";\n    case TokenType._declare:\n      return \"declare\";\n    case TokenType._readonly:\n      return \"readonly\";\n    case TokenType._abstract:\n      return \"abstract\";\n    case TokenType._static:\n      return \"static\";\n    case TokenType._public:\n      return \"public\";\n    case TokenType._private:\n      return \"private\";\n    case TokenType._protected:\n      return \"protected\";\n    case TokenType._override:\n      return \"override\";\n    case TokenType._as:\n      return \"as\";\n    case TokenType._enum:\n      return \"enum\";\n    case TokenType._type:\n      return \"type\";\n    case TokenType._implements:\n      return \"implements\";\n    default:\n      return \"\";\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js":
/*!****************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/traverser/base.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Loc: () => (/* binding */ Loc),\n/* harmony export */   augmentError: () => (/* binding */ augmentError),\n/* harmony export */   getNextContextId: () => (/* binding */ getNextContextId),\n/* harmony export */   initParser: () => (/* binding */ initParser),\n/* harmony export */   input: () => (/* binding */ input),\n/* harmony export */   isFlowEnabled: () => (/* binding */ isFlowEnabled),\n/* harmony export */   isJSXEnabled: () => (/* binding */ isJSXEnabled),\n/* harmony export */   isTypeScriptEnabled: () => (/* binding */ isTypeScriptEnabled),\n/* harmony export */   locationForIndex: () => (/* binding */ locationForIndex),\n/* harmony export */   nextContextId: () => (/* binding */ nextContextId),\n/* harmony export */   state: () => (/* binding */ state)\n/* harmony export */ });\n/* harmony import */ var _tokenizer_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tokenizer/state */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/state.js\");\n/* harmony import */ var _util_charcodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/charcodes */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js\");\n\n\n\nlet isJSXEnabled;\nlet isTypeScriptEnabled;\nlet isFlowEnabled;\nlet state;\nlet input;\nlet nextContextId;\n\nfunction getNextContextId() {\n  return nextContextId++;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction augmentError(error) {\n  if (\"pos\" in error) {\n    const loc = locationForIndex(error.pos);\n    error.message += ` (${loc.line}:${loc.column})`;\n    error.loc = loc;\n  }\n  return error;\n}\n\nclass Loc {\n  \n  \n  constructor(line, column) {\n    this.line = line;\n    this.column = column;\n  }\n}\n\nfunction locationForIndex(pos) {\n  let line = 1;\n  let column = 1;\n  for (let i = 0; i < pos; i++) {\n    if (input.charCodeAt(i) === _util_charcodes__WEBPACK_IMPORTED_MODULE_1__.charCodes.lineFeed) {\n      line++;\n      column = 1;\n    } else {\n      column++;\n    }\n  }\n  return new Loc(line, column);\n}\n\nfunction initParser(\n  inputCode,\n  isJSXEnabledArg,\n  isTypeScriptEnabledArg,\n  isFlowEnabledArg,\n) {\n  input = inputCode;\n  state = new _tokenizer_state__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  nextContextId = 1;\n  isJSXEnabled = isJSXEnabledArg;\n  isTypeScriptEnabled = isTypeScriptEnabledArg;\n  isFlowEnabled = isFlowEnabledArg;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9wYXJzZXIvdHJhdmVyc2VyL2Jhc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUF1QztBQUNLOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDUDtBQUNBOztBQUVBO0FBQ087QUFDUDtBQUNBO0FBQ0EsMEJBQTBCLFNBQVMsR0FBRyxXQUFXO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0Esa0JBQWtCLFNBQVM7QUFDM0IsZ0NBQWdDLHNEQUFTO0FBQ3pDO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsd0RBQUs7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3BhcnNlci90cmF2ZXJzZXIvYmFzZS5qcz8zYzdiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdGF0ZSBmcm9tIFwiLi4vdG9rZW5pemVyL3N0YXRlXCI7XG5pbXBvcnQge2NoYXJDb2Rlc30gZnJvbSBcIi4uL3V0aWwvY2hhcmNvZGVzXCI7XG5cbmV4cG9ydCBsZXQgaXNKU1hFbmFibGVkO1xuZXhwb3J0IGxldCBpc1R5cGVTY3JpcHRFbmFibGVkO1xuZXhwb3J0IGxldCBpc0Zsb3dFbmFibGVkO1xuZXhwb3J0IGxldCBzdGF0ZTtcbmV4cG9ydCBsZXQgaW5wdXQ7XG5leHBvcnQgbGV0IG5leHRDb250ZXh0SWQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0Q29udGV4dElkKCkge1xuICByZXR1cm4gbmV4dENvbnRleHRJZCsrO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIGF1Z21lbnRFcnJvcihlcnJvcikge1xuICBpZiAoXCJwb3NcIiBpbiBlcnJvcikge1xuICAgIGNvbnN0IGxvYyA9IGxvY2F0aW9uRm9ySW5kZXgoZXJyb3IucG9zKTtcbiAgICBlcnJvci5tZXNzYWdlICs9IGAgKCR7bG9jLmxpbmV9OiR7bG9jLmNvbHVtbn0pYDtcbiAgICBlcnJvci5sb2MgPSBsb2M7XG4gIH1cbiAgcmV0dXJuIGVycm9yO1xufVxuXG5leHBvcnQgY2xhc3MgTG9jIHtcbiAgXG4gIFxuICBjb25zdHJ1Y3RvcihsaW5lLCBjb2x1bW4pIHtcbiAgICB0aGlzLmxpbmUgPSBsaW5lO1xuICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhdGlvbkZvckluZGV4KHBvcykge1xuICBsZXQgbGluZSA9IDE7XG4gIGxldCBjb2x1bW4gPSAxO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvczsgaSsrKSB7XG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQoaSkgPT09IGNoYXJDb2Rlcy5saW5lRmVlZCkge1xuICAgICAgbGluZSsrO1xuICAgICAgY29sdW1uID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29sdW1uKys7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgTG9jKGxpbmUsIGNvbHVtbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0UGFyc2VyKFxuICBpbnB1dENvZGUsXG4gIGlzSlNYRW5hYmxlZEFyZyxcbiAgaXNUeXBlU2NyaXB0RW5hYmxlZEFyZyxcbiAgaXNGbG93RW5hYmxlZEFyZyxcbikge1xuICBpbnB1dCA9IGlucHV0Q29kZTtcbiAgc3RhdGUgPSBuZXcgU3RhdGUoKTtcbiAgbmV4dENvbnRleHRJZCA9IDE7XG4gIGlzSlNYRW5hYmxlZCA9IGlzSlNYRW5hYmxlZEFyZztcbiAgaXNUeXBlU2NyaXB0RW5hYmxlZCA9IGlzVHlwZVNjcmlwdEVuYWJsZWRBcmc7XG4gIGlzRmxvd0VuYWJsZWQgPSBpc0Zsb3dFbmFibGVkQXJnO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/expression.js":
/*!**********************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/traverser/expression.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StopState: () => (/* binding */ StopState),\n/* harmony export */   atPossibleAsync: () => (/* binding */ atPossibleAsync),\n/* harmony export */   baseParseConditional: () => (/* binding */ baseParseConditional),\n/* harmony export */   baseParseMaybeAssign: () => (/* binding */ baseParseMaybeAssign),\n/* harmony export */   baseParseSubscript: () => (/* binding */ baseParseSubscript),\n/* harmony export */   baseParseSubscripts: () => (/* binding */ baseParseSubscripts),\n/* harmony export */   parseArrow: () => (/* binding */ parseArrow),\n/* harmony export */   parseArrowExpression: () => (/* binding */ parseArrowExpression),\n/* harmony export */   parseCallExpressionArguments: () => (/* binding */ parseCallExpressionArguments),\n/* harmony export */   parseExprAtom: () => (/* binding */ parseExprAtom),\n/* harmony export */   parseExprSubscripts: () => (/* binding */ parseExprSubscripts),\n/* harmony export */   parseExpression: () => (/* binding */ parseExpression),\n/* harmony export */   parseFunctionBody: () => (/* binding */ parseFunctionBody),\n/* harmony export */   parseFunctionBodyAndFinish: () => (/* binding */ parseFunctionBodyAndFinish),\n/* harmony export */   parseIdentifier: () => (/* binding */ parseIdentifier),\n/* harmony export */   parseLiteral: () => (/* binding */ parseLiteral),\n/* harmony export */   parseMaybeAssign: () => (/* binding */ parseMaybeAssign),\n/* harmony export */   parseMaybeUnary: () => (/* binding */ parseMaybeUnary),\n/* harmony export */   parseMethod: () => (/* binding */ parseMethod),\n/* harmony export */   parseObj: () => (/* binding */ parseObj),\n/* harmony export */   parseParenExpression: () => (/* binding */ parseParenExpression),\n/* harmony export */   parsePropertyName: () => (/* binding */ parsePropertyName),\n/* harmony export */   parseTemplate: () => (/* binding */ parseTemplate)\n/* harmony export */ });\n/* harmony import */ var _plugins_flow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../plugins/flow */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/flow.js\");\n/* harmony import */ var _plugins_jsx_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../plugins/jsx/index */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/jsx/index.js\");\n/* harmony import */ var _plugins_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../plugins/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/types.js\");\n/* harmony import */ var _plugins_typescript__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../plugins/typescript */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/typescript.js\");\n/* harmony import */ var _tokenizer_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tokenizer/index */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _tokenizer_state__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../tokenizer/state */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/state.js\");\n/* harmony import */ var _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _util_charcodes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/charcodes */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js\");\n/* harmony import */ var _util_identifier__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/identifier */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/identifier.js\");\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js\");\n/* harmony import */ var _lval__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lval */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/lval.js\");\n/* harmony import */ var _statement__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./statement */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/statement.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/util.js\");\n/* eslint max-len: 0 */\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass StopState {\n  \n  constructor(stop) {\n    this.stop = stop;\n  }\n}\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function (s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\nfunction parseExpression(noIn = false) {\n  parseMaybeAssign(noIn);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.comma)) {\n    while ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.comma)) {\n      parseMaybeAssign(noIn);\n    }\n  }\n}\n\n/**\n * noIn is used when parsing a for loop so that we don't interpret a following \"in\" as the binary\n * operatior.\n * isWithinParens is used to indicate that we're parsing something that might be a comma expression\n * or might be an arrow function or might be a Flow type assertion (which requires explicit parens).\n * In these cases, we should allow : and ?: after the initial \"left\" part.\n */\nfunction parseMaybeAssign(noIn = false, isWithinParens = false) {\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.isTypeScriptEnabled) {\n    return (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_3__.tsParseMaybeAssign)(noIn, isWithinParens);\n  } else if (_base__WEBPACK_IMPORTED_MODULE_10__.isFlowEnabled) {\n    return (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_0__.flowParseMaybeAssign)(noIn, isWithinParens);\n  } else {\n    return baseParseMaybeAssign(noIn, isWithinParens);\n  }\n}\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n// Returns true if the expression was an arrow function.\nfunction baseParseMaybeAssign(noIn, isWithinParens) {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._yield)) {\n    parseYield();\n    return false;\n  }\n\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenL) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.name) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._yield)) {\n    _base__WEBPACK_IMPORTED_MODULE_10__.state.potentialArrowAt = _base__WEBPACK_IMPORTED_MODULE_10__.state.start;\n  }\n\n  const wasArrow = parseMaybeConditional(noIn);\n  if (isWithinParens) {\n    parseParenItem();\n  }\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.state.type & _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.IS_ASSIGN) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n    parseMaybeAssign(noIn);\n    return false;\n  }\n  return wasArrow;\n}\n\n// Parse a ternary conditional (`?:`) operator.\n// Returns true if the expression was an arrow function.\nfunction parseMaybeConditional(noIn) {\n  const wasArrow = parseExprOps(noIn);\n  if (wasArrow) {\n    return true;\n  }\n  parseConditional(noIn);\n  return false;\n}\n\nfunction parseConditional(noIn) {\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.isTypeScriptEnabled || _base__WEBPACK_IMPORTED_MODULE_10__.isFlowEnabled) {\n    (0,_plugins_types__WEBPACK_IMPORTED_MODULE_2__.typedParseConditional)(noIn);\n  } else {\n    baseParseConditional(noIn);\n  }\n}\n\nfunction baseParseConditional(noIn) {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.question)) {\n    parseMaybeAssign();\n    (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.colon);\n    parseMaybeAssign(noIn);\n  }\n}\n\n// Start the precedence parser.\n// Returns true if this was an arrow function\nfunction parseExprOps(noIn) {\n  const startTokenIndex = _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length;\n  const wasArrow = parseMaybeUnary();\n  if (wasArrow) {\n    return true;\n  }\n  parseExprOp(startTokenIndex, -1, noIn);\n  return false;\n}\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\nfunction parseExprOp(startTokenIndex, minPrec, noIn) {\n  if (\n    _base__WEBPACK_IMPORTED_MODULE_10__.isTypeScriptEnabled &&\n    (_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._in & _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.PRECEDENCE_MASK) > minPrec &&\n    !(0,_util__WEBPACK_IMPORTED_MODULE_13__.hasPrecedingLineBreak)() &&\n    ((0,_util__WEBPACK_IMPORTED_MODULE_13__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_5__.ContextualKeyword._as) || (0,_util__WEBPACK_IMPORTED_MODULE_13__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_5__.ContextualKeyword._satisfies))\n  ) {\n    const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.pushTypeContext)(1);\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_3__.tsParseType)();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.popTypeContext)(oldIsType);\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.rescan_gt)();\n    parseExprOp(startTokenIndex, minPrec, noIn);\n    return;\n  }\n\n  const prec = _base__WEBPACK_IMPORTED_MODULE_10__.state.type & _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.PRECEDENCE_MASK;\n  if (prec > 0 && (!noIn || !(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._in))) {\n    if (prec > minPrec) {\n      const op = _base__WEBPACK_IMPORTED_MODULE_10__.state.type;\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n      if (op === _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.nullishCoalescing) {\n        _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].nullishStartIndex = startTokenIndex;\n      }\n\n      const rhsStartTokenIndex = _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length;\n      parseMaybeUnary();\n      // Extend the right operand of this operator if possible.\n      parseExprOp(rhsStartTokenIndex, op & _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.IS_RIGHT_ASSOCIATIVE ? prec - 1 : prec, noIn);\n      if (op === _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.nullishCoalescing) {\n        _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[startTokenIndex].numNullishCoalesceStarts++;\n        _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].numNullishCoalesceEnds++;\n      }\n      // Continue with any future operator holding this expression as the left operand.\n      parseExprOp(startTokenIndex, minPrec, noIn);\n    }\n  }\n}\n\n// Parse unary operators, both prefix and postfix.\n// Returns true if this was an arrow function.\nfunction parseMaybeUnary() {\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.isTypeScriptEnabled && !_base__WEBPACK_IMPORTED_MODULE_10__.isJSXEnabled && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.lessThan)) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_3__.tsParseTypeAssertion)();\n    return false;\n  }\n  if (\n    (0,_util__WEBPACK_IMPORTED_MODULE_13__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_5__.ContextualKeyword._module) &&\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.lookaheadCharCode)() === _util_charcodes__WEBPACK_IMPORTED_MODULE_8__.charCodes.leftCurlyBrace &&\n    !(0,_util__WEBPACK_IMPORTED_MODULE_13__.hasFollowingLineBreak)()\n  ) {\n    parseModuleExpression();\n    return false;\n  }\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.state.type & _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.IS_PREFIX) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n    parseMaybeUnary();\n    return false;\n  }\n\n  const wasArrow = parseExprSubscripts();\n  if (wasArrow) {\n    return true;\n  }\n  while (_base__WEBPACK_IMPORTED_MODULE_10__.state.type & _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.IS_POSTFIX && !(0,_util__WEBPACK_IMPORTED_MODULE_13__.canInsertSemicolon)()) {\n    // The tokenizer calls everything a preincrement, so make it a postincrement when\n    // we see it in that context.\n    if (_base__WEBPACK_IMPORTED_MODULE_10__.state.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.preIncDec) {\n      _base__WEBPACK_IMPORTED_MODULE_10__.state.type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.postIncDec;\n    }\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n  }\n  return false;\n}\n\n// Parse call, dot, and `[]`-subscript expressions.\n// Returns true if this was an arrow function.\nfunction parseExprSubscripts() {\n  const startTokenIndex = _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length;\n  const wasArrow = parseExprAtom();\n  if (wasArrow) {\n    return true;\n  }\n  parseSubscripts(startTokenIndex);\n  // If there was any optional chain operation, the start token would be marked\n  // as such, so also mark the end now.\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length > startTokenIndex && _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[startTokenIndex].isOptionalChainStart) {\n    _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].isOptionalChainEnd = true;\n  }\n  return false;\n}\n\nfunction parseSubscripts(startTokenIndex, noCalls = false) {\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_0__.flowParseSubscripts)(startTokenIndex, noCalls);\n  } else {\n    baseParseSubscripts(startTokenIndex, noCalls);\n  }\n}\n\nfunction baseParseSubscripts(startTokenIndex, noCalls = false) {\n  const stopState = new StopState(false);\n  do {\n    parseSubscript(startTokenIndex, noCalls, stopState);\n  } while (!stopState.stop && !_base__WEBPACK_IMPORTED_MODULE_10__.state.error);\n}\n\nfunction parseSubscript(startTokenIndex, noCalls, stopState) {\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_3__.tsParseSubscript)(startTokenIndex, noCalls, stopState);\n  } else if (_base__WEBPACK_IMPORTED_MODULE_10__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_0__.flowParseSubscript)(startTokenIndex, noCalls, stopState);\n  } else {\n    baseParseSubscript(startTokenIndex, noCalls, stopState);\n  }\n}\n\n/** Set 'state.stop = true' to indicate that we should stop parsing subscripts. */\nfunction baseParseSubscript(\n  startTokenIndex,\n  noCalls,\n  stopState,\n) {\n  if (!noCalls && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.doubleColon)) {\n    parseNoCallExpr();\n    stopState.stop = true;\n    // Propagate startTokenIndex so that `a::b?.()` will keep `a` as the first token. We may want\n    // to revisit this in the future when fully supporting bind syntax.\n    parseSubscripts(startTokenIndex, noCalls);\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.questionDot)) {\n    _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[startTokenIndex].isOptionalChainStart = true;\n    if (noCalls && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenL) {\n      stopState.stop = true;\n      return;\n    }\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n    _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bracketL)) {\n      parseExpression();\n      (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bracketR);\n    } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenL)) {\n      parseCallExpressionArguments();\n    } else {\n      parseMaybePrivateName();\n    }\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.dot)) {\n    _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n    parseMaybePrivateName();\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bracketL)) {\n    _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n    parseExpression();\n    (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bracketR);\n  } else if (!noCalls && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenL)) {\n    if (atPossibleAsync()) {\n      // We see \"async\", but it's possible it's a usage of the name \"async\". Parse as if it's a\n      // function call, and if we see an arrow later, backtrack and re-parse as a parameter list.\n      const snapshot = _base__WEBPACK_IMPORTED_MODULE_10__.state.snapshot();\n      const asyncStartTokenIndex = _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length;\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n      _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n\n      const callContextId = (0,_base__WEBPACK_IMPORTED_MODULE_10__.getNextContextId)();\n\n      _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].contextId = callContextId;\n      parseCallExpressionArguments();\n      _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].contextId = callContextId;\n\n      if (shouldParseAsyncArrow()) {\n        // We hit an arrow, so backtrack and start again parsing function parameters.\n        _base__WEBPACK_IMPORTED_MODULE_10__.state.restoreFromSnapshot(snapshot);\n        stopState.stop = true;\n        _base__WEBPACK_IMPORTED_MODULE_10__.state.scopeDepth++;\n\n        (0,_statement__WEBPACK_IMPORTED_MODULE_12__.parseFunctionParams)();\n        parseAsyncArrowFromCallExpression(asyncStartTokenIndex);\n      }\n    } else {\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n      _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n      const callContextId = (0,_base__WEBPACK_IMPORTED_MODULE_10__.getNextContextId)();\n      _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].contextId = callContextId;\n      parseCallExpressionArguments();\n      _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].contextId = callContextId;\n    }\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.backQuote)) {\n    // Tagged template expression.\n    parseTemplate();\n  } else {\n    stopState.stop = true;\n  }\n}\n\nfunction atPossibleAsync() {\n  // This was made less strict than the original version to avoid passing around nodes, but it\n  // should be safe to have rare false positives here.\n  return (\n    _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_5__.ContextualKeyword._async &&\n    !(0,_util__WEBPACK_IMPORTED_MODULE_13__.canInsertSemicolon)()\n  );\n}\n\nfunction parseCallExpressionArguments() {\n  let first = true;\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenR) && !_base__WEBPACK_IMPORTED_MODULE_10__.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.comma);\n      if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenR)) {\n        break;\n      }\n    }\n\n    parseExprListItem(false);\n  }\n}\n\nfunction shouldParseAsyncArrow() {\n  return (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.colon) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.arrow);\n}\n\nfunction parseAsyncArrowFromCallExpression(startTokenIndex) {\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_3__.tsStartParseAsyncArrowFromCallExpression)();\n  } else if (_base__WEBPACK_IMPORTED_MODULE_10__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_0__.flowStartParseAsyncArrowFromCallExpression)();\n  }\n  (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.arrow);\n  parseArrowExpression(startTokenIndex);\n}\n\n// Parse a no-call expression (like argument of `new` or `::` operators).\n\nfunction parseNoCallExpr() {\n  const startTokenIndex = _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length;\n  parseExprAtom();\n  parseSubscripts(startTokenIndex, true);\n}\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n// Returns true if the parsed expression was an arrow function.\nfunction parseExprAtom() {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.modulo)) {\n    // V8 intrinsic expression. Just parse the identifier, and the function invocation is parsed\n    // naturally.\n    parseIdentifier();\n    return false;\n  }\n\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.jsxText) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.jsxEmptyText)) {\n    parseLiteral();\n    return false;\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.lessThan) && _base__WEBPACK_IMPORTED_MODULE_10__.isJSXEnabled) {\n    _base__WEBPACK_IMPORTED_MODULE_10__.state.type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.jsxTagStart;\n    (0,_plugins_jsx_index__WEBPACK_IMPORTED_MODULE_1__.jsxParseElement)();\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n    return false;\n  }\n\n  const canBeArrow = _base__WEBPACK_IMPORTED_MODULE_10__.state.potentialArrowAt === _base__WEBPACK_IMPORTED_MODULE_10__.state.start;\n  switch (_base__WEBPACK_IMPORTED_MODULE_10__.state.type) {\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.slash:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.assign:\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.retokenizeSlashAsRegex)();\n    // Fall through.\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._super:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._this:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.regexp:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.num:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bigint:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.decimal:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.string:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._null:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._true:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._false:\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n      return false;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._import:\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n      if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.dot)) {\n        // import.meta\n        _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.name;\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n        parseIdentifier();\n      }\n      return false;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.name: {\n      const startTokenIndex = _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length;\n      const functionStart = _base__WEBPACK_IMPORTED_MODULE_10__.state.start;\n      const contextualKeyword = _base__WEBPACK_IMPORTED_MODULE_10__.state.contextualKeyword;\n      parseIdentifier();\n      if (contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_5__.ContextualKeyword._await) {\n        parseAwait();\n        return false;\n      } else if (\n        contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_5__.ContextualKeyword._async &&\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._function) &&\n        !(0,_util__WEBPACK_IMPORTED_MODULE_13__.canInsertSemicolon)()\n      ) {\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n        (0,_statement__WEBPACK_IMPORTED_MODULE_12__.parseFunction)(functionStart, false);\n        return false;\n      } else if (\n        canBeArrow &&\n        contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_5__.ContextualKeyword._async &&\n        !(0,_util__WEBPACK_IMPORTED_MODULE_13__.canInsertSemicolon)() &&\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.name)\n      ) {\n        _base__WEBPACK_IMPORTED_MODULE_10__.state.scopeDepth++;\n        (0,_lval__WEBPACK_IMPORTED_MODULE_11__.parseBindingIdentifier)(false);\n        (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.arrow);\n        // let foo = async bar => {};\n        parseArrowExpression(startTokenIndex);\n        return true;\n      } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._do) && !(0,_util__WEBPACK_IMPORTED_MODULE_13__.canInsertSemicolon)()) {\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n        (0,_statement__WEBPACK_IMPORTED_MODULE_12__.parseBlock)();\n        return false;\n      }\n\n      if (canBeArrow && !(0,_util__WEBPACK_IMPORTED_MODULE_13__.canInsertSemicolon)() && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.arrow)) {\n        _base__WEBPACK_IMPORTED_MODULE_10__.state.scopeDepth++;\n        (0,_lval__WEBPACK_IMPORTED_MODULE_11__.markPriorBindingIdentifier)(false);\n        (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.arrow);\n        parseArrowExpression(startTokenIndex);\n        return true;\n      }\n\n      _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.IdentifierRole.Access;\n      return false;\n    }\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._do: {\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n      (0,_statement__WEBPACK_IMPORTED_MODULE_12__.parseBlock)();\n      return false;\n    }\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenL: {\n      const wasArrow = parseParenAndDistinguishExpression(canBeArrow);\n      return wasArrow;\n    }\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bracketL:\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n      parseExprList(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bracketR, true);\n      return false;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.braceL:\n      parseObj(false, false);\n      return false;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._function:\n      parseFunctionExpression();\n      return false;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.at:\n      (0,_statement__WEBPACK_IMPORTED_MODULE_12__.parseDecorators)();\n    // Fall through.\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._class:\n      (0,_statement__WEBPACK_IMPORTED_MODULE_12__.parseClass)(false);\n      return false;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._new:\n      parseNew();\n      return false;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.backQuote:\n      parseTemplate();\n      return false;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.doubleColon: {\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n      parseNoCallExpr();\n      return false;\n    }\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.hash: {\n      const code = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.lookaheadCharCode)();\n      if (_util_identifier__WEBPACK_IMPORTED_MODULE_9__.IS_IDENTIFIER_START[code] || code === _util_charcodes__WEBPACK_IMPORTED_MODULE_8__.charCodes.backslash) {\n        parseMaybePrivateName();\n      } else {\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n      }\n      // Smart pipeline topic reference.\n      return false;\n    }\n\n    default:\n      (0,_util__WEBPACK_IMPORTED_MODULE_13__.unexpected)();\n      return false;\n  }\n}\n\nfunction parseMaybePrivateName() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.hash);\n  parseIdentifier();\n}\n\nfunction parseFunctionExpression() {\n  const functionStart = _base__WEBPACK_IMPORTED_MODULE_10__.state.start;\n  parseIdentifier();\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.dot)) {\n    // function.sent\n    parseIdentifier();\n  }\n  (0,_statement__WEBPACK_IMPORTED_MODULE_12__.parseFunction)(functionStart, false);\n}\n\nfunction parseLiteral() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n}\n\nfunction parseParenExpression() {\n  (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenL);\n  parseExpression();\n  (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenR);\n}\n\n// Returns true if this was an arrow expression.\nfunction parseParenAndDistinguishExpression(canBeArrow) {\n  // Assume this is a normal parenthesized expression, but if we see an arrow, we'll bail and\n  // start over as a parameter list.\n  const snapshot = _base__WEBPACK_IMPORTED_MODULE_10__.state.snapshot();\n\n  const startTokenIndex = _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length;\n  (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenL);\n\n  let first = true;\n\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenR) && !_base__WEBPACK_IMPORTED_MODULE_10__.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.comma);\n      if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenR)) {\n        break;\n      }\n    }\n\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.ellipsis)) {\n      (0,_lval__WEBPACK_IMPORTED_MODULE_11__.parseRest)(false /* isBlockScope */);\n      parseParenItem();\n      break;\n    } else {\n      parseMaybeAssign(false, true);\n    }\n  }\n\n  (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenR);\n\n  if (canBeArrow && shouldParseArrow()) {\n    const wasArrow = parseArrow();\n    if (wasArrow) {\n      // It was an arrow function this whole time, so start over and parse it as params so that we\n      // get proper token annotations.\n      _base__WEBPACK_IMPORTED_MODULE_10__.state.restoreFromSnapshot(snapshot);\n      _base__WEBPACK_IMPORTED_MODULE_10__.state.scopeDepth++;\n      // Don't specify a context ID because arrow functions don't need a context ID.\n      (0,_statement__WEBPACK_IMPORTED_MODULE_12__.parseFunctionParams)();\n      parseArrow();\n      parseArrowExpression(startTokenIndex);\n      if (_base__WEBPACK_IMPORTED_MODULE_10__.state.error) {\n        // Nevermind! This must have been something that looks very much like an\n        // arrow function but where its \"parameter list\" isn't actually a valid\n        // parameter list. Force non-arrow parsing.\n        // See https://github.com/alangpierce/sucrase/issues/666 for an example.\n        _base__WEBPACK_IMPORTED_MODULE_10__.state.restoreFromSnapshot(snapshot);\n        parseParenAndDistinguishExpression(false);\n        return false;\n      }\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction shouldParseArrow() {\n  return (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.colon) || !(0,_util__WEBPACK_IMPORTED_MODULE_13__.canInsertSemicolon)();\n}\n\n// Returns whether there was an arrow token.\nfunction parseArrow() {\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.isTypeScriptEnabled) {\n    return (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_3__.tsParseArrow)();\n  } else if (_base__WEBPACK_IMPORTED_MODULE_10__.isFlowEnabled) {\n    return (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_0__.flowParseArrow)();\n  } else {\n    return (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.arrow);\n  }\n}\n\nfunction parseParenItem() {\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.isTypeScriptEnabled || _base__WEBPACK_IMPORTED_MODULE_10__.isFlowEnabled) {\n    (0,_plugins_types__WEBPACK_IMPORTED_MODULE_2__.typedParseParenItem)();\n  }\n}\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\nfunction parseNew() {\n  (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType._new);\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.dot)) {\n    // new.target\n    parseIdentifier();\n    return;\n  }\n  parseNewCallee();\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_0__.flowStartParseNewArguments)();\n  }\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenL)) {\n    parseExprList(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenR);\n  }\n}\n\nfunction parseNewCallee() {\n  parseNoCallExpr();\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.questionDot);\n}\n\nfunction parseTemplate() {\n  // Finish `, read quasi\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.nextTemplateToken)();\n  // Finish quasi, read ${\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.nextTemplateToken)();\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.backQuote) && !_base__WEBPACK_IMPORTED_MODULE_10__.state.error) {\n    (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.dollarBraceL);\n    parseExpression();\n    // Finish }, read quasi\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.nextTemplateToken)();\n    // Finish quasi, read either ${ or `\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.nextTemplateToken)();\n  }\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n}\n\n// Parse an object literal or binding pattern.\nfunction parseObj(isPattern, isBlockScope) {\n  // Attach a context ID to the object open and close brace and each object key.\n  const contextId = (0,_base__WEBPACK_IMPORTED_MODULE_10__.getNextContextId)();\n  let first = true;\n\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n  _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].contextId = contextId;\n\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.braceR) && !_base__WEBPACK_IMPORTED_MODULE_10__.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.comma);\n      if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.braceR)) {\n        break;\n      }\n    }\n\n    let isGenerator = false;\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.ellipsis)) {\n      const previousIndex = _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length;\n      (0,_lval__WEBPACK_IMPORTED_MODULE_11__.parseSpread)();\n      if (isPattern) {\n        // Mark role when the only thing being spread over is an identifier.\n        if (_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length === previousIndex + 2) {\n          (0,_lval__WEBPACK_IMPORTED_MODULE_11__.markPriorBindingIdentifier)(isBlockScope);\n        }\n        if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.braceR)) {\n          break;\n        }\n      }\n      continue;\n    }\n\n    if (!isPattern) {\n      isGenerator = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.star);\n    }\n\n    if (!isPattern && (0,_util__WEBPACK_IMPORTED_MODULE_13__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_5__.ContextualKeyword._async)) {\n      if (isGenerator) (0,_util__WEBPACK_IMPORTED_MODULE_13__.unexpected)();\n\n      parseIdentifier();\n      if (\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.colon) ||\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenL) ||\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.braceR) ||\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.eq) ||\n        (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.comma)\n      ) {\n        // This is a key called \"async\" rather than an async function.\n      } else {\n        if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.star)) {\n          (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n          isGenerator = true;\n        }\n        parsePropertyName(contextId);\n      }\n    } else {\n      parsePropertyName(contextId);\n    }\n\n    parseObjPropValue(isPattern, isBlockScope, contextId);\n  }\n\n  _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].contextId = contextId;\n}\n\nfunction isGetterOrSetterMethod(isPattern) {\n  // We go off of the next and don't bother checking if the node key is actually \"get\" or \"set\".\n  // This lets us avoid generating a node, and should only make the validation worse.\n  return (\n    !isPattern &&\n    ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.string) || // get \"string\"() {}\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.num) || // get 1() {}\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bracketL) || // get [\"string\"]() {}\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.name) || // get foo() {}\n      !!(_base__WEBPACK_IMPORTED_MODULE_10__.state.type & _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.IS_KEYWORD)) // get debugger() {}\n  );\n}\n\n// Returns true if this was a method.\nfunction parseObjectMethod(isPattern, objectContextId) {\n  // We don't need to worry about modifiers because object methods can't have optional bodies, so\n  // the start will never be used.\n  const functionStart = _base__WEBPACK_IMPORTED_MODULE_10__.state.start;\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.parenL)) {\n    if (isPattern) (0,_util__WEBPACK_IMPORTED_MODULE_13__.unexpected)();\n    parseMethod(functionStart, /* isConstructor */ false);\n    return true;\n  }\n\n  if (isGetterOrSetterMethod(isPattern)) {\n    parsePropertyName(objectContextId);\n    parseMethod(functionStart, /* isConstructor */ false);\n    return true;\n  }\n  return false;\n}\n\nfunction parseObjectProperty(isPattern, isBlockScope) {\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.colon)) {\n    if (isPattern) {\n      (0,_lval__WEBPACK_IMPORTED_MODULE_11__.parseMaybeDefault)(isBlockScope);\n    } else {\n      parseMaybeAssign(false);\n    }\n    return;\n  }\n\n  // Since there's no colon, we assume this is an object shorthand.\n\n  // If we're in a destructuring, we've now discovered that the key was actually an assignee, so\n  // we need to tag it as a declaration with the appropriate scope. Otherwise, we might need to\n  // transform it on access, so mark it as a normal object shorthand.\n  let identifierRole;\n  if (isPattern) {\n    if (_base__WEBPACK_IMPORTED_MODULE_10__.state.scopeDepth === 0) {\n      identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.IdentifierRole.ObjectShorthandTopLevelDeclaration;\n    } else if (isBlockScope) {\n      identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.IdentifierRole.ObjectShorthandBlockScopedDeclaration;\n    } else {\n      identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.IdentifierRole.ObjectShorthandFunctionScopedDeclaration;\n    }\n  } else {\n    identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.IdentifierRole.ObjectShorthand;\n  }\n  _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].identifierRole = identifierRole;\n\n  // Regardless of whether we know this to be a pattern or if we're in an ambiguous context, allow\n  // parsing as if there's a default value.\n  (0,_lval__WEBPACK_IMPORTED_MODULE_11__.parseMaybeDefault)(isBlockScope, true);\n}\n\nfunction parseObjPropValue(\n  isPattern,\n  isBlockScope,\n  objectContextId,\n) {\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_3__.tsStartParseObjPropValue)();\n  } else if (_base__WEBPACK_IMPORTED_MODULE_10__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_0__.flowStartParseObjPropValue)();\n  }\n  const wasMethod = parseObjectMethod(isPattern, objectContextId);\n  if (!wasMethod) {\n    parseObjectProperty(isPattern, isBlockScope);\n  }\n}\n\nfunction parsePropertyName(objectContextId) {\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_0__.flowParseVariance)();\n  }\n  if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bracketL)) {\n    _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].contextId = objectContextId;\n    parseMaybeAssign();\n    (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bracketR);\n    _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].contextId = objectContextId;\n  } else {\n    if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.num) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.string) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.bigint) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.decimal)) {\n      parseExprAtom();\n    } else {\n      parseMaybePrivateName();\n    }\n\n    _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.IdentifierRole.ObjectKey;\n    _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].contextId = objectContextId;\n  }\n}\n\n// Parse object or class method.\nfunction parseMethod(functionStart, isConstructor) {\n  const funcContextId = (0,_base__WEBPACK_IMPORTED_MODULE_10__.getNextContextId)();\n\n  _base__WEBPACK_IMPORTED_MODULE_10__.state.scopeDepth++;\n  const startTokenIndex = _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length;\n  const allowModifiers = isConstructor; // For TypeScript parameter properties\n  (0,_statement__WEBPACK_IMPORTED_MODULE_12__.parseFunctionParams)(allowModifiers, funcContextId);\n  parseFunctionBodyAndFinish(functionStart, funcContextId);\n  const endTokenIndex = _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length;\n  _base__WEBPACK_IMPORTED_MODULE_10__.state.scopes.push(new _tokenizer_state__WEBPACK_IMPORTED_MODULE_6__.Scope(startTokenIndex, endTokenIndex, true));\n  _base__WEBPACK_IMPORTED_MODULE_10__.state.scopeDepth--;\n}\n\n// Parse arrow function expression.\n// If the parameters are provided, they will be converted to an\n// assignable list.\nfunction parseArrowExpression(startTokenIndex) {\n  parseFunctionBody(true);\n  const endTokenIndex = _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length;\n  _base__WEBPACK_IMPORTED_MODULE_10__.state.scopes.push(new _tokenizer_state__WEBPACK_IMPORTED_MODULE_6__.Scope(startTokenIndex, endTokenIndex, true));\n  _base__WEBPACK_IMPORTED_MODULE_10__.state.scopeDepth--;\n}\n\nfunction parseFunctionBodyAndFinish(functionStart, funcContextId = 0) {\n  if (_base__WEBPACK_IMPORTED_MODULE_10__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_3__.tsParseFunctionBodyAndFinish)(functionStart, funcContextId);\n  } else if (_base__WEBPACK_IMPORTED_MODULE_10__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_0__.flowParseFunctionBodyAndFinish)(funcContextId);\n  } else {\n    parseFunctionBody(false, funcContextId);\n  }\n}\n\nfunction parseFunctionBody(allowExpression, funcContextId = 0) {\n  const isExpression = allowExpression && !(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.braceL);\n\n  if (isExpression) {\n    parseMaybeAssign();\n  } else {\n    (0,_statement__WEBPACK_IMPORTED_MODULE_12__.parseBlock)(true /* isFunctionScope */, funcContextId);\n  }\n}\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\nfunction parseExprList(close, allowEmpty = false) {\n  let first = true;\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(close) && !_base__WEBPACK_IMPORTED_MODULE_10__.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.comma);\n      if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(close)) break;\n    }\n    parseExprListItem(allowEmpty);\n  }\n}\n\nfunction parseExprListItem(allowEmpty) {\n  if (allowEmpty && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.comma)) {\n    // Empty item; nothing more to parse for this item.\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.ellipsis)) {\n    (0,_lval__WEBPACK_IMPORTED_MODULE_11__.parseSpread)();\n    parseParenItem();\n  } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.question)) {\n    // Partial function application proposal.\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n  } else {\n    parseMaybeAssign(false, true);\n  }\n}\n\n// Parse the next token as an identifier.\nfunction parseIdentifier() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n  _base__WEBPACK_IMPORTED_MODULE_10__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_10__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.name;\n}\n\n// Parses await expression inside async function.\nfunction parseAwait() {\n  parseMaybeUnary();\n}\n\n// Parses yield expression inside generator.\nfunction parseYield() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.next)();\n  if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.semi) && !(0,_util__WEBPACK_IMPORTED_MODULE_13__.canInsertSemicolon)()) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_4__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.star);\n    parseMaybeAssign();\n  }\n}\n\n// https://github.com/tc39/proposal-js-module-blocks\nfunction parseModuleExpression() {\n  (0,_util__WEBPACK_IMPORTED_MODULE_13__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_5__.ContextualKeyword._module);\n  (0,_util__WEBPACK_IMPORTED_MODULE_13__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.braceL);\n  // For now, just call parseBlockBody to parse the block. In the future when we\n  // implement full support, we'll want to emit scopes and possibly other\n  // information.\n  (0,_statement__WEBPACK_IMPORTED_MODULE_12__.parseBlockBody)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_7__.TokenType.braceR);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/expression.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/traverser/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseFile: () => (/* binding */ parseFile)\n/* harmony export */ });\n/* harmony import */ var _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tokenizer/index */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _util_charcodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/charcodes */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js\");\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js\");\n/* harmony import */ var _statement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./statement */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/statement.js\");\n\n\n\n\n\n\nfunction parseFile() {\n  // If enabled, skip leading hashbang line.\n  if (\n    _base__WEBPACK_IMPORTED_MODULE_2__.state.pos === 0 &&\n    _base__WEBPACK_IMPORTED_MODULE_2__.input.charCodeAt(0) === _util_charcodes__WEBPACK_IMPORTED_MODULE_1__.charCodes.numberSign &&\n    _base__WEBPACK_IMPORTED_MODULE_2__.input.charCodeAt(1) === _util_charcodes__WEBPACK_IMPORTED_MODULE_1__.charCodes.exclamationMark\n  ) {\n    (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.skipLineComment)(2);\n  }\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.nextToken)();\n  return (0,_statement__WEBPACK_IMPORTED_MODULE_3__.parseTopLevel)();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9wYXJzZXIvdHJhdmVyc2VyL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUM4RDtBQUNsQjtBQUNSO0FBQ007O0FBRW5DO0FBQ1A7QUFDQTtBQUNBLElBQUksd0NBQUs7QUFDVCxJQUFJLHdDQUFLLG1CQUFtQixzREFBUztBQUNyQyxJQUFJLHdDQUFLLG1CQUFtQixzREFBUztBQUNyQztBQUNBLElBQUksaUVBQWU7QUFDbkI7QUFDQSxFQUFFLDJEQUFTO0FBQ1gsU0FBUyx5REFBYTtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3BhcnNlci90cmF2ZXJzZXIvaW5kZXguanM/ZDA3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7bmV4dFRva2VuLCBza2lwTGluZUNvbW1lbnR9IGZyb20gXCIuLi90b2tlbml6ZXIvaW5kZXhcIjtcbmltcG9ydCB7Y2hhckNvZGVzfSBmcm9tIFwiLi4vdXRpbC9jaGFyY29kZXNcIjtcbmltcG9ydCB7aW5wdXQsIHN0YXRlfSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQge3BhcnNlVG9wTGV2ZWx9IGZyb20gXCIuL3N0YXRlbWVudFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VGaWxlKCkge1xuICAvLyBJZiBlbmFibGVkLCBza2lwIGxlYWRpbmcgaGFzaGJhbmcgbGluZS5cbiAgaWYgKFxuICAgIHN0YXRlLnBvcyA9PT0gMCAmJlxuICAgIGlucHV0LmNoYXJDb2RlQXQoMCkgPT09IGNoYXJDb2Rlcy5udW1iZXJTaWduICYmXG4gICAgaW5wdXQuY2hhckNvZGVBdCgxKSA9PT0gY2hhckNvZGVzLmV4Y2xhbWF0aW9uTWFya1xuICApIHtcbiAgICBza2lwTGluZUNvbW1lbnQoMik7XG4gIH1cbiAgbmV4dFRva2VuKCk7XG4gIHJldHVybiBwYXJzZVRvcExldmVsKCk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/lval.js":
/*!****************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/traverser/lval.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   markPriorBindingIdentifier: () => (/* binding */ markPriorBindingIdentifier),\n/* harmony export */   parseBindingAtom: () => (/* binding */ parseBindingAtom),\n/* harmony export */   parseBindingIdentifier: () => (/* binding */ parseBindingIdentifier),\n/* harmony export */   parseBindingList: () => (/* binding */ parseBindingList),\n/* harmony export */   parseImportedIdentifier: () => (/* binding */ parseImportedIdentifier),\n/* harmony export */   parseMaybeDefault: () => (/* binding */ parseMaybeDefault),\n/* harmony export */   parseRest: () => (/* binding */ parseRest),\n/* harmony export */   parseSpread: () => (/* binding */ parseSpread)\n/* harmony export */ });\n/* harmony import */ var _plugins_flow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../plugins/flow */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/flow.js\");\n/* harmony import */ var _plugins_typescript__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../plugins/typescript */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/typescript.js\");\n/* harmony import */ var _tokenizer_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tokenizer/index */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _tokenizer_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js\");\n/* harmony import */ var _expression__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./expression */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/expression.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/util.js\");\n\n\n\n\n\n\n\n\n\nfunction parseSpread() {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.next)();\n  (0,_expression__WEBPACK_IMPORTED_MODULE_6__.parseMaybeAssign)(false);\n}\n\nfunction parseRest(isBlockScope) {\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.next)();\n  parseBindingAtom(isBlockScope);\n}\n\nfunction parseBindingIdentifier(isBlockScope) {\n  (0,_expression__WEBPACK_IMPORTED_MODULE_6__.parseIdentifier)();\n  markPriorBindingIdentifier(isBlockScope);\n}\n\nfunction parseImportedIdentifier() {\n  (0,_expression__WEBPACK_IMPORTED_MODULE_6__.parseIdentifier)();\n  _base__WEBPACK_IMPORTED_MODULE_5__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_5__.state.tokens.length - 1].identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.IdentifierRole.ImportDeclaration;\n}\n\nfunction markPriorBindingIdentifier(isBlockScope) {\n  let identifierRole;\n  if (_base__WEBPACK_IMPORTED_MODULE_5__.state.scopeDepth === 0) {\n    identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.IdentifierRole.TopLevelDeclaration;\n  } else if (isBlockScope) {\n    identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.IdentifierRole.BlockScopedDeclaration;\n  } else {\n    identifierRole = _tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.IdentifierRole.FunctionScopedDeclaration;\n  }\n  _base__WEBPACK_IMPORTED_MODULE_5__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_5__.state.tokens.length - 1].identifierRole = identifierRole;\n}\n\n// Parses lvalue (assignable) atom.\nfunction parseBindingAtom(isBlockScope) {\n  switch (_base__WEBPACK_IMPORTED_MODULE_5__.state.type) {\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_4__.TokenType._this: {\n      // In TypeScript, \"this\" may be the name of a parameter, so allow it.\n      const oldIsType = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.pushTypeContext)(0);\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.next)();\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.popTypeContext)(oldIsType);\n      return;\n    }\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_4__.TokenType._yield:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.name: {\n      _base__WEBPACK_IMPORTED_MODULE_5__.state.type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.name;\n      parseBindingIdentifier(isBlockScope);\n      return;\n    }\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.bracketL: {\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.next)();\n      parseBindingList(_tokenizer_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.bracketR, isBlockScope, true /* allowEmpty */);\n      return;\n    }\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.braceL:\n      (0,_expression__WEBPACK_IMPORTED_MODULE_6__.parseObj)(true, isBlockScope);\n      return;\n\n    default:\n      (0,_util__WEBPACK_IMPORTED_MODULE_7__.unexpected)();\n  }\n}\n\nfunction parseBindingList(\n  close,\n  isBlockScope,\n  allowEmpty = false,\n  allowModifiers = false,\n  contextId = 0,\n) {\n  let first = true;\n\n  let hasRemovedComma = false;\n  const firstItemTokenIndex = _base__WEBPACK_IMPORTED_MODULE_5__.state.tokens.length;\n\n  while (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.eat)(close) && !_base__WEBPACK_IMPORTED_MODULE_5__.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      (0,_util__WEBPACK_IMPORTED_MODULE_7__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.comma);\n      _base__WEBPACK_IMPORTED_MODULE_5__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_5__.state.tokens.length - 1].contextId = contextId;\n      // After a \"this\" type in TypeScript, we need to set the following comma (if any) to also be\n      // a type token so that it will be removed.\n      if (!hasRemovedComma && _base__WEBPACK_IMPORTED_MODULE_5__.state.tokens[firstItemTokenIndex].isType) {\n        _base__WEBPACK_IMPORTED_MODULE_5__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_5__.state.tokens.length - 1].isType = true;\n        hasRemovedComma = true;\n      }\n    }\n    if (allowEmpty && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.comma)) {\n      // Empty item; nothing further to parse for this item.\n    } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.eat)(close)) {\n      break;\n    } else if ((0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.ellipsis)) {\n      parseRest(isBlockScope);\n      parseAssignableListItemTypes();\n      // Support rest element trailing commas allowed by TypeScript <2.9.\n      (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.comma);\n      (0,_util__WEBPACK_IMPORTED_MODULE_7__.expect)(close);\n      break;\n    } else {\n      parseAssignableListItem(allowModifiers, isBlockScope);\n    }\n  }\n}\n\nfunction parseAssignableListItem(allowModifiers, isBlockScope) {\n  if (allowModifiers) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_1__.tsParseModifiers)([\n      _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_3__.ContextualKeyword._public,\n      _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_3__.ContextualKeyword._protected,\n      _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_3__.ContextualKeyword._private,\n      _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_3__.ContextualKeyword._readonly,\n      _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_3__.ContextualKeyword._override,\n    ]);\n  }\n\n  parseMaybeDefault(isBlockScope);\n  parseAssignableListItemTypes();\n  parseMaybeDefault(isBlockScope, true /* leftAlreadyParsed */);\n}\n\nfunction parseAssignableListItemTypes() {\n  if (_base__WEBPACK_IMPORTED_MODULE_5__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_0__.flowParseAssignableListItemTypes)();\n  } else if (_base__WEBPACK_IMPORTED_MODULE_5__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_1__.tsParseAssignableListItemTypes)();\n  }\n}\n\n// Parses assignment pattern around given atom if possible.\nfunction parseMaybeDefault(isBlockScope, leftAlreadyParsed = false) {\n  if (!leftAlreadyParsed) {\n    parseBindingAtom(isBlockScope);\n  }\n  if (!(0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_2__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.eq)) {\n    return;\n  }\n  const eqIndex = _base__WEBPACK_IMPORTED_MODULE_5__.state.tokens.length - 1;\n  (0,_expression__WEBPACK_IMPORTED_MODULE_6__.parseMaybeAssign)();\n  _base__WEBPACK_IMPORTED_MODULE_5__.state.tokens[eqIndex].rhsEndIndex = _base__WEBPACK_IMPORTED_MODULE_5__.state.tokens.length;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/lval.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/statement.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/traverser/statement.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   baseParseExportStar: () => (/* binding */ baseParseExportStar),\n/* harmony export */   baseParseMaybeDecoratorArguments: () => (/* binding */ baseParseMaybeDecoratorArguments),\n/* harmony export */   parseBlock: () => (/* binding */ parseBlock),\n/* harmony export */   parseBlockBody: () => (/* binding */ parseBlockBody),\n/* harmony export */   parseClass: () => (/* binding */ parseClass),\n/* harmony export */   parseClassProperty: () => (/* binding */ parseClassProperty),\n/* harmony export */   parseClassPropertyName: () => (/* binding */ parseClassPropertyName),\n/* harmony export */   parseDecorators: () => (/* binding */ parseDecorators),\n/* harmony export */   parseExport: () => (/* binding */ parseExport),\n/* harmony export */   parseExportFrom: () => (/* binding */ parseExportFrom),\n/* harmony export */   parseExportSpecifiers: () => (/* binding */ parseExportSpecifiers),\n/* harmony export */   parseFunction: () => (/* binding */ parseFunction),\n/* harmony export */   parseFunctionParams: () => (/* binding */ parseFunctionParams),\n/* harmony export */   parseImport: () => (/* binding */ parseImport),\n/* harmony export */   parsePostMemberNameModifiers: () => (/* binding */ parsePostMemberNameModifiers),\n/* harmony export */   parseStatement: () => (/* binding */ parseStatement),\n/* harmony export */   parseTopLevel: () => (/* binding */ parseTopLevel),\n/* harmony export */   parseVarStatement: () => (/* binding */ parseVarStatement)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/index.js\");\n/* harmony import */ var _plugins_flow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../plugins/flow */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/flow.js\");\n/* harmony import */ var _plugins_typescript__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../plugins/typescript */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/typescript.js\");\n/* harmony import */ var _tokenizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tokenizer */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _tokenizer_state__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tokenizer/state */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/state.js\");\n/* harmony import */ var _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _util_charcodes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/charcodes */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js\");\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js\");\n/* harmony import */ var _expression__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./expression */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/expression.js\");\n/* harmony import */ var _lval__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lval */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/lval.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/util.js\");\n/* eslint max-len: 0 */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction parseTopLevel() {\n  parseBlockBody(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.eof);\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.scopes.push(new _tokenizer_state__WEBPACK_IMPORTED_MODULE_5__.Scope(0, _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length, true));\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth !== 0) {\n    throw new Error(`Invalid scope depth at end of file: ${_base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth}`);\n  }\n  return new _index__WEBPACK_IMPORTED_MODULE_0__.File(_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens, _base__WEBPACK_IMPORTED_MODULE_8__.state.scopes);\n}\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\nfunction parseStatement(declaration) {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    if ((0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowTryParseStatement)()) {\n      return;\n    }\n  }\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.at)) {\n    parseDecorators();\n  }\n  parseStatementContent(declaration);\n}\n\nfunction parseStatementContent(declaration) {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    if ((0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsTryParseStatementContent)()) {\n      return;\n    }\n  }\n\n  const starttype = _base__WEBPACK_IMPORTED_MODULE_8__.state.type;\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._break:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._continue:\n      parseBreakContinueStatement();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._debugger:\n      parseDebuggerStatement();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._do:\n      parseDoStatement();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._for:\n      parseForStatement();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._function:\n      if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.dot) break;\n      if (!declaration) (0,_util__WEBPACK_IMPORTED_MODULE_11__.unexpected)();\n      parseFunctionStatement();\n      return;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._class:\n      if (!declaration) (0,_util__WEBPACK_IMPORTED_MODULE_11__.unexpected)();\n      parseClass(true);\n      return;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._if:\n      parseIfStatement();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._return:\n      parseReturnStatement();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._switch:\n      parseSwitchStatement();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._throw:\n      parseThrowStatement();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._try:\n      parseTryStatement();\n      return;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._let:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._const:\n      if (!declaration) (0,_util__WEBPACK_IMPORTED_MODULE_11__.unexpected)(); // NOTE: falls through to _var\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._var:\n      parseVarStatement(starttype !== _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._var);\n      return;\n\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._while:\n      parseWhileStatement();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceL:\n      parseBlock();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.semi:\n      parseEmptyStatement();\n      return;\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._export:\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._import: {\n      const nextType = (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.lookaheadType)();\n      if (nextType === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenL || nextType === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.dot) {\n        break;\n      }\n      (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n      if (starttype === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._import) {\n        parseImport();\n      } else {\n        parseExport();\n      }\n      return;\n    }\n    case _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.name:\n      if (_base__WEBPACK_IMPORTED_MODULE_8__.state.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._async) {\n        const functionStart = _base__WEBPACK_IMPORTED_MODULE_8__.state.start;\n        // peek ahead and see if next token is a function\n        const snapshot = _base__WEBPACK_IMPORTED_MODULE_8__.state.snapshot();\n        (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n        if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._function) && !(0,_util__WEBPACK_IMPORTED_MODULE_11__.canInsertSemicolon)()) {\n          (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._function);\n          parseFunction(functionStart, true);\n          return;\n        } else {\n          _base__WEBPACK_IMPORTED_MODULE_8__.state.restoreFromSnapshot(snapshot);\n        }\n      } else if (\n        _base__WEBPACK_IMPORTED_MODULE_8__.state.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._using &&\n        !(0,_util__WEBPACK_IMPORTED_MODULE_11__.hasFollowingLineBreak)() &&\n        // Statements like `using[0]` and `using in foo` aren't actual using\n        // declarations.\n        (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.name\n      ) {\n        parseVarStatement(true);\n        return;\n      } else if (startsAwaitUsing()) {\n        (0,_util__WEBPACK_IMPORTED_MODULE_11__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._await);\n        parseVarStatement(true);\n        return;\n      }\n    default:\n      // Do nothing.\n      break;\n  }\n\n  // If the statement does not start with a statement keyword or a\n  // brace, it's an ExpressionStatement or LabeledStatement. We\n  // simply start parsing an expression, and afterwards, if the\n  // next token is a colon and the expression was a simple\n  // Identifier node, we switch to interpreting it as a label.\n  const initialTokensLength = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n  (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseExpression)();\n  let simpleName = null;\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length === initialTokensLength + 1) {\n    const token = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1];\n    if (token.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.name) {\n      simpleName = token.contextualKeyword;\n    }\n  }\n  if (simpleName == null) {\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.semicolon)();\n    return;\n  }\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.colon)) {\n    parseLabeledStatement();\n  } else {\n    // This was an identifier, so we might want to handle flow/typescript-specific cases.\n    parseIdentifierStatement(simpleName);\n  }\n}\n\n/**\n * Determine if we're positioned at an `await using` declaration.\n *\n * Note that this can happen either in place of a regular variable declaration\n * or in a loop body, and in both places, there are similar-looking cases where\n * we need to return false.\n *\n * Examples returning true:\n * await using foo = bar();\n * for (await using a of b) {}\n *\n * Examples returning false:\n * await using\n * await using + 1\n * await using instanceof T\n * for (await using;;) {}\n *\n * For now, we early return if we don't see `await`, then do a simple\n * backtracking-based lookahead for the `using` and identifier tokens. In the\n * future, this could be optimized with a character-based approach.\n */\nfunction startsAwaitUsing() {\n  if (!(0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._await)) {\n    return false;\n  }\n  const snapshot = _base__WEBPACK_IMPORTED_MODULE_8__.state.snapshot();\n  // await\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  if (!(0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._using) || (0,_util__WEBPACK_IMPORTED_MODULE_11__.hasPrecedingLineBreak)()) {\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.restoreFromSnapshot(snapshot);\n    return false;\n  }\n  // using\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  if (!(0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.name) || (0,_util__WEBPACK_IMPORTED_MODULE_11__.hasPrecedingLineBreak)()) {\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.restoreFromSnapshot(snapshot);\n    return false;\n  }\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.restoreFromSnapshot(snapshot);\n  return true;\n}\n\nfunction parseDecorators() {\n  while ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.at)) {\n    parseDecorator();\n  }\n}\n\nfunction parseDecorator() {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenL)) {\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseExpression)();\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenR);\n  } else {\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseIdentifier)();\n    while ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.dot)) {\n      (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseIdentifier)();\n    }\n    parseMaybeDecoratorArguments();\n  }\n}\n\nfunction parseMaybeDecoratorArguments() {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsParseMaybeDecoratorArguments)();\n  } else {\n    baseParseMaybeDecoratorArguments();\n  }\n}\n\nfunction baseParseMaybeDecoratorArguments() {\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenL)) {\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseCallExpressionArguments)();\n  }\n}\n\nfunction parseBreakContinueStatement() {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  if (!(0,_util__WEBPACK_IMPORTED_MODULE_11__.isLineTerminator)()) {\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseIdentifier)();\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.semicolon)();\n  }\n}\n\nfunction parseDebuggerStatement() {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.semicolon)();\n}\n\nfunction parseDoStatement() {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  parseStatement(false);\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._while);\n  (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseParenExpression)();\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.semi);\n}\n\nfunction parseForStatement() {\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth++;\n  const startTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n  parseAmbiguousForStatement();\n  const endTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.scopes.push(new _tokenizer_state__WEBPACK_IMPORTED_MODULE_5__.Scope(startTokenIndex, endTokenIndex, false));\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth--;\n}\n\n/**\n * Determine if this token is a `using` declaration (explicit resource\n * management) as part of a loop.\n * https://github.com/tc39/proposal-explicit-resource-management\n */\nfunction isUsingInLoop() {\n  if (!(0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._using)) {\n    return false;\n  }\n  // This must be `for (using of`, where `using` is the name of the loop\n  // variable.\n  if ((0,_util__WEBPACK_IMPORTED_MODULE_11__.isLookaheadContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._of)) {\n    return false;\n  }\n  return true;\n}\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\nfunction parseAmbiguousForStatement() {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n\n  let forAwait = false;\n  if ((0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._await)) {\n    forAwait = true;\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  }\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenL);\n\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.semi)) {\n    if (forAwait) {\n      (0,_util__WEBPACK_IMPORTED_MODULE_11__.unexpected)();\n    }\n    parseFor();\n    return;\n  }\n\n  const isAwaitUsing = startsAwaitUsing();\n  if (isAwaitUsing || (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._var) || (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._let) || (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._const) || isUsingInLoop()) {\n    if (isAwaitUsing) {\n      (0,_util__WEBPACK_IMPORTED_MODULE_11__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._await);\n    }\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n    parseVar(true, _base__WEBPACK_IMPORTED_MODULE_8__.state.type !== _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._var);\n    if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._in) || (0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._of)) {\n      parseForIn(forAwait);\n      return;\n    }\n    parseFor();\n    return;\n  }\n\n  (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseExpression)(true);\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._in) || (0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._of)) {\n    parseForIn(forAwait);\n    return;\n  }\n  if (forAwait) {\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.unexpected)();\n  }\n  parseFor();\n}\n\nfunction parseFunctionStatement() {\n  const functionStart = _base__WEBPACK_IMPORTED_MODULE_8__.state.start;\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  parseFunction(functionStart, true);\n}\n\nfunction parseIfStatement() {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseParenExpression)();\n  parseStatement(false);\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._else)) {\n    parseStatement(false);\n  }\n}\n\nfunction parseReturnStatement() {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (!(0,_util__WEBPACK_IMPORTED_MODULE_11__.isLineTerminator)()) {\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseExpression)();\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.semicolon)();\n  }\n}\n\nfunction parseSwitchStatement() {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseParenExpression)();\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth++;\n  const startTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceL);\n\n  // Don't bother validation; just go through any sequence of cases, defaults, and statements.\n  while (!(0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceR) && !_base__WEBPACK_IMPORTED_MODULE_8__.state.error) {\n    if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._case) || (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._default)) {\n      const isCase = (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._case);\n      (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n      if (isCase) {\n        (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseExpression)();\n      }\n      (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.colon);\n    } else {\n      parseStatement(true);\n    }\n  }\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)(); // Closing brace\n  const endTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.scopes.push(new _tokenizer_state__WEBPACK_IMPORTED_MODULE_5__.Scope(startTokenIndex, endTokenIndex, false));\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth--;\n}\n\nfunction parseThrowStatement() {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseExpression)();\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.semicolon)();\n}\n\nfunction parseCatchClauseParam() {\n  (0,_lval__WEBPACK_IMPORTED_MODULE_10__.parseBindingAtom)(true /* isBlockScope */);\n\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsTryParseTypeAnnotation)();\n  }\n}\n\nfunction parseTryStatement() {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n\n  parseBlock();\n\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._catch)) {\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n    let catchBindingStartTokenIndex = null;\n    if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenL)) {\n      _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth++;\n      catchBindingStartTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n      (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenL);\n      parseCatchClauseParam();\n      (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenR);\n    }\n    parseBlock();\n    if (catchBindingStartTokenIndex != null) {\n      // We need a special scope for the catch binding which includes the binding itself and the\n      // catch block.\n      const endTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n      _base__WEBPACK_IMPORTED_MODULE_8__.state.scopes.push(new _tokenizer_state__WEBPACK_IMPORTED_MODULE_5__.Scope(catchBindingStartTokenIndex, endTokenIndex, false));\n      _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth--;\n    }\n  }\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._finally)) {\n    parseBlock();\n  }\n}\n\nfunction parseVarStatement(isBlockScope) {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  parseVar(false, isBlockScope);\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.semicolon)();\n}\n\nfunction parseWhileStatement() {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseParenExpression)();\n  parseStatement(false);\n}\n\nfunction parseEmptyStatement() {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n}\n\nfunction parseLabeledStatement() {\n  parseStatement(true);\n}\n\n/**\n * Parse a statement starting with an identifier of the given name. Subclasses match on the name\n * to handle statements like \"declare\".\n */\nfunction parseIdentifierStatement(contextualKeyword) {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsParseIdentifierStatement)(contextualKeyword);\n  } else if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowParseIdentifierStatement)(contextualKeyword);\n  } else {\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.semicolon)();\n  }\n}\n\n// Parse a semicolon-enclosed block of statements.\nfunction parseBlock(isFunctionScope = false, contextId = 0) {\n  const startTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth++;\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceL);\n  if (contextId) {\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].contextId = contextId;\n  }\n  parseBlockBody(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceR);\n  if (contextId) {\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].contextId = contextId;\n  }\n  const endTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.scopes.push(new _tokenizer_state__WEBPACK_IMPORTED_MODULE_5__.Scope(startTokenIndex, endTokenIndex, isFunctionScope));\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth--;\n}\n\nfunction parseBlockBody(end) {\n  while (!(0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(end) && !_base__WEBPACK_IMPORTED_MODULE_8__.state.error) {\n    parseStatement(true);\n  }\n}\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\nfunction parseFor() {\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.semi);\n  if (!(0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.semi)) {\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseExpression)();\n  }\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.semi);\n  if (!(0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenR)) {\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseExpression)();\n  }\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenR);\n  parseStatement(false);\n}\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\nfunction parseForIn(forAwait) {\n  if (forAwait) {\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._of);\n  } else {\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  }\n  (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseExpression)();\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenR);\n  parseStatement(false);\n}\n\n// Parse a list of variable declarations.\n\nfunction parseVar(isFor, isBlockScope) {\n  while (true) {\n    parseVarHead(isBlockScope);\n    if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.eq)) {\n      const eqIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1;\n      (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseMaybeAssign)(isFor);\n      _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[eqIndex].rhsEndIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n    }\n    if (!(0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.comma)) {\n      break;\n    }\n  }\n}\n\nfunction parseVarHead(isBlockScope) {\n  (0,_lval__WEBPACK_IMPORTED_MODULE_10__.parseBindingAtom)(isBlockScope);\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsAfterParseVarHead)();\n  } else if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowAfterParseVarHead)();\n  }\n}\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\nfunction parseFunction(\n  functionStart,\n  isStatement,\n  optionalId = false,\n) {\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.star)) {\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  }\n\n  if (isStatement && !optionalId && !(0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.name) && !(0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._yield)) {\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.unexpected)();\n  }\n\n  let nameScopeStartTokenIndex = null;\n\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.name)) {\n    // Expression-style functions should limit their name's scope to the function body, so we make\n    // a new function scope to enforce that.\n    if (!isStatement) {\n      nameScopeStartTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n      _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth++;\n    }\n    (0,_lval__WEBPACK_IMPORTED_MODULE_10__.parseBindingIdentifier)(false);\n  }\n\n  const startTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth++;\n  parseFunctionParams();\n  (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseFunctionBodyAndFinish)(functionStart);\n  const endTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n  // In addition to the block scope of the function body, we need a separate function-style scope\n  // that includes the params.\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.scopes.push(new _tokenizer_state__WEBPACK_IMPORTED_MODULE_5__.Scope(startTokenIndex, endTokenIndex, true));\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth--;\n  if (nameScopeStartTokenIndex !== null) {\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.scopes.push(new _tokenizer_state__WEBPACK_IMPORTED_MODULE_5__.Scope(nameScopeStartTokenIndex, endTokenIndex, true));\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth--;\n  }\n}\n\nfunction parseFunctionParams(\n  allowModifiers = false,\n  funcContextId = 0,\n) {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsStartParseFunctionParams)();\n  } else if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowStartParseFunctionParams)();\n  }\n\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenL);\n  if (funcContextId) {\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].contextId = funcContextId;\n  }\n  (0,_lval__WEBPACK_IMPORTED_MODULE_10__.parseBindingList)(\n    _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenR,\n    false /* isBlockScope */,\n    false /* allowEmpty */,\n    allowModifiers,\n    funcContextId,\n  );\n  if (funcContextId) {\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].contextId = funcContextId;\n  }\n}\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\nfunction parseClass(isStatement, optionalId = false) {\n  // Put a context ID on the class keyword, the open-brace, and the close-brace, so that later\n  // code can easily navigate to meaningful points on the class.\n  const contextId = (0,_base__WEBPACK_IMPORTED_MODULE_8__.getNextContextId)();\n\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].contextId = contextId;\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].isExpression = !isStatement;\n  // Like with functions, we declare a special \"name scope\" from the start of the name to the end\n  // of the class, but only with expression-style classes, to represent the fact that the name is\n  // available to the body of the class but not an outer declaration.\n  let nameScopeStartTokenIndex = null;\n  if (!isStatement) {\n    nameScopeStartTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth++;\n  }\n  parseClassId(isStatement, optionalId);\n  parseClassSuper();\n  const openBraceIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n  parseClassBody(contextId);\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.state.error) {\n    return;\n  }\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[openBraceIndex].contextId = contextId;\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].contextId = contextId;\n  if (nameScopeStartTokenIndex !== null) {\n    const endTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.scopes.push(new _tokenizer_state__WEBPACK_IMPORTED_MODULE_5__.Scope(nameScopeStartTokenIndex, endTokenIndex, false));\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.scopeDepth--;\n  }\n}\n\nfunction isClassProperty() {\n  return (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.eq) || (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.semi) || (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceR) || (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.bang) || (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.colon);\n}\n\nfunction isClassMethod() {\n  return (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.parenL) || (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.lessThan);\n}\n\nfunction parseClassBody(classContextId) {\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceL);\n\n  while (!(0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceR) && !_base__WEBPACK_IMPORTED_MODULE_8__.state.error) {\n    if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.semi)) {\n      continue;\n    }\n\n    if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.at)) {\n      parseDecorator();\n      continue;\n    }\n    const memberStart = _base__WEBPACK_IMPORTED_MODULE_8__.state.start;\n    parseClassMember(memberStart, classContextId);\n  }\n}\n\nfunction parseClassMember(memberStart, classContextId) {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsParseModifiers)([\n      _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._declare,\n      _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._public,\n      _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._protected,\n      _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._private,\n      _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._override,\n    ]);\n  }\n  let isStatic = false;\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.name) && _base__WEBPACK_IMPORTED_MODULE_8__.state.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._static) {\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseIdentifier)(); // eats 'static'\n    if (isClassMethod()) {\n      parseClassMethod(memberStart, /* isConstructor */ false);\n      return;\n    } else if (isClassProperty()) {\n      parseClassProperty();\n      return;\n    }\n    // otherwise something static\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._static;\n    isStatic = true;\n\n    if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceL)) {\n      // This is a static block. Mark the word \"static\" with the class context ID for class element\n      // detection and parse as a regular block.\n      _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].contextId = classContextId;\n      parseBlock();\n      return;\n    }\n  }\n\n  parseClassMemberWithIsStatic(memberStart, isStatic, classContextId);\n}\n\nfunction parseClassMemberWithIsStatic(\n  memberStart,\n  isStatic,\n  classContextId,\n) {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    if ((0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsTryParseClassMemberWithIsStatic)(isStatic)) {\n      return;\n    }\n  }\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.star)) {\n    // a generator\n    parseClassPropertyName(classContextId);\n    parseClassMethod(memberStart, /* isConstructor */ false);\n    return;\n  }\n\n  // Get the identifier name so we can tell if it's actually a keyword like \"async\", \"get\", or\n  // \"set\".\n  parseClassPropertyName(classContextId);\n  let isConstructor = false;\n  const token = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1];\n  // We allow \"constructor\" as either an identifier or a string.\n  if (token.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._constructor) {\n    isConstructor = true;\n  }\n  parsePostMemberNameModifiers();\n\n  if (isClassMethod()) {\n    parseClassMethod(memberStart, isConstructor);\n  } else if (isClassProperty()) {\n    parseClassProperty();\n  } else if (token.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._async && !(0,_util__WEBPACK_IMPORTED_MODULE_11__.isLineTerminator)()) {\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._async;\n    // an async method\n    const isGenerator = (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.star);\n    if (isGenerator) {\n      (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n    }\n\n    // The so-called parsed name would have been \"async\": get the real name.\n    parseClassPropertyName(classContextId);\n    parsePostMemberNameModifiers();\n    parseClassMethod(memberStart, false /* isConstructor */);\n  } else if (\n    (token.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._get ||\n      token.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._set) &&\n    !((0,_util__WEBPACK_IMPORTED_MODULE_11__.isLineTerminator)() && (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.star))\n  ) {\n    if (token.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._get) {\n      _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._get;\n    } else {\n      _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._set;\n    }\n    // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n    // a getter or setter\n    // The so-called parsed name would have been \"get/set\": get the real name.\n    parseClassPropertyName(classContextId);\n    parseClassMethod(memberStart, /* isConstructor */ false);\n  } else if (token.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._accessor && !(0,_util__WEBPACK_IMPORTED_MODULE_11__.isLineTerminator)()) {\n    parseClassPropertyName(classContextId);\n    parseClassProperty();\n  } else if ((0,_util__WEBPACK_IMPORTED_MODULE_11__.isLineTerminator)()) {\n    // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n    parseClassProperty();\n  } else {\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.unexpected)();\n  }\n}\n\nfunction parseClassMethod(functionStart, isConstructor) {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsTryParseTypeParameters)();\n  } else if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.lessThan)) {\n      (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowParseTypeParameterDeclaration)();\n    }\n  }\n  (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseMethod)(functionStart, isConstructor);\n}\n\n// Return the name of the class property, if it is a simple identifier.\nfunction parseClassPropertyName(classContextId) {\n  (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parsePropertyName)(classContextId);\n}\n\nfunction parsePostMemberNameModifiers() {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    const oldIsType = (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.pushTypeContext)(0);\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.question);\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.popTypeContext)(oldIsType);\n  }\n}\n\nfunction parseClassProperty() {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eatTypeToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.bang);\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsTryParseTypeAnnotation)();\n  } else if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.colon)) {\n      (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowParseTypeAnnotation)();\n    }\n  }\n\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.eq)) {\n    const equalsTokenIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseMaybeAssign)();\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[equalsTokenIndex].rhsEndIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n  }\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.semicolon)();\n}\n\nfunction parseClassId(isStatement, optionalId = false) {\n  if (\n    _base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled &&\n    (!isStatement || optionalId) &&\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._implements)\n  ) {\n    return;\n  }\n\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.name)) {\n    (0,_lval__WEBPACK_IMPORTED_MODULE_10__.parseBindingIdentifier)(true);\n  }\n\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsTryParseTypeParameters)();\n  } else if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.lessThan)) {\n      (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowParseTypeParameterDeclaration)();\n    }\n  }\n}\n\n// Returns true if there was a superclass.\nfunction parseClassSuper() {\n  let hasSuper = false;\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._extends)) {\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseExprSubscripts)();\n    hasSuper = true;\n  } else {\n    hasSuper = false;\n  }\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsAfterParseClassSuper)(hasSuper);\n  } else if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowAfterParseClassSuper)(hasSuper);\n  }\n}\n\n// Parses module export declaration.\n\nfunction parseExport() {\n  const exportIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1;\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    if ((0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsTryParseExport)()) {\n      return;\n    }\n  }\n  // export * from '...'\n  if (shouldParseExportStar()) {\n    parseExportStar();\n  } else if (isExportDefaultSpecifier()) {\n    // export default from\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseIdentifier)();\n    if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.comma) && (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.star) {\n      (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.comma);\n      (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.star);\n      (0,_util__WEBPACK_IMPORTED_MODULE_11__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._as);\n      (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseIdentifier)();\n    } else {\n      parseExportSpecifiersMaybe();\n    }\n    parseExportFrom();\n  } else if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._default)) {\n    // export default ...\n    parseExportDefaultExpression();\n  } else if (shouldParseExportDeclaration()) {\n    parseExportDeclaration();\n  } else {\n    // export { x, y as z } [from '...']\n    parseExportSpecifiers();\n    parseExportFrom();\n  }\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[exportIndex].rhsEndIndex = _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length;\n}\n\nfunction parseExportDefaultExpression() {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    if ((0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsTryParseExportDefaultExpression)()) {\n      return;\n    }\n  }\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    if ((0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowTryParseExportDefaultExpression)()) {\n      return;\n    }\n  }\n  const functionStart = _base__WEBPACK_IMPORTED_MODULE_8__.state.start;\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._function)) {\n    parseFunction(functionStart, true, true);\n  } else if ((0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._async) && (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._function) {\n    // async function declaration\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._async);\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._function);\n    parseFunction(functionStart, true, true);\n  } else if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._class)) {\n    parseClass(true, true);\n  } else if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.at)) {\n    parseDecorators();\n    parseClass(true, true);\n  } else {\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseMaybeAssign)();\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.semicolon)();\n  }\n}\n\nfunction parseExportDeclaration() {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsParseExportDeclaration)();\n  } else if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowParseExportDeclaration)();\n  } else {\n    parseStatement(true);\n  }\n}\n\nfunction isExportDefaultSpecifier() {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled && (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsIsDeclarationStart)()) {\n    return false;\n  } else if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled && (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowShouldDisallowExportDefaultSpecifier)()) {\n    return false;\n  }\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.name)) {\n    return _base__WEBPACK_IMPORTED_MODULE_8__.state.contextualKeyword !== _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._async;\n  }\n\n  if (!(0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._default)) {\n    return false;\n  }\n\n  const _next = (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.nextTokenStart)();\n  const lookahead = (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.lookaheadTypeAndKeyword)();\n  const hasFrom =\n    lookahead.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.name && lookahead.contextualKeyword === _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._from;\n  if (lookahead.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.comma) {\n    return true;\n  }\n  // lookahead again when `export default from` is seen\n  if (hasFrom) {\n    const nextAfterFrom = _base__WEBPACK_IMPORTED_MODULE_8__.input.charCodeAt((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.nextTokenStartSince)(_next + 4));\n    return nextAfterFrom === _util_charcodes__WEBPACK_IMPORTED_MODULE_7__.charCodes.quotationMark || nextAfterFrom === _util_charcodes__WEBPACK_IMPORTED_MODULE_7__.charCodes.apostrophe;\n  }\n  return false;\n}\n\nfunction parseExportSpecifiersMaybe() {\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.comma)) {\n    parseExportSpecifiers();\n  }\n}\n\nfunction parseExportFrom() {\n  if ((0,_util__WEBPACK_IMPORTED_MODULE_11__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._from)) {\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseExprAtom)();\n    maybeParseImportAttributes();\n  }\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.semicolon)();\n}\n\nfunction shouldParseExportStar() {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    return (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowShouldParseExportStar)();\n  } else {\n    return (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.star);\n  }\n}\n\nfunction parseExportStar() {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowParseExportStar)();\n  } else {\n    baseParseExportStar();\n  }\n}\n\nfunction baseParseExportStar() {\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.star);\n\n  if ((0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._as)) {\n    parseExportNamespace();\n  } else {\n    parseExportFrom();\n  }\n}\n\nfunction parseExportNamespace() {\n  (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].type = _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._as;\n  (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseIdentifier)();\n  parseExportSpecifiersMaybe();\n  parseExportFrom();\n}\n\nfunction shouldParseExportDeclaration() {\n  return (\n    (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled && (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsIsDeclarationStart)()) ||\n    (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled && (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowShouldParseExportDeclaration)()) ||\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._var ||\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._const ||\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._let ||\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._function ||\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._class ||\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._async) ||\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.at)\n  );\n}\n\n// Parses a comma-separated list of module exports.\nfunction parseExportSpecifiers() {\n  let first = true;\n\n  // export { x, y as z } [from '...']\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceL);\n\n  while (!(0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceR) && !_base__WEBPACK_IMPORTED_MODULE_8__.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.comma);\n      if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceR)) {\n        break;\n      }\n    }\n    parseExportSpecifier();\n  }\n}\n\nfunction parseExportSpecifier() {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsParseExportSpecifier)();\n    return;\n  }\n  (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseIdentifier)();\n  _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].identifierRole = _tokenizer__WEBPACK_IMPORTED_MODULE_3__.IdentifierRole.ExportAccess;\n  if ((0,_util__WEBPACK_IMPORTED_MODULE_11__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._as)) {\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseIdentifier)();\n  }\n}\n\n/**\n * Starting at the `module` token in an import, determine if it was truly an\n * import reflection token or just looks like one.\n *\n * Returns true for:\n * import module foo from \"foo\";\n * import module from from \"foo\";\n *\n * Returns false for:\n * import module from \"foo\";\n * import module, {bar} from \"foo\";\n */\nfunction isImportReflection() {\n  const snapshot = _base__WEBPACK_IMPORTED_MODULE_8__.state.snapshot();\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._module);\n  if ((0,_util__WEBPACK_IMPORTED_MODULE_11__.eatContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._from)) {\n    if ((0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._from)) {\n      _base__WEBPACK_IMPORTED_MODULE_8__.state.restoreFromSnapshot(snapshot);\n      return true;\n    } else {\n      _base__WEBPACK_IMPORTED_MODULE_8__.state.restoreFromSnapshot(snapshot);\n      return false;\n    }\n  } else if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.comma)) {\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.restoreFromSnapshot(snapshot);\n    return false;\n  } else {\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.restoreFromSnapshot(snapshot);\n    return true;\n  }\n}\n\n/**\n * Eat the \"module\" token from the import reflection proposal.\n * https://github.com/tc39/proposal-import-reflection\n */\nfunction parseMaybeImportReflection() {\n  // isImportReflection does snapshot/restore, so only run it if we see the word\n  // \"module\".\n  if ((0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._module) && isImportReflection()) {\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n  }\n}\n\n// Parses import declaration.\n\nfunction parseImport() {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled && (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.name) && (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.eq) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsParseImportEqualsDeclaration)();\n    return;\n  }\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled && (0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._type)) {\n    const lookahead = (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.lookaheadTypeAndKeyword)();\n    if (lookahead.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.name && lookahead.contextualKeyword !== _tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._from) {\n      // One of these `import type` cases:\n      // import type T = require('T');\n      // import type A from 'A';\n      (0,_util__WEBPACK_IMPORTED_MODULE_11__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._type);\n      if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.lookaheadType)() === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.eq) {\n        (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsParseImportEqualsDeclaration)();\n        return;\n      }\n      // If this is an `import type...from` statement, then we already ate the\n      // type token, so proceed to the regular import parser.\n    } else if (lookahead.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.star || lookahead.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceL) {\n      // One of these `import type` cases, in which case we can eat the type token\n      // and proceed as normal:\n      // import type * as A from 'A';\n      // import type {a} from 'A';\n      (0,_util__WEBPACK_IMPORTED_MODULE_11__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._type);\n    }\n    // Otherwise, we are importing the name \"type\".\n  }\n\n  // import '...'\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.string)) {\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseExprAtom)();\n  } else {\n    parseMaybeImportReflection();\n    parseImportSpecifiers();\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._from);\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseExprAtom)();\n  }\n  maybeParseImportAttributes();\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.semicolon)();\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction shouldParseDefaultImport() {\n  return (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.name);\n}\n\nfunction parseImportSpecifierLocal() {\n  (0,_lval__WEBPACK_IMPORTED_MODULE_10__.parseImportedIdentifier)();\n}\n\n// Parses a comma-separated list of module imports.\nfunction parseImportSpecifiers() {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowStartParseImportSpecifiers)();\n  }\n\n  let first = true;\n  if (shouldParseDefaultImport()) {\n    // import defaultObj, { x, y as z } from '...'\n    parseImportSpecifierLocal();\n\n    if (!(0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.comma)) return;\n  }\n\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.star)) {\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n    (0,_util__WEBPACK_IMPORTED_MODULE_11__.expectContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._as);\n\n    parseImportSpecifierLocal();\n\n    return;\n  }\n\n  (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceL);\n  while (!(0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceR) && !_base__WEBPACK_IMPORTED_MODULE_8__.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      // Detect an attempt to deep destructure\n      if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.colon)) {\n        (0,_util__WEBPACK_IMPORTED_MODULE_11__.unexpected)(\n          \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n        );\n      }\n\n      (0,_util__WEBPACK_IMPORTED_MODULE_11__.expect)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.comma);\n      if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType.braceR)) {\n        break;\n      }\n    }\n\n    parseImportSpecifier();\n  }\n}\n\nfunction parseImportSpecifier() {\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isTypeScriptEnabled) {\n    (0,_plugins_typescript__WEBPACK_IMPORTED_MODULE_2__.tsParseImportSpecifier)();\n    return;\n  }\n  if (_base__WEBPACK_IMPORTED_MODULE_8__.isFlowEnabled) {\n    (0,_plugins_flow__WEBPACK_IMPORTED_MODULE_1__.flowParseImportSpecifier)();\n    return;\n  }\n  (0,_lval__WEBPACK_IMPORTED_MODULE_10__.parseImportedIdentifier)();\n  if ((0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._as)) {\n    _base__WEBPACK_IMPORTED_MODULE_8__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_8__.state.tokens.length - 1].identifierRole = _tokenizer__WEBPACK_IMPORTED_MODULE_3__.IdentifierRole.ImportAccess;\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n    (0,_lval__WEBPACK_IMPORTED_MODULE_10__.parseImportedIdentifier)();\n  }\n}\n\n/**\n * Parse import attributes like `with {type: \"json\"}`, or the legacy form\n * `assert {type: \"json\"}`.\n *\n * Import attributes technically have their own syntax, but are always parseable\n * as a plain JS object, so just do that for simplicity.\n */\nfunction maybeParseImportAttributes() {\n  if ((0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_6__.TokenType._with) || ((0,_util__WEBPACK_IMPORTED_MODULE_11__.isContextual)(_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_4__.ContextualKeyword._assert) && !(0,_util__WEBPACK_IMPORTED_MODULE_11__.hasPrecedingLineBreak)())) {\n    (0,_tokenizer__WEBPACK_IMPORTED_MODULE_3__.next)();\n    (0,_expression__WEBPACK_IMPORTED_MODULE_9__.parseObj)(false, false);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/statement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/util.js":
/*!****************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/traverser/util.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canInsertSemicolon: () => (/* binding */ canInsertSemicolon),\n/* harmony export */   eatContextual: () => (/* binding */ eatContextual),\n/* harmony export */   expect: () => (/* binding */ expect),\n/* harmony export */   expectContextual: () => (/* binding */ expectContextual),\n/* harmony export */   hasFollowingLineBreak: () => (/* binding */ hasFollowingLineBreak),\n/* harmony export */   hasPrecedingLineBreak: () => (/* binding */ hasPrecedingLineBreak),\n/* harmony export */   isContextual: () => (/* binding */ isContextual),\n/* harmony export */   isLineTerminator: () => (/* binding */ isLineTerminator),\n/* harmony export */   isLookaheadContextual: () => (/* binding */ isLookaheadContextual),\n/* harmony export */   semicolon: () => (/* binding */ semicolon),\n/* harmony export */   unexpected: () => (/* binding */ unexpected)\n/* harmony export */ });\n/* harmony import */ var _tokenizer_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tokenizer/index */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _util_charcodes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/charcodes */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js\");\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/base.js\");\n\n\n\n\n\n\n// ## Parser utilities\n\n// Tests whether parsed token is a contextual keyword.\nfunction isContextual(contextualKeyword) {\n  return _base__WEBPACK_IMPORTED_MODULE_3__.state.contextualKeyword === contextualKeyword;\n}\n\nfunction isLookaheadContextual(contextualKeyword) {\n  const l = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.lookaheadTypeAndKeyword)();\n  return l.type === _tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name && l.contextualKeyword === contextualKeyword;\n}\n\n// Consumes contextual keyword if possible.\nfunction eatContextual(contextualKeyword) {\n  return _base__WEBPACK_IMPORTED_MODULE_3__.state.contextualKeyword === contextualKeyword && (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name);\n}\n\n// Asserts that following token is given contextual keyword.\nfunction expectContextual(contextualKeyword) {\n  if (!eatContextual(contextualKeyword)) {\n    unexpected();\n  }\n}\n\n// Test whether a semicolon can be inserted at the current position.\nfunction canInsertSemicolon() {\n  return (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.eof) || (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.match)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR) || hasPrecedingLineBreak();\n}\n\nfunction hasPrecedingLineBreak() {\n  const prevToken = _base__WEBPACK_IMPORTED_MODULE_3__.state.tokens[_base__WEBPACK_IMPORTED_MODULE_3__.state.tokens.length - 1];\n  const lastTokEnd = prevToken ? prevToken.end : 0;\n  for (let i = lastTokEnd; i < _base__WEBPACK_IMPORTED_MODULE_3__.state.start; i++) {\n    const code = _base__WEBPACK_IMPORTED_MODULE_3__.input.charCodeAt(i);\n    if (\n      code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lineFeed ||\n      code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.carriageReturn ||\n      code === 0x2028 ||\n      code === 0x2029\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction hasFollowingLineBreak() {\n  const nextStart = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.nextTokenStart)();\n  for (let i = _base__WEBPACK_IMPORTED_MODULE_3__.state.end; i < nextStart; i++) {\n    const code = _base__WEBPACK_IMPORTED_MODULE_3__.input.charCodeAt(i);\n    if (\n      code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.lineFeed ||\n      code === _util_charcodes__WEBPACK_IMPORTED_MODULE_2__.charCodes.carriageReturn ||\n      code === 0x2028 ||\n      code === 0x2029\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isLineTerminator() {\n  return (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.semi) || canInsertSemicolon();\n}\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\nfunction semicolon() {\n  if (!isLineTerminator()) {\n    unexpected('Unexpected token, expected \";\"');\n  }\n}\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error at given pos.\nfunction expect(type) {\n  const matched = (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.eat)(type);\n  if (!matched) {\n    unexpected(`Unexpected token, expected \"${(0,_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.formatTokenType)(type)}\"`);\n  }\n}\n\n/**\n * Transition the parser to an error state. All code needs to be written to naturally unwind in this\n * state, which allows us to backtrack without exceptions and without error plumbing everywhere.\n */\nfunction unexpected(message = \"Unexpected token\", pos = _base__WEBPACK_IMPORTED_MODULE_3__.state.start) {\n  if (_base__WEBPACK_IMPORTED_MODULE_3__.state.error) {\n    return;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const err = new SyntaxError(message);\n  err.pos = pos;\n  _base__WEBPACK_IMPORTED_MODULE_3__.state.error = err;\n  _base__WEBPACK_IMPORTED_MODULE_3__.state.pos = _base__WEBPACK_IMPORTED_MODULE_3__.input.length;\n  (0,_tokenizer_index__WEBPACK_IMPORTED_MODULE_0__.finishToken)(_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.eof);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9wYXJzZXIvdHJhdmVyc2VyL3V0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW9HOztBQUVoQztBQUN4QjtBQUNSOztBQUVwQzs7QUFFQTtBQUNPO0FBQ1AsU0FBUyx3Q0FBSztBQUNkOztBQUVPO0FBQ1AsWUFBWSx5RUFBdUI7QUFDbkMsb0JBQW9CLHVEQUFFO0FBQ3RCOztBQUVBO0FBQ087QUFDUCxTQUFTLHdDQUFLLDRDQUE0QyxxREFBRyxDQUFDLHVEQUFFO0FBQ2hFOztBQUVBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNPO0FBQ1AsU0FBUyx1REFBSyxDQUFDLHVEQUFFLFNBQVMsdURBQUssQ0FBQyx1REFBRTtBQUNsQzs7QUFFTztBQUNQLG9CQUFvQix3Q0FBSyxRQUFRLHdDQUFLO0FBQ3RDO0FBQ0EsMkJBQTJCLElBQUksd0NBQUssUUFBUTtBQUM1QyxpQkFBaUIsd0NBQUs7QUFDdEI7QUFDQSxlQUFlLHNEQUFTO0FBQ3hCLGVBQWUsc0RBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQLG9CQUFvQixnRUFBYztBQUNsQyxlQUFlLHdDQUFLLE1BQU0sZUFBZTtBQUN6QyxpQkFBaUIsd0NBQUs7QUFDdEI7QUFDQSxlQUFlLHNEQUFTO0FBQ3hCLGVBQWUsc0RBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQLFNBQVMscURBQUcsQ0FBQyx1REFBRTtBQUNmOztBQUVBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNPO0FBQ1Asa0JBQWtCLHFEQUFHO0FBQ3JCO0FBQ0EsOENBQThDLGlFQUFlLE9BQU87QUFDcEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHdEQUF3RCx3Q0FBSztBQUNwRSxNQUFNLHdDQUFLO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsd0NBQUs7QUFDUCxFQUFFLHdDQUFLLE9BQU8sd0NBQUs7QUFDbkIsRUFBRSw2REFBVyxDQUFDLHVEQUFFO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktbGlicmFyeS1kb2NzLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC9lc20vcGFyc2VyL3RyYXZlcnNlci91dGlsLmpzPzg3OGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtlYXQsIGZpbmlzaFRva2VuLCBsb29rYWhlYWRUeXBlQW5kS2V5d29yZCwgbWF0Y2gsIG5leHRUb2tlblN0YXJ0fSBmcm9tIFwiLi4vdG9rZW5pemVyL2luZGV4XCI7XG5cbmltcG9ydCB7Zm9ybWF0VG9rZW5UeXBlLCBUb2tlblR5cGUgYXMgdHR9IGZyb20gXCIuLi90b2tlbml6ZXIvdHlwZXNcIjtcbmltcG9ydCB7Y2hhckNvZGVzfSBmcm9tIFwiLi4vdXRpbC9jaGFyY29kZXNcIjtcbmltcG9ydCB7aW5wdXQsIHN0YXRlfSBmcm9tIFwiLi9iYXNlXCI7XG5cbi8vICMjIFBhcnNlciB1dGlsaXRpZXNcblxuLy8gVGVzdHMgd2hldGhlciBwYXJzZWQgdG9rZW4gaXMgYSBjb250ZXh0dWFsIGtleXdvcmQuXG5leHBvcnQgZnVuY3Rpb24gaXNDb250ZXh0dWFsKGNvbnRleHR1YWxLZXl3b3JkKSB7XG4gIHJldHVybiBzdGF0ZS5jb250ZXh0dWFsS2V5d29yZCA9PT0gY29udGV4dHVhbEtleXdvcmQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xvb2thaGVhZENvbnRleHR1YWwoY29udGV4dHVhbEtleXdvcmQpIHtcbiAgY29uc3QgbCA9IGxvb2thaGVhZFR5cGVBbmRLZXl3b3JkKCk7XG4gIHJldHVybiBsLnR5cGUgPT09IHR0Lm5hbWUgJiYgbC5jb250ZXh0dWFsS2V5d29yZCA9PT0gY29udGV4dHVhbEtleXdvcmQ7XG59XG5cbi8vIENvbnN1bWVzIGNvbnRleHR1YWwga2V5d29yZCBpZiBwb3NzaWJsZS5cbmV4cG9ydCBmdW5jdGlvbiBlYXRDb250ZXh0dWFsKGNvbnRleHR1YWxLZXl3b3JkKSB7XG4gIHJldHVybiBzdGF0ZS5jb250ZXh0dWFsS2V5d29yZCA9PT0gY29udGV4dHVhbEtleXdvcmQgJiYgZWF0KHR0Lm5hbWUpO1xufVxuXG4vLyBBc3NlcnRzIHRoYXQgZm9sbG93aW5nIHRva2VuIGlzIGdpdmVuIGNvbnRleHR1YWwga2V5d29yZC5cbmV4cG9ydCBmdW5jdGlvbiBleHBlY3RDb250ZXh0dWFsKGNvbnRleHR1YWxLZXl3b3JkKSB7XG4gIGlmICghZWF0Q29udGV4dHVhbChjb250ZXh0dWFsS2V5d29yZCkpIHtcbiAgICB1bmV4cGVjdGVkKCk7XG4gIH1cbn1cblxuLy8gVGVzdCB3aGV0aGVyIGEgc2VtaWNvbG9uIGNhbiBiZSBpbnNlcnRlZCBhdCB0aGUgY3VycmVudCBwb3NpdGlvbi5cbmV4cG9ydCBmdW5jdGlvbiBjYW5JbnNlcnRTZW1pY29sb24oKSB7XG4gIHJldHVybiBtYXRjaCh0dC5lb2YpIHx8IG1hdGNoKHR0LmJyYWNlUikgfHwgaGFzUHJlY2VkaW5nTGluZUJyZWFrKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNQcmVjZWRpbmdMaW5lQnJlYWsoKSB7XG4gIGNvbnN0IHByZXZUb2tlbiA9IHN0YXRlLnRva2Vuc1tzdGF0ZS50b2tlbnMubGVuZ3RoIC0gMV07XG4gIGNvbnN0IGxhc3RUb2tFbmQgPSBwcmV2VG9rZW4gPyBwcmV2VG9rZW4uZW5kIDogMDtcbiAgZm9yIChsZXQgaSA9IGxhc3RUb2tFbmQ7IGkgPCBzdGF0ZS5zdGFydDsgaSsrKSB7XG4gICAgY29uc3QgY29kZSA9IGlucHV0LmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY2hhckNvZGVzLmxpbmVGZWVkIHx8XG4gICAgICBjb2RlID09PSBjaGFyQ29kZXMuY2FycmlhZ2VSZXR1cm4gfHxcbiAgICAgIGNvZGUgPT09IDB4MjAyOCB8fFxuICAgICAgY29kZSA9PT0gMHgyMDI5XG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzRm9sbG93aW5nTGluZUJyZWFrKCkge1xuICBjb25zdCBuZXh0U3RhcnQgPSBuZXh0VG9rZW5TdGFydCgpO1xuICBmb3IgKGxldCBpID0gc3RhdGUuZW5kOyBpIDwgbmV4dFN0YXJ0OyBpKyspIHtcbiAgICBjb25zdCBjb2RlID0gaW5wdXQuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBjaGFyQ29kZXMubGluZUZlZWQgfHxcbiAgICAgIGNvZGUgPT09IGNoYXJDb2Rlcy5jYXJyaWFnZVJldHVybiB8fFxuICAgICAgY29kZSA9PT0gMHgyMDI4IHx8XG4gICAgICBjb2RlID09PSAweDIwMjlcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xpbmVUZXJtaW5hdG9yKCkge1xuICByZXR1cm4gZWF0KHR0LnNlbWkpIHx8IGNhbkluc2VydFNlbWljb2xvbigpO1xufVxuXG4vLyBDb25zdW1lIGEgc2VtaWNvbG9uLCBvciwgZmFpbGluZyB0aGF0LCBzZWUgaWYgd2UgYXJlIGFsbG93ZWQgdG9cbi8vIHByZXRlbmQgdGhhdCB0aGVyZSBpcyBhIHNlbWljb2xvbiBhdCB0aGlzIHBvc2l0aW9uLlxuZXhwb3J0IGZ1bmN0aW9uIHNlbWljb2xvbigpIHtcbiAgaWYgKCFpc0xpbmVUZXJtaW5hdG9yKCkpIHtcbiAgICB1bmV4cGVjdGVkKCdVbmV4cGVjdGVkIHRva2VuLCBleHBlY3RlZCBcIjtcIicpO1xuICB9XG59XG5cbi8vIEV4cGVjdCBhIHRva2VuIG9mIGEgZ2l2ZW4gdHlwZS4gSWYgZm91bmQsIGNvbnN1bWUgaXQsIG90aGVyd2lzZSxcbi8vIHJhaXNlIGFuIHVuZXhwZWN0ZWQgdG9rZW4gZXJyb3IgYXQgZ2l2ZW4gcG9zLlxuZXhwb3J0IGZ1bmN0aW9uIGV4cGVjdCh0eXBlKSB7XG4gIGNvbnN0IG1hdGNoZWQgPSBlYXQodHlwZSk7XG4gIGlmICghbWF0Y2hlZCkge1xuICAgIHVuZXhwZWN0ZWQoYFVuZXhwZWN0ZWQgdG9rZW4sIGV4cGVjdGVkIFwiJHtmb3JtYXRUb2tlblR5cGUodHlwZSl9XCJgKTtcbiAgfVxufVxuXG4vKipcbiAqIFRyYW5zaXRpb24gdGhlIHBhcnNlciB0byBhbiBlcnJvciBzdGF0ZS4gQWxsIGNvZGUgbmVlZHMgdG8gYmUgd3JpdHRlbiB0byBuYXR1cmFsbHkgdW53aW5kIGluIHRoaXNcbiAqIHN0YXRlLCB3aGljaCBhbGxvd3MgdXMgdG8gYmFja3RyYWNrIHdpdGhvdXQgZXhjZXB0aW9ucyBhbmQgd2l0aG91dCBlcnJvciBwbHVtYmluZyBldmVyeXdoZXJlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5leHBlY3RlZChtZXNzYWdlID0gXCJVbmV4cGVjdGVkIHRva2VuXCIsIHBvcyA9IHN0YXRlLnN0YXJ0KSB7XG4gIGlmIChzdGF0ZS5lcnJvcikge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBjb25zdCBlcnIgPSBuZXcgU3ludGF4RXJyb3IobWVzc2FnZSk7XG4gIGVyci5wb3MgPSBwb3M7XG4gIHN0YXRlLmVycm9yID0gZXJyO1xuICBzdGF0ZS5wb3MgPSBpbnB1dC5sZW5ndGg7XG4gIGZpbmlzaFRva2VuKHR0LmVvZik7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/traverser/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js":
/*!****************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/util/charcodes.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   charCodes: () => (/* binding */ charCodes),\n/* harmony export */   isDigit: () => (/* binding */ isDigit)\n/* harmony export */ });\nvar charCodes; (function (charCodes) {\n  const backSpace = 8; charCodes[charCodes[\"backSpace\"] = backSpace] = \"backSpace\";\n  const lineFeed = 10; charCodes[charCodes[\"lineFeed\"] = lineFeed] = \"lineFeed\"; //  '\\n'\n  const tab = 9; charCodes[charCodes[\"tab\"] = tab] = \"tab\"; //  '\\t'\n  const carriageReturn = 13; charCodes[charCodes[\"carriageReturn\"] = carriageReturn] = \"carriageReturn\"; //  '\\r'\n  const shiftOut = 14; charCodes[charCodes[\"shiftOut\"] = shiftOut] = \"shiftOut\";\n  const space = 32; charCodes[charCodes[\"space\"] = space] = \"space\";\n  const exclamationMark = 33; charCodes[charCodes[\"exclamationMark\"] = exclamationMark] = \"exclamationMark\"; //  '!'\n  const quotationMark = 34; charCodes[charCodes[\"quotationMark\"] = quotationMark] = \"quotationMark\"; //  '\"'\n  const numberSign = 35; charCodes[charCodes[\"numberSign\"] = numberSign] = \"numberSign\"; //  '#'\n  const dollarSign = 36; charCodes[charCodes[\"dollarSign\"] = dollarSign] = \"dollarSign\"; //  '$'\n  const percentSign = 37; charCodes[charCodes[\"percentSign\"] = percentSign] = \"percentSign\"; //  '%'\n  const ampersand = 38; charCodes[charCodes[\"ampersand\"] = ampersand] = \"ampersand\"; //  '&'\n  const apostrophe = 39; charCodes[charCodes[\"apostrophe\"] = apostrophe] = \"apostrophe\"; //  '''\n  const leftParenthesis = 40; charCodes[charCodes[\"leftParenthesis\"] = leftParenthesis] = \"leftParenthesis\"; //  '('\n  const rightParenthesis = 41; charCodes[charCodes[\"rightParenthesis\"] = rightParenthesis] = \"rightParenthesis\"; //  ')'\n  const asterisk = 42; charCodes[charCodes[\"asterisk\"] = asterisk] = \"asterisk\"; //  '*'\n  const plusSign = 43; charCodes[charCodes[\"plusSign\"] = plusSign] = \"plusSign\"; //  '+'\n  const comma = 44; charCodes[charCodes[\"comma\"] = comma] = \"comma\"; //  ','\n  const dash = 45; charCodes[charCodes[\"dash\"] = dash] = \"dash\"; //  '-'\n  const dot = 46; charCodes[charCodes[\"dot\"] = dot] = \"dot\"; //  '.'\n  const slash = 47; charCodes[charCodes[\"slash\"] = slash] = \"slash\"; //  '/'\n  const digit0 = 48; charCodes[charCodes[\"digit0\"] = digit0] = \"digit0\"; //  '0'\n  const digit1 = 49; charCodes[charCodes[\"digit1\"] = digit1] = \"digit1\"; //  '1'\n  const digit2 = 50; charCodes[charCodes[\"digit2\"] = digit2] = \"digit2\"; //  '2'\n  const digit3 = 51; charCodes[charCodes[\"digit3\"] = digit3] = \"digit3\"; //  '3'\n  const digit4 = 52; charCodes[charCodes[\"digit4\"] = digit4] = \"digit4\"; //  '4'\n  const digit5 = 53; charCodes[charCodes[\"digit5\"] = digit5] = \"digit5\"; //  '5'\n  const digit6 = 54; charCodes[charCodes[\"digit6\"] = digit6] = \"digit6\"; //  '6'\n  const digit7 = 55; charCodes[charCodes[\"digit7\"] = digit7] = \"digit7\"; //  '7'\n  const digit8 = 56; charCodes[charCodes[\"digit8\"] = digit8] = \"digit8\"; //  '8'\n  const digit9 = 57; charCodes[charCodes[\"digit9\"] = digit9] = \"digit9\"; //  '9'\n  const colon = 58; charCodes[charCodes[\"colon\"] = colon] = \"colon\"; //  ':'\n  const semicolon = 59; charCodes[charCodes[\"semicolon\"] = semicolon] = \"semicolon\"; //  ';'\n  const lessThan = 60; charCodes[charCodes[\"lessThan\"] = lessThan] = \"lessThan\"; //  '<'\n  const equalsTo = 61; charCodes[charCodes[\"equalsTo\"] = equalsTo] = \"equalsTo\"; //  '='\n  const greaterThan = 62; charCodes[charCodes[\"greaterThan\"] = greaterThan] = \"greaterThan\"; //  '>'\n  const questionMark = 63; charCodes[charCodes[\"questionMark\"] = questionMark] = \"questionMark\"; //  '?'\n  const atSign = 64; charCodes[charCodes[\"atSign\"] = atSign] = \"atSign\"; //  '@'\n  const uppercaseA = 65; charCodes[charCodes[\"uppercaseA\"] = uppercaseA] = \"uppercaseA\"; //  'A'\n  const uppercaseB = 66; charCodes[charCodes[\"uppercaseB\"] = uppercaseB] = \"uppercaseB\"; //  'B'\n  const uppercaseC = 67; charCodes[charCodes[\"uppercaseC\"] = uppercaseC] = \"uppercaseC\"; //  'C'\n  const uppercaseD = 68; charCodes[charCodes[\"uppercaseD\"] = uppercaseD] = \"uppercaseD\"; //  'D'\n  const uppercaseE = 69; charCodes[charCodes[\"uppercaseE\"] = uppercaseE] = \"uppercaseE\"; //  'E'\n  const uppercaseF = 70; charCodes[charCodes[\"uppercaseF\"] = uppercaseF] = \"uppercaseF\"; //  'F'\n  const uppercaseG = 71; charCodes[charCodes[\"uppercaseG\"] = uppercaseG] = \"uppercaseG\"; //  'G'\n  const uppercaseH = 72; charCodes[charCodes[\"uppercaseH\"] = uppercaseH] = \"uppercaseH\"; //  'H'\n  const uppercaseI = 73; charCodes[charCodes[\"uppercaseI\"] = uppercaseI] = \"uppercaseI\"; //  'I'\n  const uppercaseJ = 74; charCodes[charCodes[\"uppercaseJ\"] = uppercaseJ] = \"uppercaseJ\"; //  'J'\n  const uppercaseK = 75; charCodes[charCodes[\"uppercaseK\"] = uppercaseK] = \"uppercaseK\"; //  'K'\n  const uppercaseL = 76; charCodes[charCodes[\"uppercaseL\"] = uppercaseL] = \"uppercaseL\"; //  'L'\n  const uppercaseM = 77; charCodes[charCodes[\"uppercaseM\"] = uppercaseM] = \"uppercaseM\"; //  'M'\n  const uppercaseN = 78; charCodes[charCodes[\"uppercaseN\"] = uppercaseN] = \"uppercaseN\"; //  'N'\n  const uppercaseO = 79; charCodes[charCodes[\"uppercaseO\"] = uppercaseO] = \"uppercaseO\"; //  'O'\n  const uppercaseP = 80; charCodes[charCodes[\"uppercaseP\"] = uppercaseP] = \"uppercaseP\"; //  'P'\n  const uppercaseQ = 81; charCodes[charCodes[\"uppercaseQ\"] = uppercaseQ] = \"uppercaseQ\"; //  'Q'\n  const uppercaseR = 82; charCodes[charCodes[\"uppercaseR\"] = uppercaseR] = \"uppercaseR\"; //  'R'\n  const uppercaseS = 83; charCodes[charCodes[\"uppercaseS\"] = uppercaseS] = \"uppercaseS\"; //  'S'\n  const uppercaseT = 84; charCodes[charCodes[\"uppercaseT\"] = uppercaseT] = \"uppercaseT\"; //  'T'\n  const uppercaseU = 85; charCodes[charCodes[\"uppercaseU\"] = uppercaseU] = \"uppercaseU\"; //  'U'\n  const uppercaseV = 86; charCodes[charCodes[\"uppercaseV\"] = uppercaseV] = \"uppercaseV\"; //  'V'\n  const uppercaseW = 87; charCodes[charCodes[\"uppercaseW\"] = uppercaseW] = \"uppercaseW\"; //  'W'\n  const uppercaseX = 88; charCodes[charCodes[\"uppercaseX\"] = uppercaseX] = \"uppercaseX\"; //  'X'\n  const uppercaseY = 89; charCodes[charCodes[\"uppercaseY\"] = uppercaseY] = \"uppercaseY\"; //  'Y'\n  const uppercaseZ = 90; charCodes[charCodes[\"uppercaseZ\"] = uppercaseZ] = \"uppercaseZ\"; //  'Z'\n  const leftSquareBracket = 91; charCodes[charCodes[\"leftSquareBracket\"] = leftSquareBracket] = \"leftSquareBracket\"; //  '['\n  const backslash = 92; charCodes[charCodes[\"backslash\"] = backslash] = \"backslash\"; //  '\\    '\n  const rightSquareBracket = 93; charCodes[charCodes[\"rightSquareBracket\"] = rightSquareBracket] = \"rightSquareBracket\"; //  ']'\n  const caret = 94; charCodes[charCodes[\"caret\"] = caret] = \"caret\"; //  '^'\n  const underscore = 95; charCodes[charCodes[\"underscore\"] = underscore] = \"underscore\"; //  '_'\n  const graveAccent = 96; charCodes[charCodes[\"graveAccent\"] = graveAccent] = \"graveAccent\"; //  '`'\n  const lowercaseA = 97; charCodes[charCodes[\"lowercaseA\"] = lowercaseA] = \"lowercaseA\"; //  'a'\n  const lowercaseB = 98; charCodes[charCodes[\"lowercaseB\"] = lowercaseB] = \"lowercaseB\"; //  'b'\n  const lowercaseC = 99; charCodes[charCodes[\"lowercaseC\"] = lowercaseC] = \"lowercaseC\"; //  'c'\n  const lowercaseD = 100; charCodes[charCodes[\"lowercaseD\"] = lowercaseD] = \"lowercaseD\"; //  'd'\n  const lowercaseE = 101; charCodes[charCodes[\"lowercaseE\"] = lowercaseE] = \"lowercaseE\"; //  'e'\n  const lowercaseF = 102; charCodes[charCodes[\"lowercaseF\"] = lowercaseF] = \"lowercaseF\"; //  'f'\n  const lowercaseG = 103; charCodes[charCodes[\"lowercaseG\"] = lowercaseG] = \"lowercaseG\"; //  'g'\n  const lowercaseH = 104; charCodes[charCodes[\"lowercaseH\"] = lowercaseH] = \"lowercaseH\"; //  'h'\n  const lowercaseI = 105; charCodes[charCodes[\"lowercaseI\"] = lowercaseI] = \"lowercaseI\"; //  'i'\n  const lowercaseJ = 106; charCodes[charCodes[\"lowercaseJ\"] = lowercaseJ] = \"lowercaseJ\"; //  'j'\n  const lowercaseK = 107; charCodes[charCodes[\"lowercaseK\"] = lowercaseK] = \"lowercaseK\"; //  'k'\n  const lowercaseL = 108; charCodes[charCodes[\"lowercaseL\"] = lowercaseL] = \"lowercaseL\"; //  'l'\n  const lowercaseM = 109; charCodes[charCodes[\"lowercaseM\"] = lowercaseM] = \"lowercaseM\"; //  'm'\n  const lowercaseN = 110; charCodes[charCodes[\"lowercaseN\"] = lowercaseN] = \"lowercaseN\"; //  'n'\n  const lowercaseO = 111; charCodes[charCodes[\"lowercaseO\"] = lowercaseO] = \"lowercaseO\"; //  'o'\n  const lowercaseP = 112; charCodes[charCodes[\"lowercaseP\"] = lowercaseP] = \"lowercaseP\"; //  'p'\n  const lowercaseQ = 113; charCodes[charCodes[\"lowercaseQ\"] = lowercaseQ] = \"lowercaseQ\"; //  'q'\n  const lowercaseR = 114; charCodes[charCodes[\"lowercaseR\"] = lowercaseR] = \"lowercaseR\"; //  'r'\n  const lowercaseS = 115; charCodes[charCodes[\"lowercaseS\"] = lowercaseS] = \"lowercaseS\"; //  's'\n  const lowercaseT = 116; charCodes[charCodes[\"lowercaseT\"] = lowercaseT] = \"lowercaseT\"; //  't'\n  const lowercaseU = 117; charCodes[charCodes[\"lowercaseU\"] = lowercaseU] = \"lowercaseU\"; //  'u'\n  const lowercaseV = 118; charCodes[charCodes[\"lowercaseV\"] = lowercaseV] = \"lowercaseV\"; //  'v'\n  const lowercaseW = 119; charCodes[charCodes[\"lowercaseW\"] = lowercaseW] = \"lowercaseW\"; //  'w'\n  const lowercaseX = 120; charCodes[charCodes[\"lowercaseX\"] = lowercaseX] = \"lowercaseX\"; //  'x'\n  const lowercaseY = 121; charCodes[charCodes[\"lowercaseY\"] = lowercaseY] = \"lowercaseY\"; //  'y'\n  const lowercaseZ = 122; charCodes[charCodes[\"lowercaseZ\"] = lowercaseZ] = \"lowercaseZ\"; //  'z'\n  const leftCurlyBrace = 123; charCodes[charCodes[\"leftCurlyBrace\"] = leftCurlyBrace] = \"leftCurlyBrace\"; //  '{'\n  const verticalBar = 124; charCodes[charCodes[\"verticalBar\"] = verticalBar] = \"verticalBar\"; //  '|'\n  const rightCurlyBrace = 125; charCodes[charCodes[\"rightCurlyBrace\"] = rightCurlyBrace] = \"rightCurlyBrace\"; //  '}'\n  const tilde = 126; charCodes[charCodes[\"tilde\"] = tilde] = \"tilde\"; //  '~'\n  const nonBreakingSpace = 160; charCodes[charCodes[\"nonBreakingSpace\"] = nonBreakingSpace] = \"nonBreakingSpace\";\n  // eslint-disable-next-line no-irregular-whitespace\n  const oghamSpaceMark = 5760; charCodes[charCodes[\"oghamSpaceMark\"] = oghamSpaceMark] = \"oghamSpaceMark\"; // ' '\n  const lineSeparator = 8232; charCodes[charCodes[\"lineSeparator\"] = lineSeparator] = \"lineSeparator\";\n  const paragraphSeparator = 8233; charCodes[charCodes[\"paragraphSeparator\"] = paragraphSeparator] = \"paragraphSeparator\";\n})(charCodes || (charCodes = {}));\n\nfunction isDigit(code) {\n  return (\n    (code >= charCodes.digit0 && code <= charCodes.digit9) ||\n    (code >= charCodes.lowercaseA && code <= charCodes.lowercaseF) ||\n    (code >= charCodes.uppercaseA && code <= charCodes.uppercaseF)\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/util/identifier.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/util/identifier.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IS_IDENTIFIER_CHAR: () => (/* binding */ IS_IDENTIFIER_CHAR),\n/* harmony export */   IS_IDENTIFIER_START: () => (/* binding */ IS_IDENTIFIER_START)\n/* harmony export */ });\n/* harmony import */ var _charcodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./charcodes */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js\");\n/* harmony import */ var _whitespace__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./whitespace */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/whitespace.js\");\n\n\n\nfunction computeIsIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code < 128) return false;\n  throw new Error(\"Should not be called with non-ASCII char code.\");\n}\n\nconst IS_IDENTIFIER_CHAR = new Uint8Array(65536);\nfor (let i = 0; i < 128; i++) {\n  IS_IDENTIFIER_CHAR[i] = computeIsIdentifierChar(i) ? 1 : 0;\n}\nfor (let i = 128; i < 65536; i++) {\n  IS_IDENTIFIER_CHAR[i] = 1;\n}\n// Aside from whitespace and newlines, all characters outside the ASCII space are either\n// identifier characters or invalid. Since we're not performing code validation, we can just\n// treat all invalid characters as identifier characters.\nfor (const whitespaceChar of _whitespace__WEBPACK_IMPORTED_MODULE_1__.WHITESPACE_CHARS) {\n  IS_IDENTIFIER_CHAR[whitespaceChar] = 0;\n}\nIS_IDENTIFIER_CHAR[0x2028] = 0;\nIS_IDENTIFIER_CHAR[0x2029] = 0;\n\nconst IS_IDENTIFIER_START = IS_IDENTIFIER_CHAR.slice();\nfor (let numChar = _charcodes__WEBPACK_IMPORTED_MODULE_0__.charCodes.digit0; numChar <= _charcodes__WEBPACK_IMPORTED_MODULE_0__.charCodes.digit9; numChar++) {\n  IS_IDENTIFIER_START[numChar] = 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9wYXJzZXIvdXRpbC9pZGVudGlmaWVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0M7QUFDUTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUCxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0Esa0JBQWtCLFdBQVc7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix5REFBZ0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUCxtQkFBbUIsaURBQVMsU0FBUyxXQUFXLGlEQUFTLFNBQVM7QUFDbEU7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3BhcnNlci91dGlsL2lkZW50aWZpZXIuanM/MGNlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NoYXJDb2Rlc30gZnJvbSBcIi4vY2hhcmNvZGVzXCI7XG5pbXBvcnQge1dISVRFU1BBQ0VfQ0hBUlN9IGZyb20gXCIuL3doaXRlc3BhY2VcIjtcblxuZnVuY3Rpb24gY29tcHV0ZUlzSWRlbnRpZmllckNoYXIoY29kZSkge1xuICBpZiAoY29kZSA8IDQ4KSByZXR1cm4gY29kZSA9PT0gMzY7XG4gIGlmIChjb2RlIDwgNTgpIHJldHVybiB0cnVlO1xuICBpZiAoY29kZSA8IDY1KSByZXR1cm4gZmFsc2U7XG4gIGlmIChjb2RlIDwgOTEpIHJldHVybiB0cnVlO1xuICBpZiAoY29kZSA8IDk3KSByZXR1cm4gY29kZSA9PT0gOTU7XG4gIGlmIChjb2RlIDwgMTIzKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKGNvZGUgPCAxMjgpIHJldHVybiBmYWxzZTtcbiAgdGhyb3cgbmV3IEVycm9yKFwiU2hvdWxkIG5vdCBiZSBjYWxsZWQgd2l0aCBub24tQVNDSUkgY2hhciBjb2RlLlwiKTtcbn1cblxuZXhwb3J0IGNvbnN0IElTX0lERU5USUZJRVJfQ0hBUiA9IG5ldyBVaW50OEFycmF5KDY1NTM2KTtcbmZvciAobGV0IGkgPSAwOyBpIDwgMTI4OyBpKyspIHtcbiAgSVNfSURFTlRJRklFUl9DSEFSW2ldID0gY29tcHV0ZUlzSWRlbnRpZmllckNoYXIoaSkgPyAxIDogMDtcbn1cbmZvciAobGV0IGkgPSAxMjg7IGkgPCA2NTUzNjsgaSsrKSB7XG4gIElTX0lERU5USUZJRVJfQ0hBUltpXSA9IDE7XG59XG4vLyBBc2lkZSBmcm9tIHdoaXRlc3BhY2UgYW5kIG5ld2xpbmVzLCBhbGwgY2hhcmFjdGVycyBvdXRzaWRlIHRoZSBBU0NJSSBzcGFjZSBhcmUgZWl0aGVyXG4vLyBpZGVudGlmaWVyIGNoYXJhY3RlcnMgb3IgaW52YWxpZC4gU2luY2Ugd2UncmUgbm90IHBlcmZvcm1pbmcgY29kZSB2YWxpZGF0aW9uLCB3ZSBjYW4ganVzdFxuLy8gdHJlYXQgYWxsIGludmFsaWQgY2hhcmFjdGVycyBhcyBpZGVudGlmaWVyIGNoYXJhY3RlcnMuXG5mb3IgKGNvbnN0IHdoaXRlc3BhY2VDaGFyIG9mIFdISVRFU1BBQ0VfQ0hBUlMpIHtcbiAgSVNfSURFTlRJRklFUl9DSEFSW3doaXRlc3BhY2VDaGFyXSA9IDA7XG59XG5JU19JREVOVElGSUVSX0NIQVJbMHgyMDI4XSA9IDA7XG5JU19JREVOVElGSUVSX0NIQVJbMHgyMDI5XSA9IDA7XG5cbmV4cG9ydCBjb25zdCBJU19JREVOVElGSUVSX1NUQVJUID0gSVNfSURFTlRJRklFUl9DSEFSLnNsaWNlKCk7XG5mb3IgKGxldCBudW1DaGFyID0gY2hhckNvZGVzLmRpZ2l0MDsgbnVtQ2hhciA8PSBjaGFyQ29kZXMuZGlnaXQ5OyBudW1DaGFyKyspIHtcbiAgSVNfSURFTlRJRklFUl9TVEFSVFtudW1DaGFyXSA9IDA7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/util/identifier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/parser/util/whitespace.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/parser/util/whitespace.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IS_WHITESPACE: () => (/* binding */ IS_WHITESPACE),\n/* harmony export */   WHITESPACE_CHARS: () => (/* binding */ WHITESPACE_CHARS),\n/* harmony export */   skipWhiteSpace: () => (/* binding */ skipWhiteSpace)\n/* harmony export */ });\n/* harmony import */ var _charcodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./charcodes */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js\");\n\n\n// https://tc39.github.io/ecma262/#sec-white-space\nconst WHITESPACE_CHARS = [\n  0x0009,\n  0x000b,\n  0x000c,\n  _charcodes__WEBPACK_IMPORTED_MODULE_0__.charCodes.space,\n  _charcodes__WEBPACK_IMPORTED_MODULE_0__.charCodes.nonBreakingSpace,\n  _charcodes__WEBPACK_IMPORTED_MODULE_0__.charCodes.oghamSpaceMark,\n  0x2000, // EN QUAD\n  0x2001, // EM QUAD\n  0x2002, // EN SPACE\n  0x2003, // EM SPACE\n  0x2004, // THREE-PER-EM SPACE\n  0x2005, // FOUR-PER-EM SPACE\n  0x2006, // SIX-PER-EM SPACE\n  0x2007, // FIGURE SPACE\n  0x2008, // PUNCTUATION SPACE\n  0x2009, // THIN SPACE\n  0x200a, // HAIR SPACE\n  0x202f, // NARROW NO-BREAK SPACE\n  0x205f, // MEDIUM MATHEMATICAL SPACE\n  0x3000, // IDEOGRAPHIC SPACE\n  0xfeff, // ZERO WIDTH NO-BREAK SPACE\n];\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nconst IS_WHITESPACE = new Uint8Array(65536);\nfor (const char of WHITESPACE_CHARS) {\n  IS_WHITESPACE[char] = 1;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9wYXJzZXIvdXRpbC93aGl0ZXNwYWNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0M7O0FBRXRDO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxFQUFFLGlEQUFTO0FBQ1gsRUFBRSxpREFBUztBQUNYLEVBQUUsaURBQVM7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTzs7QUFFQTtBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3BhcnNlci91dGlsL3doaXRlc3BhY2UuanM/NzU5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NoYXJDb2Rlc30gZnJvbSBcIi4vY2hhcmNvZGVzXCI7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXdoaXRlLXNwYWNlXG5leHBvcnQgY29uc3QgV0hJVEVTUEFDRV9DSEFSUyA9IFtcbiAgMHgwMDA5LFxuICAweDAwMGIsXG4gIDB4MDAwYyxcbiAgY2hhckNvZGVzLnNwYWNlLFxuICBjaGFyQ29kZXMubm9uQnJlYWtpbmdTcGFjZSxcbiAgY2hhckNvZGVzLm9naGFtU3BhY2VNYXJrLFxuICAweDIwMDAsIC8vIEVOIFFVQURcbiAgMHgyMDAxLCAvLyBFTSBRVUFEXG4gIDB4MjAwMiwgLy8gRU4gU1BBQ0VcbiAgMHgyMDAzLCAvLyBFTSBTUEFDRVxuICAweDIwMDQsIC8vIFRIUkVFLVBFUi1FTSBTUEFDRVxuICAweDIwMDUsIC8vIEZPVVItUEVSLUVNIFNQQUNFXG4gIDB4MjAwNiwgLy8gU0lYLVBFUi1FTSBTUEFDRVxuICAweDIwMDcsIC8vIEZJR1VSRSBTUEFDRVxuICAweDIwMDgsIC8vIFBVTkNUVUFUSU9OIFNQQUNFXG4gIDB4MjAwOSwgLy8gVEhJTiBTUEFDRVxuICAweDIwMGEsIC8vIEhBSVIgU1BBQ0VcbiAgMHgyMDJmLCAvLyBOQVJST1cgTk8tQlJFQUsgU1BBQ0VcbiAgMHgyMDVmLCAvLyBNRURJVU0gTUFUSEVNQVRJQ0FMIFNQQUNFXG4gIDB4MzAwMCwgLy8gSURFT0dSQVBISUMgU1BBQ0VcbiAgMHhmZWZmLCAvLyBaRVJPIFdJRFRIIE5PLUJSRUFLIFNQQUNFXG5dO1xuXG5leHBvcnQgY29uc3Qgc2tpcFdoaXRlU3BhY2UgPSAvKD86XFxzfFxcL1xcLy4qfFxcL1xcKlteXSo/XFwqXFwvKSovZztcblxuZXhwb3J0IGNvbnN0IElTX1dISVRFU1BBQ0UgPSBuZXcgVWludDhBcnJheSg2NTUzNik7XG5mb3IgKGNvbnN0IGNoYXIgb2YgV0hJVEVTUEFDRV9DSEFSUykge1xuICBJU19XSElURVNQQUNFW2NoYXJdID0gMTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/parser/util/whitespace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/transformers/CJSImportTransformer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/transformers/CJSImportTransformer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CJSImportTransformer)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _util_elideImportEquals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/elideImportEquals */ \"(ssr)/./node_modules/sucrase/dist/esm/util/elideImportEquals.js\");\n/* harmony import */ var _util_getDeclarationInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/getDeclarationInfo */ \"(ssr)/./node_modules/sucrase/dist/esm/util/getDeclarationInfo.js\");\n/* harmony import */ var _util_getImportExportSpecifierInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/getImportExportSpecifierInfo */ \"(ssr)/./node_modules/sucrase/dist/esm/util/getImportExportSpecifierInfo.js\");\n/* harmony import */ var _util_isExportFrom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/isExportFrom */ \"(ssr)/./node_modules/sucrase/dist/esm/util/isExportFrom.js\");\n/* harmony import */ var _util_removeMaybeImportAttributes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/removeMaybeImportAttributes */ \"(ssr)/./node_modules/sucrase/dist/esm/util/removeMaybeImportAttributes.js\");\n/* harmony import */ var _util_shouldElideDefaultExport__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/shouldElideDefaultExport */ \"(ssr)/./node_modules/sucrase/dist/esm/util/shouldElideDefaultExport.js\");\n/* harmony import */ var _Transformer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Transformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/Transformer.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Class for editing import statements when we are transforming to commonjs.\n */\nclass CJSImportTransformer extends _Transformer__WEBPACK_IMPORTED_MODULE_9__[\"default\"] {\n   __init() {this.hadExport = false}\n   __init2() {this.hadNamedExport = false}\n   __init3() {this.hadDefaultExport = false}\n  \n\n  constructor(\n     rootTransformer,\n     tokens,\n     importProcessor,\n     nameManager,\n     helperManager,\n     reactHotLoaderTransformer,\n     enableLegacyBabel5ModuleInterop,\n     enableLegacyTypeScriptModuleInterop,\n     isTypeScriptTransformEnabled,\n     isFlowTransformEnabled,\n     preserveDynamicImport,\n     keepUnusedImports,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.importProcessor = importProcessor;this.nameManager = nameManager;this.helperManager = helperManager;this.reactHotLoaderTransformer = reactHotLoaderTransformer;this.enableLegacyBabel5ModuleInterop = enableLegacyBabel5ModuleInterop;this.enableLegacyTypeScriptModuleInterop = enableLegacyTypeScriptModuleInterop;this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;this.isFlowTransformEnabled = isFlowTransformEnabled;this.preserveDynamicImport = preserveDynamicImport;this.keepUnusedImports = keepUnusedImports;CJSImportTransformer.prototype.__init.call(this);CJSImportTransformer.prototype.__init2.call(this);CJSImportTransformer.prototype.__init3.call(this);;\n    this.declarationInfo = isTypeScriptTransformEnabled\n      ? (0,_util_getDeclarationInfo__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(tokens)\n      : _util_getDeclarationInfo__WEBPACK_IMPORTED_MODULE_4__.EMPTY_DECLARATION_INFO;\n  }\n\n  getPrefixCode() {\n    let prefix = \"\";\n    if (this.hadExport) {\n      prefix += 'Object.defineProperty(exports, \"__esModule\", {value: true});';\n    }\n    return prefix;\n  }\n\n  getSuffixCode() {\n    if (this.enableLegacyBabel5ModuleInterop && this.hadDefaultExport && !this.hadNamedExport) {\n      return \"\\nmodule.exports = exports.default;\\n\";\n    }\n    return \"\";\n  }\n\n  process() {\n    // TypeScript `import foo = require('foo');` should always just be translated to plain require.\n    if (this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._import, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n      return this.processImportEquals();\n    }\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._import)) {\n      this.processImport();\n      return true;\n    }\n    if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n      this.tokens.replaceToken(\"module.exports\");\n      return true;\n    }\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export) && !this.tokens.currentToken().isType) {\n      this.hadExport = true;\n      return this.processExport();\n    }\n    if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.postIncDec)) {\n      // Fall through to normal identifier matching if this doesn't apply.\n      if (this.processPostIncDec()) {\n        return true;\n      }\n    }\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) || this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxName)) {\n      return this.processIdentifier();\n    }\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n      return this.processAssignment();\n    }\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.assign)) {\n      return this.processComplexAssignment();\n    }\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.preIncDec)) {\n      return this.processPreIncDec();\n    }\n    return false;\n  }\n\n   processImportEquals() {\n    const importName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);\n    if (this.importProcessor.shouldAutomaticallyElideImportedName(importName)) {\n      // If this name is only used as a type, elide the whole import.\n      (0,_util_elideImportEquals__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.tokens);\n    } else {\n      // Otherwise, switch `import` to `const`.\n      this.tokens.replaceToken(\"const\");\n    }\n    return true;\n  }\n\n  /**\n   * Transform this:\n   * import foo, {bar} from 'baz';\n   * into\n   * var _baz = require('baz'); var _baz2 = _interopRequireDefault(_baz);\n   *\n   * The import code was already generated in the import preprocessing step, so\n   * we just need to look it up.\n   */\n   processImport() {\n    if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._import, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL)) {\n      if (this.preserveDynamicImport) {\n        // Bail out, only making progress for this one token.\n        this.tokens.copyToken();\n        return;\n      }\n      const requireWrapper = this.enableLegacyTypeScriptModuleInterop\n        ? \"\"\n        : `${this.helperManager.getHelperName(\"interopRequireWildcard\")}(`;\n      this.tokens.replaceToken(`Promise.resolve().then(() => ${requireWrapper}require`);\n      const contextId = this.tokens.currentToken().contextId;\n      if (contextId == null) {\n        throw new Error(\"Expected context ID on dynamic import invocation.\");\n      }\n      this.tokens.copyToken();\n      while (!this.tokens.matchesContextIdAndLabel(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR, contextId)) {\n        this.rootTransformer.processToken();\n      }\n      this.tokens.replaceToken(requireWrapper ? \")))\" : \"))\");\n      return;\n    }\n\n    const shouldElideImport = this.removeImportAndDetectIfShouldElide();\n    if (shouldElideImport) {\n      this.tokens.removeToken();\n    } else {\n      const path = this.tokens.stringValue();\n      this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path));\n      this.tokens.appendCode(this.importProcessor.claimImportCode(path));\n    }\n    (0,_util_removeMaybeImportAttributes__WEBPACK_IMPORTED_MODULE_7__.removeMaybeImportAttributes)(this.tokens);\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.semi)) {\n      this.tokens.removeToken();\n    }\n  }\n\n  /**\n   * Erase this import (since any CJS output would be completely different), and\n   * return true if this import is should be elided due to being a type-only\n   * import. Such imports will not be emitted at all to avoid side effects.\n   *\n   * Import elision only happens with the TypeScript or Flow transforms enabled.\n   *\n   * TODO: This function has some awkward overlap with\n   *  CJSImportProcessor.pruneTypeOnlyImports , and the two should be unified.\n   *  That function handles TypeScript implicit import name elision, and removes\n   *  an import if all typical imported names (without `type`) are removed due\n   *  to being type-only imports. This function handles Flow import removal and\n   *  properly distinguishes `import 'foo'` from `import {} from 'foo'` for TS\n   *  purposes.\n   *\n   * The position should end at the import string.\n   */\n   removeImportAndDetectIfShouldElide() {\n    this.tokens.removeInitialToken();\n    if (\n      this.tokens.matchesContextual(_parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type) &&\n      !this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma) &&\n      !this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._from)\n    ) {\n      // This is an \"import type\" statement, so exit early.\n      this.removeRemainingImport();\n      return true;\n    }\n\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) || this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.star)) {\n      // We have a default import or namespace import, so there must be some\n      // non-type import.\n      this.removeRemainingImport();\n      return false;\n    }\n\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)) {\n      // This is a bare import, so we should proceed with the import.\n      return false;\n    }\n\n    let foundNonTypeImport = false;\n    let foundAnyNamedImport = false;\n    while (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)) {\n      // Check if any named imports are of the form \"foo\" or \"foo as bar\", with\n      // no leading \"type\".\n      if (\n        (!foundNonTypeImport && this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL)) ||\n        this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma)\n      ) {\n        this.tokens.removeToken();\n        if (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n          foundAnyNamedImport = true;\n        }\n        if (\n          this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma) ||\n          this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR) ||\n          this.tokens.matches4(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma) ||\n          this.tokens.matches4(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)\n        ) {\n          foundNonTypeImport = true;\n        }\n      }\n      this.tokens.removeToken();\n    }\n    if (this.keepUnusedImports) {\n      return false;\n    }\n    if (this.isTypeScriptTransformEnabled) {\n      return !foundNonTypeImport;\n    } else if (this.isFlowTransformEnabled) {\n      // In Flow, unlike TS, `import {} from 'foo';` preserves the import.\n      return foundAnyNamedImport && !foundNonTypeImport;\n    } else {\n      return false;\n    }\n  }\n\n   removeRemainingImport() {\n    while (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)) {\n      this.tokens.removeToken();\n    }\n  }\n\n   processIdentifier() {\n    const token = this.tokens.currentToken();\n    if (token.shadowsGlobal) {\n      return false;\n    }\n\n    if (token.identifierRole === _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ObjectShorthand) {\n      return this.processObjectShorthand();\n    }\n\n    if (token.identifierRole !== _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.Access) {\n      return false;\n    }\n    const replacement = this.importProcessor.getIdentifierReplacement(\n      this.tokens.identifierNameForToken(token),\n    );\n    if (!replacement) {\n      return false;\n    }\n    // Tolerate any number of closing parens while looking for an opening paren\n    // that indicates a function call.\n    let possibleOpenParenIndex = this.tokens.currentIndex() + 1;\n    while (\n      possibleOpenParenIndex < this.tokens.tokens.length &&\n      this.tokens.tokens[possibleOpenParenIndex].type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR\n    ) {\n      possibleOpenParenIndex++;\n    }\n    // Avoid treating imported functions as methods of their `exports` object\n    // by using `(0, f)` when the identifier is in a paren expression. Else\n    // use `Function.prototype.call` when the identifier is a guaranteed\n    // function call. When using `call`, pass undefined as the context.\n    if (this.tokens.tokens[possibleOpenParenIndex].type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL) {\n      if (\n        this.tokens.tokenAtRelativeIndex(1).type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL &&\n        this.tokens.tokenAtRelativeIndex(-1).type !== _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._new\n      ) {\n        this.tokens.replaceToken(`${replacement}.call(void 0, `);\n        // Remove the old paren.\n        this.tokens.removeToken();\n        // Balance out the new paren.\n        this.rootTransformer.processBalancedCode();\n        this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR);\n      } else {\n        // See here: http://2ality.com/2015/12/references.html\n        this.tokens.replaceToken(`(0, ${replacement})`);\n      }\n    } else {\n      this.tokens.replaceToken(replacement);\n    }\n    return true;\n  }\n\n  processObjectShorthand() {\n    const identifier = this.tokens.identifierName();\n    const replacement = this.importProcessor.getIdentifierReplacement(identifier);\n    if (!replacement) {\n      return false;\n    }\n    this.tokens.replaceToken(`${identifier}: ${replacement}`);\n    return true;\n  }\n\n  processExport() {\n    if (\n      this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._enum) ||\n      this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._const, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._enum)\n    ) {\n      this.hadNamedExport = true;\n      // Let the TypeScript transform handle it.\n      return false;\n    }\n    if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._default)) {\n      if (this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._default, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._enum)) {\n        this.hadDefaultExport = true;\n        // Flow export default enums need some special handling, so handle them\n        // in that tranform rather than this one.\n        return false;\n      }\n      this.processExportDefault();\n      return true;\n    } else if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL)) {\n      this.processExportBindings();\n      return true;\n    } else if (\n      this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) &&\n      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._type)\n    ) {\n      // export type {a};\n      // export type {a as b};\n      // export type {a} from './b';\n      // export type * from './b';\n      // export type * as ns from './b';\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL)) {\n        while (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n          this.tokens.removeToken();\n        }\n        this.tokens.removeToken();\n      } else {\n        // *\n        this.tokens.removeToken();\n        if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._as)) {\n          // as\n          this.tokens.removeToken();\n          // ns\n          this.tokens.removeToken();\n        }\n      }\n      // Remove type re-export `... } from './T'`\n      if (\n        this.tokens.matchesContextual(_parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._from) &&\n        this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)\n      ) {\n        this.tokens.removeToken();\n        this.tokens.removeToken();\n        (0,_util_removeMaybeImportAttributes__WEBPACK_IMPORTED_MODULE_7__.removeMaybeImportAttributes)(this.tokens);\n      }\n      return true;\n    }\n    this.hadNamedExport = true;\n    if (\n      this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._var) ||\n      this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._let) ||\n      this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._const)\n    ) {\n      this.processExportVar();\n      return true;\n    } else if (\n      this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._function) ||\n      // export async function\n      this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._function)\n    ) {\n      this.processExportFunction();\n      return true;\n    } else if (\n      this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._class) ||\n      this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._abstract, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._class) ||\n      this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.at)\n    ) {\n      this.processExportClass();\n      return true;\n    } else if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.star)) {\n      this.processExportStar();\n      return true;\n    } else {\n      throw new Error(\"Unrecognized export syntax.\");\n    }\n  }\n\n   processAssignment() {\n    const index = this.tokens.currentIndex();\n    const identifierToken = this.tokens.tokens[index - 1];\n    // If the LHS is a type identifier, this must be a declaration like `let a: b = c;`,\n    // with `b` as the identifier, so nothing needs to be done in that case.\n    if (identifierToken.isType || identifierToken.type !== _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) {\n      return false;\n    }\n    if (identifierToken.shadowsGlobal) {\n      return false;\n    }\n    if (index >= 2 && this.tokens.matches1AtIndex(index - 2, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dot)) {\n      return false;\n    }\n    if (index >= 2 && [_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._var, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._let, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._const].includes(this.tokens.tokens[index - 2].type)) {\n      // Declarations don't need an extra assignment. This doesn't avoid the\n      // assignment for comma-separated declarations, but it's still correct\n      // since the assignment is just redundant.\n      return false;\n    }\n    const assignmentSnippet = this.importProcessor.resolveExportBinding(\n      this.tokens.identifierNameForToken(identifierToken),\n    );\n    if (!assignmentSnippet) {\n      return false;\n    }\n    this.tokens.copyToken();\n    this.tokens.appendCode(` ${assignmentSnippet} =`);\n    return true;\n  }\n\n  /**\n   * Process something like `a += 3`, where `a` might be an exported value.\n   */\n   processComplexAssignment() {\n    const index = this.tokens.currentIndex();\n    const identifierToken = this.tokens.tokens[index - 1];\n    if (identifierToken.type !== _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) {\n      return false;\n    }\n    if (identifierToken.shadowsGlobal) {\n      return false;\n    }\n    if (index >= 2 && this.tokens.matches1AtIndex(index - 2, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dot)) {\n      return false;\n    }\n    const assignmentSnippet = this.importProcessor.resolveExportBinding(\n      this.tokens.identifierNameForToken(identifierToken),\n    );\n    if (!assignmentSnippet) {\n      return false;\n    }\n    this.tokens.appendCode(` = ${assignmentSnippet}`);\n    this.tokens.copyToken();\n    return true;\n  }\n\n  /**\n   * Process something like `++a`, where `a` might be an exported value.\n   */\n   processPreIncDec() {\n    const index = this.tokens.currentIndex();\n    const identifierToken = this.tokens.tokens[index + 1];\n    if (identifierToken.type !== _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) {\n      return false;\n    }\n    if (identifierToken.shadowsGlobal) {\n      return false;\n    }\n    // Ignore things like ++a.b and ++a[b] and ++a().b.\n    if (\n      index + 2 < this.tokens.tokens.length &&\n      (this.tokens.matches1AtIndex(index + 2, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dot) ||\n        this.tokens.matches1AtIndex(index + 2, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL) ||\n        this.tokens.matches1AtIndex(index + 2, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL))\n    ) {\n      return false;\n    }\n    const identifierName = this.tokens.identifierNameForToken(identifierToken);\n    const assignmentSnippet = this.importProcessor.resolveExportBinding(identifierName);\n    if (!assignmentSnippet) {\n      return false;\n    }\n    this.tokens.appendCode(`${assignmentSnippet} = `);\n    this.tokens.copyToken();\n    return true;\n  }\n\n  /**\n   * Process something like `a++`, where `a` might be an exported value.\n   * This starts at the `a`, not at the `++`.\n   */\n   processPostIncDec() {\n    const index = this.tokens.currentIndex();\n    const identifierToken = this.tokens.tokens[index];\n    const operatorToken = this.tokens.tokens[index + 1];\n    if (identifierToken.type !== _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) {\n      return false;\n    }\n    if (identifierToken.shadowsGlobal) {\n      return false;\n    }\n    if (index >= 1 && this.tokens.matches1AtIndex(index - 1, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dot)) {\n      return false;\n    }\n    const identifierName = this.tokens.identifierNameForToken(identifierToken);\n    const assignmentSnippet = this.importProcessor.resolveExportBinding(identifierName);\n    if (!assignmentSnippet) {\n      return false;\n    }\n    const operatorCode = this.tokens.rawCodeForToken(operatorToken);\n    // We might also replace the identifier with something like exports.x, so\n    // do that replacement here as well.\n    const base = this.importProcessor.getIdentifierReplacement(identifierName) || identifierName;\n    if (operatorCode === \"++\") {\n      this.tokens.replaceToken(`(${base} = ${assignmentSnippet} = ${base} + 1, ${base} - 1)`);\n    } else if (operatorCode === \"--\") {\n      this.tokens.replaceToken(`(${base} = ${assignmentSnippet} = ${base} - 1, ${base} + 1)`);\n    } else {\n      throw new Error(`Unexpected operator: ${operatorCode}`);\n    }\n    this.tokens.removeToken();\n    return true;\n  }\n\n   processExportDefault() {\n    let exportedRuntimeValue = true;\n    if (\n      this.tokens.matches4(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._default, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._function, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) ||\n      // export default async function\n      (this.tokens.matches5(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._default, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._function, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) &&\n        this.tokens.matchesContextualAtIndex(\n          this.tokens.currentIndex() + 2,\n          _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._async,\n        ))\n    ) {\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      // Named function export case: change it to a top-level function\n      // declaration followed by exports statement.\n      const name = this.processNamedFunction();\n      this.tokens.appendCode(` exports.default = ${name};`);\n    } else if (\n      this.tokens.matches4(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._default, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._class, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) ||\n      this.tokens.matches5(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._default, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._abstract, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._class, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) ||\n      this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._default, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.at)\n    ) {\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      this.copyDecorators();\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._abstract)) {\n        this.tokens.removeToken();\n      }\n      const name = this.rootTransformer.processNamedClass();\n      this.tokens.appendCode(` exports.default = ${name};`);\n      // After this point, this is a plain \"export default E\" statement.\n    } else if (\n      (0,_util_shouldElideDefaultExport__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\n        this.isTypeScriptTransformEnabled,\n        this.keepUnusedImports,\n        this.tokens,\n        this.declarationInfo,\n      )\n    ) {\n      // If the exported value is just an identifier and should be elided by TypeScript\n      // rules, then remove it entirely. It will always have the form `export default e`,\n      // where `e` is an identifier.\n      exportedRuntimeValue = false;\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      this.tokens.removeToken();\n    } else if (this.reactHotLoaderTransformer) {\n      // We need to assign E to a variable. Change \"export default E\" to\n      // \"let _default; exports.default = _default = E\"\n      const defaultVarName = this.nameManager.claimFreeName(\"_default\");\n      this.tokens.replaceToken(`let ${defaultVarName}; exports.`);\n      this.tokens.copyToken();\n      this.tokens.appendCode(` = ${defaultVarName} =`);\n      this.reactHotLoaderTransformer.setExtractedDefaultExportName(defaultVarName);\n    } else {\n      // Change \"export default E\" to \"exports.default = E\"\n      this.tokens.replaceToken(\"exports.\");\n      this.tokens.copyToken();\n      this.tokens.appendCode(\" =\");\n    }\n    if (exportedRuntimeValue) {\n      this.hadDefaultExport = true;\n    }\n  }\n\n   copyDecorators() {\n    while (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.at)) {\n      this.tokens.copyToken();\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL)) {\n        this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL);\n        this.rootTransformer.processBalancedCode();\n        this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR);\n      } else {\n        this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name);\n        while (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dot)) {\n          this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dot);\n          this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name);\n        }\n        if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL)) {\n          this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL);\n          this.rootTransformer.processBalancedCode();\n          this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR);\n        }\n      }\n    }\n  }\n\n  /**\n   * Transform a declaration like `export var`, `export let`, or `export const`.\n   */\n   processExportVar() {\n    if (this.isSimpleExportVar()) {\n      this.processSimpleExportVar();\n    } else {\n      this.processComplexExportVar();\n    }\n  }\n\n  /**\n   * Determine if the export is of the form:\n   * export var/let/const [varName] = [expr];\n   * In other words, determine if function name inference might apply.\n   */\n   isSimpleExportVar() {\n    let tokenIndex = this.tokens.currentIndex();\n    // export\n    tokenIndex++;\n    // var/let/const\n    tokenIndex++;\n    if (!this.tokens.matches1AtIndex(tokenIndex, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n      return false;\n    }\n    tokenIndex++;\n    while (tokenIndex < this.tokens.tokens.length && this.tokens.tokens[tokenIndex].isType) {\n      tokenIndex++;\n    }\n    if (!this.tokens.matches1AtIndex(tokenIndex, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Transform an `export var` declaration initializing a single variable.\n   *\n   * For example, this:\n   * export const f = () => {};\n   * becomes this:\n   * const f = () => {}; exports.f = f;\n   *\n   * The variable is unused (e.g. exports.f has the true value of the export).\n   * We need to produce an assignment of this form so that the function will\n   * have an inferred name of \"f\", which wouldn't happen in the more general\n   * case below.\n   */\n   processSimpleExportVar() {\n    // export\n    this.tokens.removeInitialToken();\n    // var/let/const\n    this.tokens.copyToken();\n    const varName = this.tokens.identifierName();\n    // x: number  ->  x\n    while (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n      this.rootTransformer.processToken();\n    }\n    const endIndex = this.tokens.currentToken().rhsEndIndex;\n    if (endIndex == null) {\n      throw new Error(\"Expected = token with an end index.\");\n    }\n    while (this.tokens.currentIndex() < endIndex) {\n      this.rootTransformer.processToken();\n    }\n    this.tokens.appendCode(`; exports.${varName} = ${varName}`);\n  }\n\n  /**\n   * Transform normal declaration exports, including handling destructuring.\n   * For example, this:\n   * export const {x: [a = 2, b], c} = d;\n   * becomes this:\n   * ({x: [exports.a = 2, exports.b], c: exports.c} = d;)\n   */\n   processComplexExportVar() {\n    this.tokens.removeInitialToken();\n    this.tokens.removeToken();\n    const needsParens = this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL);\n    if (needsParens) {\n      this.tokens.appendCode(\"(\");\n    }\n\n    let depth = 0;\n    while (true) {\n      if (\n        this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL) ||\n        this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.dollarBraceL) ||\n        this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketL)\n      ) {\n        depth++;\n        this.tokens.copyToken();\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR) || this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.bracketR)) {\n        depth--;\n        this.tokens.copyToken();\n      } else if (\n        depth === 0 &&\n        !this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name) &&\n        !this.tokens.currentToken().isType\n      ) {\n        break;\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n        // Default values might have assignments in the RHS that we want to ignore, so skip past\n        // them.\n        const endIndex = this.tokens.currentToken().rhsEndIndex;\n        if (endIndex == null) {\n          throw new Error(\"Expected = token with an end index.\");\n        }\n        while (this.tokens.currentIndex() < endIndex) {\n          this.rootTransformer.processToken();\n        }\n      } else {\n        const token = this.tokens.currentToken();\n        if ((0,_parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.isDeclaration)(token)) {\n          const name = this.tokens.identifierName();\n          let replacement = this.importProcessor.getIdentifierReplacement(name);\n          if (replacement === null) {\n            throw new Error(`Expected a replacement for ${name} in \\`export var\\` syntax.`);\n          }\n          if ((0,_parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.isObjectShorthandDeclaration)(token)) {\n            replacement = `${name}: ${replacement}`;\n          }\n          this.tokens.replaceToken(replacement);\n        } else {\n          this.rootTransformer.processToken();\n        }\n      }\n    }\n\n    if (needsParens) {\n      // Seek to the end of the RHS.\n      const endIndex = this.tokens.currentToken().rhsEndIndex;\n      if (endIndex == null) {\n        throw new Error(\"Expected = token with an end index.\");\n      }\n      while (this.tokens.currentIndex() < endIndex) {\n        this.rootTransformer.processToken();\n      }\n      this.tokens.appendCode(\")\");\n    }\n  }\n\n  /**\n   * Transform this:\n   * export function foo() {}\n   * into this:\n   * function foo() {} exports.foo = foo;\n   */\n   processExportFunction() {\n    this.tokens.replaceToken(\"\");\n    const name = this.processNamedFunction();\n    this.tokens.appendCode(` exports.${name} = ${name};`);\n  }\n\n  /**\n   * Skip past a function with a name and return that name.\n   */\n   processNamedFunction() {\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._function)) {\n      this.tokens.copyToken();\n    } else if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._function)) {\n      if (!this.tokens.matchesContextual(_parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._async)) {\n        throw new Error(\"Expected async keyword in function export.\");\n      }\n      this.tokens.copyToken();\n      this.tokens.copyToken();\n    }\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.star)) {\n      this.tokens.copyToken();\n    }\n    if (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.name)) {\n      throw new Error(\"Expected identifier for exported function name.\");\n    }\n    const name = this.tokens.identifierName();\n    this.tokens.copyToken();\n    if (this.tokens.currentToken().isType) {\n      this.tokens.removeInitialToken();\n      while (this.tokens.currentToken().isType) {\n        this.tokens.removeToken();\n      }\n    }\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenL);\n    this.rootTransformer.processBalancedCode();\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.parenR);\n    this.rootTransformer.processPossibleTypeRange();\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL);\n    this.rootTransformer.processBalancedCode();\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR);\n    return name;\n  }\n\n  /**\n   * Transform this:\n   * export class A {}\n   * into this:\n   * class A {} exports.A = A;\n   */\n   processExportClass() {\n    this.tokens.removeInitialToken();\n    this.copyDecorators();\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType._abstract)) {\n      this.tokens.removeToken();\n    }\n    const name = this.rootTransformer.processNamedClass();\n    this.tokens.appendCode(` exports.${name} = ${name};`);\n  }\n\n  /**\n   * Transform this:\n   * export {a, b as c};\n   * into this:\n   * exports.a = a; exports.c = b;\n   *\n   * OR\n   *\n   * Transform this:\n   * export {a, b as c} from './foo';\n   * into the pre-generated Object.defineProperty code from the ImportProcessor.\n   *\n   * For the first case, if the TypeScript transform is enabled, we need to skip\n   * exports that are only defined as types.\n   */\n   processExportBindings() {\n    this.tokens.removeInitialToken();\n    this.tokens.removeToken();\n\n    const isReExport = (0,_util_isExportFrom__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this.tokens);\n\n    const exportStatements = [];\n    while (true) {\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n        this.tokens.removeToken();\n        break;\n      }\n\n      const specifierInfo = (0,_util_getImportExportSpecifierInfo__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this.tokens);\n\n      while (this.tokens.currentIndex() < specifierInfo.endIndex) {\n        this.tokens.removeToken();\n      }\n\n      const shouldRemoveExport =\n        specifierInfo.isType ||\n        (!isReExport && this.shouldElideExportedIdentifier(specifierInfo.leftName));\n      if (!shouldRemoveExport) {\n        const exportedName = specifierInfo.rightName;\n        if (exportedName === \"default\") {\n          this.hadDefaultExport = true;\n        } else {\n          this.hadNamedExport = true;\n        }\n        const localName = specifierInfo.leftName;\n        const newLocalName = this.importProcessor.getIdentifierReplacement(localName);\n        exportStatements.push(`exports.${exportedName} = ${newLocalName || localName};`);\n      }\n\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n        this.tokens.removeToken();\n        break;\n      }\n      if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n        this.tokens.removeToken();\n        this.tokens.removeToken();\n        break;\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.comma)) {\n        this.tokens.removeToken();\n      } else {\n        throw new Error(`Unexpected token: ${JSON.stringify(this.tokens.currentToken())}`);\n      }\n    }\n\n    if (this.tokens.matchesContextual(_parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_1__.ContextualKeyword._from)) {\n      // This is an export...from, so throw away the normal named export code\n      // and use the Object.defineProperty code from ImportProcessor.\n      this.tokens.removeToken();\n      const path = this.tokens.stringValue();\n      this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path));\n      (0,_util_removeMaybeImportAttributes__WEBPACK_IMPORTED_MODULE_7__.removeMaybeImportAttributes)(this.tokens);\n    } else {\n      // This is a normal named export, so use that.\n      this.tokens.appendCode(exportStatements.join(\" \"));\n    }\n\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.semi)) {\n      this.tokens.removeToken();\n    }\n  }\n\n   processExportStar() {\n    this.tokens.removeInitialToken();\n    while (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.string)) {\n      this.tokens.removeToken();\n    }\n    const path = this.tokens.stringValue();\n    this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path));\n    (0,_util_removeMaybeImportAttributes__WEBPACK_IMPORTED_MODULE_7__.removeMaybeImportAttributes)(this.tokens);\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.semi)) {\n      this.tokens.removeToken();\n    }\n  }\n\n   shouldElideExportedIdentifier(name) {\n    return (\n      this.isTypeScriptTransformEnabled &&\n      !this.keepUnusedImports &&\n      !this.declarationInfo.valueDeclarations.has(name)\n    );\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/transformers/CJSImportTransformer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/transformers/ESMImportTransformer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/transformers/ESMImportTransformer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ESMImportTransformer)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _util_elideImportEquals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/elideImportEquals */ \"(ssr)/./node_modules/sucrase/dist/esm/util/elideImportEquals.js\");\n/* harmony import */ var _util_getDeclarationInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/getDeclarationInfo */ \"(ssr)/./node_modules/sucrase/dist/esm/util/getDeclarationInfo.js\");\n/* harmony import */ var _util_getImportExportSpecifierInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/getImportExportSpecifierInfo */ \"(ssr)/./node_modules/sucrase/dist/esm/util/getImportExportSpecifierInfo.js\");\n/* harmony import */ var _util_getNonTypeIdentifiers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/getNonTypeIdentifiers */ \"(ssr)/./node_modules/sucrase/dist/esm/util/getNonTypeIdentifiers.js\");\n/* harmony import */ var _util_isExportFrom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/isExportFrom */ \"(ssr)/./node_modules/sucrase/dist/esm/util/isExportFrom.js\");\n/* harmony import */ var _util_removeMaybeImportAttributes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/removeMaybeImportAttributes */ \"(ssr)/./node_modules/sucrase/dist/esm/util/removeMaybeImportAttributes.js\");\n/* harmony import */ var _util_shouldElideDefaultExport__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/shouldElideDefaultExport */ \"(ssr)/./node_modules/sucrase/dist/esm/util/shouldElideDefaultExport.js\");\n/* harmony import */ var _Transformer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Transformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/Transformer.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Class for editing import statements when we are keeping the code as ESM. We still need to remove\n * type-only imports in TypeScript and Flow.\n */\nclass ESMImportTransformer extends _Transformer__WEBPACK_IMPORTED_MODULE_9__[\"default\"] {\n  \n  \n  \n\n  constructor(\n     tokens,\n     nameManager,\n     helperManager,\n     reactHotLoaderTransformer,\n     isTypeScriptTransformEnabled,\n     isFlowTransformEnabled,\n     keepUnusedImports,\n    options,\n  ) {\n    super();this.tokens = tokens;this.nameManager = nameManager;this.helperManager = helperManager;this.reactHotLoaderTransformer = reactHotLoaderTransformer;this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;this.isFlowTransformEnabled = isFlowTransformEnabled;this.keepUnusedImports = keepUnusedImports;;\n    this.nonTypeIdentifiers =\n      isTypeScriptTransformEnabled && !keepUnusedImports\n        ? (0,_util_getNonTypeIdentifiers__WEBPACK_IMPORTED_MODULE_5__.getNonTypeIdentifiers)(tokens, options)\n        : new Set();\n    this.declarationInfo =\n      isTypeScriptTransformEnabled && !keepUnusedImports\n        ? (0,_util_getDeclarationInfo__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(tokens)\n        : _util_getDeclarationInfo__WEBPACK_IMPORTED_MODULE_3__.EMPTY_DECLARATION_INFO;\n    this.injectCreateRequireForImportRequire = Boolean(options.injectCreateRequireForImportRequire);\n  }\n\n  process() {\n    // TypeScript `import foo = require('foo');` should always just be translated to plain require.\n    if (this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._import, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.eq)) {\n      return this.processImportEquals();\n    }\n    if (\n      this.tokens.matches4(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._import, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.eq) &&\n      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._type)\n    ) {\n      // import type T = require('T')\n      this.tokens.removeInitialToken();\n      // This construct is always exactly 8 tokens long, so remove the 7 remaining tokens.\n      for (let i = 0; i < 7; i++) {\n        this.tokens.removeToken();\n      }\n      return true;\n    }\n    if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.eq)) {\n      this.tokens.replaceToken(\"module.exports\");\n      return true;\n    }\n    if (\n      this.tokens.matches5(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._import, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.eq) &&\n      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 2, _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._type)\n    ) {\n      // export import type T = require('T')\n      this.tokens.removeInitialToken();\n      // This construct is always exactly 9 tokens long, so remove the 8 remaining tokens.\n      for (let i = 0; i < 8; i++) {\n        this.tokens.removeToken();\n      }\n      return true;\n    }\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._import)) {\n      return this.processImport();\n    }\n    if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._default)) {\n      return this.processExportDefault();\n    }\n    if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL)) {\n      return this.processNamedExports();\n    }\n    if (\n      this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name) &&\n      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._type)\n    ) {\n      // export type {a};\n      // export type {a as b};\n      // export type {a} from './b';\n      // export type * from './b';\n      // export type * as ns from './b';\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL)) {\n        while (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR)) {\n          this.tokens.removeToken();\n        }\n        this.tokens.removeToken();\n      } else {\n        // *\n        this.tokens.removeToken();\n        if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._as)) {\n          // as\n          this.tokens.removeToken();\n          // ns\n          this.tokens.removeToken();\n        }\n      }\n      // Remove type re-export `... } from './T'`\n      if (\n        this.tokens.matchesContextual(_parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._from) &&\n        this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.string)\n      ) {\n        this.tokens.removeToken();\n        this.tokens.removeToken();\n        (0,_util_removeMaybeImportAttributes__WEBPACK_IMPORTED_MODULE_7__.removeMaybeImportAttributes)(this.tokens);\n      }\n      return true;\n    }\n    return false;\n  }\n\n   processImportEquals() {\n    const importName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);\n    if (this.shouldAutomaticallyElideImportedName(importName)) {\n      // If this name is only used as a type, elide the whole import.\n      (0,_util_elideImportEquals__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this.tokens);\n    } else if (this.injectCreateRequireForImportRequire) {\n      // We're using require in an environment (Node ESM) that doesn't provide\n      // it as a global, so generate a helper to import it.\n      // import -> const\n      this.tokens.replaceToken(\"const\");\n      // Foo\n      this.tokens.copyToken();\n      // =\n      this.tokens.copyToken();\n      // require\n      this.tokens.replaceToken(this.helperManager.getHelperName(\"require\"));\n    } else {\n      // Otherwise, just switch `import` to `const`.\n      this.tokens.replaceToken(\"const\");\n    }\n    return true;\n  }\n\n   processImport() {\n    if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._import, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenL)) {\n      // Dynamic imports don't need to be transformed.\n      return false;\n    }\n\n    const snapshot = this.tokens.snapshot();\n    const allImportsRemoved = this.removeImportTypeBindings();\n    if (allImportsRemoved) {\n      this.tokens.restoreToSnapshot(snapshot);\n      while (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.string)) {\n        this.tokens.removeToken();\n      }\n      this.tokens.removeToken();\n      (0,_util_removeMaybeImportAttributes__WEBPACK_IMPORTED_MODULE_7__.removeMaybeImportAttributes)(this.tokens);\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.semi)) {\n        this.tokens.removeToken();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Remove type bindings from this import, leaving the rest of the import intact.\n   *\n   * Return true if this import was ONLY types, and thus is eligible for removal. This will bail out\n   * of the replacement operation, so we can return early here.\n   */\n   removeImportTypeBindings() {\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._import);\n    if (\n      this.tokens.matchesContextual(_parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._type) &&\n      !this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.comma) &&\n      !this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._from)\n    ) {\n      // This is an \"import type\" statement, so exit early.\n      return true;\n    }\n\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.string)) {\n      // This is a bare import, so we should proceed with the import.\n      this.tokens.copyToken();\n      return false;\n    }\n\n    // Skip the \"module\" token in import reflection.\n    if (\n      this.tokens.matchesContextual(_parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._module) &&\n      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 2, _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._from)\n    ) {\n      this.tokens.copyToken();\n    }\n\n    let foundNonTypeImport = false;\n    let foundAnyNamedImport = false;\n    let needsComma = false;\n\n    // Handle default import.\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name)) {\n      if (this.shouldAutomaticallyElideImportedName(this.tokens.identifierName())) {\n        this.tokens.removeToken();\n        if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.comma)) {\n          this.tokens.removeToken();\n        }\n      } else {\n        foundNonTypeImport = true;\n        this.tokens.copyToken();\n        if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.comma)) {\n          // We're in a statement like:\n          // import A, * as B from './A';\n          // or\n          // import A, {foo} from './A';\n          // where the `A` is being kept. The comma should be removed if an only\n          // if the next part of the import statement is elided, but that's hard\n          // to determine at this point in the code. Instead, always remove it\n          // and set a flag to add it back if necessary.\n          needsComma = true;\n          this.tokens.removeToken();\n        }\n      }\n    }\n\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.star)) {\n      if (this.shouldAutomaticallyElideImportedName(this.tokens.identifierNameAtRelativeIndex(2))) {\n        this.tokens.removeToken();\n        this.tokens.removeToken();\n        this.tokens.removeToken();\n      } else {\n        if (needsComma) {\n          this.tokens.appendCode(\",\");\n        }\n        foundNonTypeImport = true;\n        this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.star);\n        this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name);\n        this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name);\n      }\n    } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL)) {\n      if (needsComma) {\n        this.tokens.appendCode(\",\");\n      }\n      this.tokens.copyToken();\n      while (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR)) {\n        foundAnyNamedImport = true;\n        const specifierInfo = (0,_util_getImportExportSpecifierInfo__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this.tokens);\n        if (\n          specifierInfo.isType ||\n          this.shouldAutomaticallyElideImportedName(specifierInfo.rightName)\n        ) {\n          while (this.tokens.currentIndex() < specifierInfo.endIndex) {\n            this.tokens.removeToken();\n          }\n          if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.comma)) {\n            this.tokens.removeToken();\n          }\n        } else {\n          foundNonTypeImport = true;\n          while (this.tokens.currentIndex() < specifierInfo.endIndex) {\n            this.tokens.copyToken();\n          }\n          if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.comma)) {\n            this.tokens.copyToken();\n          }\n        }\n      }\n      this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR);\n    }\n\n    if (this.keepUnusedImports) {\n      return false;\n    }\n    if (this.isTypeScriptTransformEnabled) {\n      return !foundNonTypeImport;\n    } else if (this.isFlowTransformEnabled) {\n      // In Flow, unlike TS, `import {} from 'foo';` preserves the import.\n      return foundAnyNamedImport && !foundNonTypeImport;\n    } else {\n      return false;\n    }\n  }\n\n   shouldAutomaticallyElideImportedName(name) {\n    return (\n      this.isTypeScriptTransformEnabled &&\n      !this.keepUnusedImports &&\n      !this.nonTypeIdentifiers.has(name)\n    );\n  }\n\n   processExportDefault() {\n    if (\n      (0,_util_shouldElideDefaultExport__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\n        this.isTypeScriptTransformEnabled,\n        this.keepUnusedImports,\n        this.tokens,\n        this.declarationInfo,\n      )\n    ) {\n      // If the exported value is just an identifier and should be elided by TypeScript\n      // rules, then remove it entirely. It will always have the form `export default e`,\n      // where `e` is an identifier.\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      this.tokens.removeToken();\n      return true;\n    }\n\n    const alreadyHasName =\n      this.tokens.matches4(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._default, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._function, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name) ||\n      // export default async function\n      (this.tokens.matches5(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._default, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._function, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name) &&\n        this.tokens.matchesContextualAtIndex(\n          this.tokens.currentIndex() + 2,\n          _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._async,\n        )) ||\n      this.tokens.matches4(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._default, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._class, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name) ||\n      this.tokens.matches5(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._default, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._abstract, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._class, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name);\n\n    if (!alreadyHasName && this.reactHotLoaderTransformer) {\n      // This is a plain \"export default E\" statement and we need to assign E to a variable.\n      // Change \"export default E\" to \"let _default; export default _default = E\"\n      const defaultVarName = this.nameManager.claimFreeName(\"_default\");\n      this.tokens.replaceToken(`let ${defaultVarName}; export`);\n      this.tokens.copyToken();\n      this.tokens.appendCode(` ${defaultVarName} =`);\n      this.reactHotLoaderTransformer.setExtractedDefaultExportName(defaultVarName);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Handle a statement with one of these forms:\n   * export {a, type b};\n   * export {c, type d} from 'foo';\n   *\n   * In both cases, any explicit type exports should be removed. In the first\n   * case, we also need to handle implicit export elision for names declared as\n   * types. In the second case, we must NOT do implicit named export elision,\n   * but we must remove the runtime import if all exports are type exports.\n   */\n   processNamedExports() {\n    if (!this.isTypeScriptTransformEnabled) {\n      return false;\n    }\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export);\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL);\n\n    const isReExport = (0,_util_isExportFrom__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this.tokens);\n    let foundNonTypeExport = false;\n    while (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR)) {\n      const specifierInfo = (0,_util_getImportExportSpecifierInfo__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this.tokens);\n      if (\n        specifierInfo.isType ||\n        (!isReExport && this.shouldElideExportedName(specifierInfo.leftName))\n      ) {\n        // Type export, so remove all tokens, including any comma.\n        while (this.tokens.currentIndex() < specifierInfo.endIndex) {\n          this.tokens.removeToken();\n        }\n        if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.comma)) {\n          this.tokens.removeToken();\n        }\n      } else {\n        // Non-type export, so copy all tokens, including any comma.\n        foundNonTypeExport = true;\n        while (this.tokens.currentIndex() < specifierInfo.endIndex) {\n          this.tokens.copyToken();\n        }\n        if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.comma)) {\n          this.tokens.copyToken();\n        }\n      }\n    }\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR);\n\n    if (!this.keepUnusedImports && isReExport && !foundNonTypeExport) {\n      // This is a type-only re-export, so skip evaluating the other module. Technically this\n      // leaves the statement as `export {}`, but that's ok since that's a no-op.\n      this.tokens.removeToken();\n      this.tokens.removeToken();\n      (0,_util_removeMaybeImportAttributes__WEBPACK_IMPORTED_MODULE_7__.removeMaybeImportAttributes)(this.tokens);\n    }\n\n    return true;\n  }\n\n  /**\n   * ESM elides all imports with the rule that we only elide if we see that it's\n   * a type and never see it as a value. This is in contrast to CJS, which\n   * elides imports that are completely unknown.\n   */\n   shouldElideExportedName(name) {\n    return (\n      this.isTypeScriptTransformEnabled &&\n      !this.keepUnusedImports &&\n      this.declarationInfo.typeDeclarations.has(name) &&\n      !this.declarationInfo.valueDeclarations.has(name)\n    );\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/transformers/ESMImportTransformer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/transformers/FlowTransformer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/transformers/FlowTransformer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FlowTransformer)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _Transformer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/Transformer.js\");\n\n\n\n\n\n\nclass FlowTransformer extends _Transformer__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n  constructor(\n     rootTransformer,\n     tokens,\n     isImportsTransformEnabled,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.isImportsTransformEnabled = isImportsTransformEnabled;;\n  }\n\n  process() {\n    if (\n      this.rootTransformer.processPossibleArrowParamEnd() ||\n      this.rootTransformer.processPossibleAsyncArrowWithTypeParams() ||\n      this.rootTransformer.processPossibleTypeRange()\n    ) {\n      return true;\n    }\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._enum)) {\n      this.processEnum();\n      return true;\n    }\n    if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._enum)) {\n      this.processNamedExportEnum();\n      return true;\n    }\n    if (this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._default, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._enum)) {\n      this.processDefaultExportEnum();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Handle a declaration like:\n   * export enum E ...\n   *\n   * With this imports transform, this becomes:\n   * const E = [[enum]]; exports.E = E;\n   *\n   * otherwise, it becomes:\n   * export const E = [[enum]];\n   */\n  processNamedExportEnum() {\n    if (this.isImportsTransformEnabled) {\n      // export\n      this.tokens.removeInitialToken();\n      const enumName = this.tokens.identifierNameAtRelativeIndex(1);\n      this.processEnum();\n      this.tokens.appendCode(` exports.${enumName} = ${enumName};`);\n    } else {\n      this.tokens.copyToken();\n      this.processEnum();\n    }\n  }\n\n  /**\n   * Handle a declaration like:\n   * export default enum E\n   *\n   * With the imports transform, this becomes:\n   * const E = [[enum]]; exports.default = E;\n   *\n   * otherwise, it becomes:\n   * const E = [[enum]]; export default E;\n   */\n  processDefaultExportEnum() {\n    // export\n    this.tokens.removeInitialToken();\n    // default\n    this.tokens.removeToken();\n    const enumName = this.tokens.identifierNameAtRelativeIndex(1);\n    this.processEnum();\n    if (this.isImportsTransformEnabled) {\n      this.tokens.appendCode(` exports.default = ${enumName};`);\n    } else {\n      this.tokens.appendCode(` export default ${enumName};`);\n    }\n  }\n\n  /**\n   * Transpile flow enums to invoke the \"flow-enums-runtime\" library.\n   *\n   * Currently, the transpiled code always uses `require(\"flow-enums-runtime\")`,\n   * but if future flexibility is needed, we could expose a config option for\n   * this string (similar to configurable JSX). Even when targeting ESM, the\n   * default behavior of babel-plugin-transform-flow-enums is to use require\n   * rather than injecting an import.\n   *\n   * Flow enums are quite a bit simpler than TS enums and have some convenient\n   * constraints:\n   * - Element initializers must be either always present or always absent. That\n   *   means that we can use fixed lookahead on the first element (if any) and\n   *   assume that all elements are like that.\n   * - The right-hand side of an element initializer must be a literal value,\n   *   not a complex expression and not referencing other elements. That means\n   *   we can simply copy a single token.\n   *\n   * Enums can be broken up into three basic cases:\n   *\n   * Mirrored enums:\n   * enum E {A, B}\n   *   ->\n   * const E = require(\"flow-enums-runtime\").Mirrored([\"A\", \"B\"]);\n   *\n   * Initializer enums:\n   * enum E {A = 1, B = 2}\n   *   ->\n   * const E = require(\"flow-enums-runtime\")({A: 1, B: 2});\n   *\n   * Symbol enums:\n   * enum E of symbol {A, B}\n   *   ->\n   * const E = require(\"flow-enums-runtime\")({A: Symbol(\"A\"), B: Symbol(\"B\")});\n   *\n   * We can statically detect which of the three cases this is by looking at the\n   * \"of\" declaration (if any) and seeing if the first element has an initializer.\n   * Since the other transform details are so similar between the three cases, we\n   * use a single implementation and vary the transform within processEnumElement\n   * based on case.\n   */\n  processEnum() {\n    // enum E -> const E\n    this.tokens.replaceToken(\"const\");\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name);\n\n    let isSymbolEnum = false;\n    if (this.tokens.matchesContextual(_parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._of)) {\n      this.tokens.removeToken();\n      isSymbolEnum = this.tokens.matchesContextual(_parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._symbol);\n      this.tokens.removeToken();\n    }\n    const hasInitializers = this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.eq);\n    this.tokens.appendCode(' = require(\"flow-enums-runtime\")');\n\n    const isMirrored = !isSymbolEnum && !hasInitializers;\n    this.tokens.replaceTokenTrimmingLeftWhitespace(isMirrored ? \".Mirrored([\" : \"({\");\n\n    while (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR)) {\n      // ... is allowed at the end and has no runtime behavior.\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.ellipsis)) {\n        this.tokens.removeToken();\n        break;\n      }\n      this.processEnumElement(isSymbolEnum, hasInitializers);\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.comma)) {\n        this.tokens.copyToken();\n      }\n    }\n\n    this.tokens.replaceToken(isMirrored ? \"]);\" : \"});\");\n  }\n\n  /**\n   * Process an individual enum element, producing either an array element or an\n   * object element based on what type of enum this is.\n   */\n  processEnumElement(isSymbolEnum, hasInitializers) {\n    if (isSymbolEnum) {\n      // Symbol enums never have initializers and are expanded to object elements.\n      // A, -> A: Symbol(\"A\"),\n      const elementName = this.tokens.identifierName();\n      this.tokens.copyToken();\n      this.tokens.appendCode(`: Symbol(\"${elementName}\")`);\n    } else if (hasInitializers) {\n      // Initializers are expanded to object elements.\n      // A = 1, -> A: 1,\n      this.tokens.copyToken();\n      this.tokens.replaceTokenTrimmingLeftWhitespace(\":\");\n      this.tokens.copyToken();\n    } else {\n      // Enum elements without initializers become string literal array elements.\n      // A, -> \"A\",\n      this.tokens.replaceToken(`\"${this.tokens.identifierName()}\"`);\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/transformers/FlowTransformer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/transformers/JSXTransformer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/transformers/JSXTransformer.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ JSXTransformer),\n/* harmony export */   startsWithLowerCase: () => (/* binding */ startsWithLowerCase)\n/* harmony export */ });\n/* harmony import */ var _parser_plugins_jsx_xhtml__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/plugins/jsx/xhtml */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/plugins/jsx/xhtml.js\");\n/* harmony import */ var _parser_tokenizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tokenizer */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../parser/util/charcodes */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/charcodes.js\");\n/* harmony import */ var _util_getJSXPragmaInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/getJSXPragmaInfo */ \"(ssr)/./node_modules/sucrase/dist/esm/util/getJSXPragmaInfo.js\");\n/* harmony import */ var _Transformer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Transformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/Transformer.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nclass JSXTransformer extends _Transformer__WEBPACK_IMPORTED_MODULE_5__[\"default\"] {\n  \n  \n  \n\n  // State for calculating the line number of each JSX tag in development.\n  __init() {this.lastLineNumber = 1}\n  __init2() {this.lastIndex = 0}\n\n  // In development, variable name holding the name of the current file.\n  __init3() {this.filenameVarName = null}\n  // Mapping of claimed names for imports in the automatic transform, e,g.\n  // {jsx: \"_jsx\"}. This determines which imports to generate in the prefix.\n  __init4() {this.esmAutomaticImportNameResolutions = {}}\n  // When automatically adding imports in CJS mode, we store the variable name\n  // holding the imported CJS module so we can require it in the prefix.\n  __init5() {this.cjsAutomaticModuleNameResolutions = {}}\n\n  constructor(\n     rootTransformer,\n     tokens,\n     importProcessor,\n     nameManager,\n     options,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.importProcessor = importProcessor;this.nameManager = nameManager;this.options = options;JSXTransformer.prototype.__init.call(this);JSXTransformer.prototype.__init2.call(this);JSXTransformer.prototype.__init3.call(this);JSXTransformer.prototype.__init4.call(this);JSXTransformer.prototype.__init5.call(this);;\n    this.jsxPragmaInfo = (0,_util_getJSXPragmaInfo__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(options);\n    this.isAutomaticRuntime = options.jsxRuntime === \"automatic\";\n    this.jsxImportSource = options.jsxImportSource || \"react\";\n  }\n\n  process() {\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagStart)) {\n      this.processJSXTag();\n      return true;\n    }\n    return false;\n  }\n\n  getPrefixCode() {\n    let prefix = \"\";\n    if (this.filenameVarName) {\n      prefix += `const ${this.filenameVarName} = ${JSON.stringify(this.options.filePath || \"\")};`;\n    }\n    if (this.isAutomaticRuntime) {\n      if (this.importProcessor) {\n        // CJS mode: emit require statements for all modules that were referenced.\n        for (const [path, resolvedName] of Object.entries(this.cjsAutomaticModuleNameResolutions)) {\n          prefix += `var ${resolvedName} = require(\"${path}\");`;\n        }\n      } else {\n        // ESM mode: consolidate and emit import statements for referenced names.\n        const {createElement: createElementResolution, ...otherResolutions} =\n          this.esmAutomaticImportNameResolutions;\n        if (createElementResolution) {\n          prefix += `import {createElement as ${createElementResolution}} from \"${this.jsxImportSource}\";`;\n        }\n        const importSpecifiers = Object.entries(otherResolutions)\n          .map(([name, resolvedName]) => `${name} as ${resolvedName}`)\n          .join(\", \");\n        if (importSpecifiers) {\n          const importPath =\n            this.jsxImportSource + (this.options.production ? \"/jsx-runtime\" : \"/jsx-dev-runtime\");\n          prefix += `import {${importSpecifiers}} from \"${importPath}\";`;\n        }\n      }\n    }\n    return prefix;\n  }\n\n  processJSXTag() {\n    const {jsxRole, start} = this.tokens.currentToken();\n    // Calculate line number information at the very start (if in development\n    // mode) so that the information is guaranteed to be queried in token order.\n    const elementLocationCode = this.options.production ? null : this.getElementLocationCode(start);\n    if (this.isAutomaticRuntime && jsxRole !== _parser_tokenizer__WEBPACK_IMPORTED_MODULE_1__.JSXRole.KeyAfterPropSpread) {\n      this.transformTagToJSXFunc(elementLocationCode, jsxRole);\n    } else {\n      this.transformTagToCreateElement(elementLocationCode);\n    }\n  }\n\n  getElementLocationCode(firstTokenStart) {\n    const lineNumber = this.getLineNumberForIndex(firstTokenStart);\n    return `lineNumber: ${lineNumber}`;\n  }\n\n  /**\n   * Get the line number for this source position. This is calculated lazily and\n   * must be called in increasing order by index.\n   */\n  getLineNumberForIndex(index) {\n    const code = this.tokens.code;\n    while (this.lastIndex < index && this.lastIndex < code.length) {\n      if (code[this.lastIndex] === \"\\n\") {\n        this.lastLineNumber++;\n      }\n      this.lastIndex++;\n    }\n    return this.lastLineNumber;\n  }\n\n  /**\n   * Convert the current JSX element to a call to jsx, jsxs, or jsxDEV. This is\n   * the primary transformation for the automatic transform.\n   *\n   * Example:\n   * <div a={1} key={2}>Hello{x}</div>\n   * becomes\n   * jsxs('div', {a: 1, children: [\"Hello\", x]}, 2)\n   */\n  transformTagToJSXFunc(elementLocationCode, jsxRole) {\n    const isStatic = jsxRole === _parser_tokenizer__WEBPACK_IMPORTED_MODULE_1__.JSXRole.StaticChildren;\n    // First tag is always jsxTagStart.\n    this.tokens.replaceToken(this.getJSXFuncInvocationCode(isStatic));\n\n    let keyCode = null;\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagEnd)) {\n      // Fragment syntax.\n      this.tokens.replaceToken(`${this.getFragmentCode()}, {`);\n      this.processAutomaticChildrenAndEndProps(jsxRole);\n    } else {\n      // Normal open tag or self-closing tag.\n      this.processTagIntro();\n      this.tokens.appendCode(\", {\");\n      keyCode = this.processProps(true);\n\n      if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.slash, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagEnd)) {\n        // Self-closing tag, no children to add, so close the props.\n        this.tokens.appendCode(\"}\");\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagEnd)) {\n        // Tag with children.\n        this.tokens.removeToken();\n        this.processAutomaticChildrenAndEndProps(jsxRole);\n      } else {\n        throw new Error(\"Expected either /> or > at the end of the tag.\");\n      }\n      // If a key was present, move it to its own arg. Note that moving code\n      // like this will cause line numbers to get out of sync within the JSX\n      // element if the key expression has a newline in it. This is unfortunate,\n      // but hopefully should be rare.\n      if (keyCode) {\n        this.tokens.appendCode(`, ${keyCode}`);\n      }\n    }\n    if (!this.options.production) {\n      // If the key wasn't already added, add it now so we can correctly set\n      // positional args for jsxDEV.\n      if (keyCode === null) {\n        this.tokens.appendCode(\", void 0\");\n      }\n      this.tokens.appendCode(`, ${isStatic}, ${this.getDevSource(elementLocationCode)}, this`);\n    }\n    // We're at the close-tag or the end of a self-closing tag, so remove\n    // everything else and close the function call.\n    this.tokens.removeInitialToken();\n    while (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagEnd)) {\n      this.tokens.removeToken();\n    }\n    this.tokens.replaceToken(\")\");\n  }\n\n  /**\n   * Convert the current JSX element to a createElement call. In the classic\n   * runtime, this is the only case. In the automatic runtime, this is called\n   * as a fallback in some situations.\n   *\n   * Example:\n   * <div a={1} key={2}>Hello{x}</div>\n   * becomes\n   * React.createElement('div', {a: 1, key: 2}, \"Hello\", x)\n   */\n  transformTagToCreateElement(elementLocationCode) {\n    // First tag is always jsxTagStart.\n    this.tokens.replaceToken(this.getCreateElementInvocationCode());\n\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagEnd)) {\n      // Fragment syntax.\n      this.tokens.replaceToken(`${this.getFragmentCode()}, null`);\n      this.processChildren(true);\n    } else {\n      // Normal open tag or self-closing tag.\n      this.processTagIntro();\n      this.processPropsObjectWithDevInfo(elementLocationCode);\n\n      if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.slash, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagEnd)) {\n        // Self-closing tag; no children to process.\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagEnd)) {\n        // Tag with children and a close-tag; process the children as args.\n        this.tokens.removeToken();\n        this.processChildren(true);\n      } else {\n        throw new Error(\"Expected either /> or > at the end of the tag.\");\n      }\n    }\n    // We're at the close-tag or the end of a self-closing tag, so remove\n    // everything else and close the function call.\n    this.tokens.removeInitialToken();\n    while (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagEnd)) {\n      this.tokens.removeToken();\n    }\n    this.tokens.replaceToken(\")\");\n  }\n\n  /**\n   * Get the code for the relevant function for this context: jsx, jsxs,\n   * or jsxDEV. The following open-paren is included as well.\n   *\n   * These functions are only used for the automatic runtime, so they are always\n   * auto-imported, but the auto-import will be either CJS or ESM based on the\n   * target module format.\n   */\n  getJSXFuncInvocationCode(isStatic) {\n    if (this.options.production) {\n      if (isStatic) {\n        return this.claimAutoImportedFuncInvocation(\"jsxs\", \"/jsx-runtime\");\n      } else {\n        return this.claimAutoImportedFuncInvocation(\"jsx\", \"/jsx-runtime\");\n      }\n    } else {\n      return this.claimAutoImportedFuncInvocation(\"jsxDEV\", \"/jsx-dev-runtime\");\n    }\n  }\n\n  /**\n   * Return the code to use for the createElement function, e.g.\n   * `React.createElement`, including the following open-paren.\n   *\n   * This is the main function to use for the classic runtime. For the\n   * automatic runtime, this function is used as a fallback function to\n   * preserve behavior when there is a prop spread followed by an explicit\n   * key. In that automatic runtime case, the function should be automatically\n   * imported.\n   */\n  getCreateElementInvocationCode() {\n    if (this.isAutomaticRuntime) {\n      return this.claimAutoImportedFuncInvocation(\"createElement\", \"\");\n    } else {\n      const {jsxPragmaInfo} = this;\n      const resolvedPragmaBaseName = this.importProcessor\n        ? this.importProcessor.getIdentifierReplacement(jsxPragmaInfo.base) || jsxPragmaInfo.base\n        : jsxPragmaInfo.base;\n      return `${resolvedPragmaBaseName}${jsxPragmaInfo.suffix}(`;\n    }\n  }\n\n  /**\n   * Return the code to use as the component when compiling a shorthand\n   * fragment, e.g. `React.Fragment`.\n   *\n   * This may be called from either the classic or automatic runtime, and\n   * the value should be auto-imported for the automatic runtime.\n   */\n  getFragmentCode() {\n    if (this.isAutomaticRuntime) {\n      return this.claimAutoImportedName(\n        \"Fragment\",\n        this.options.production ? \"/jsx-runtime\" : \"/jsx-dev-runtime\",\n      );\n    } else {\n      const {jsxPragmaInfo} = this;\n      const resolvedFragmentPragmaBaseName = this.importProcessor\n        ? this.importProcessor.getIdentifierReplacement(jsxPragmaInfo.fragmentBase) ||\n          jsxPragmaInfo.fragmentBase\n        : jsxPragmaInfo.fragmentBase;\n      return resolvedFragmentPragmaBaseName + jsxPragmaInfo.fragmentSuffix;\n    }\n  }\n\n  /**\n   * Return code that invokes the given function.\n   *\n   * When the imports transform is enabled, use the CJSImportTransformer\n   * strategy of using `.call(void 0, ...` to avoid passing a `this` value in a\n   * situation that would otherwise look like a method call.\n   */\n  claimAutoImportedFuncInvocation(funcName, importPathSuffix) {\n    const funcCode = this.claimAutoImportedName(funcName, importPathSuffix);\n    if (this.importProcessor) {\n      return `${funcCode}.call(void 0, `;\n    } else {\n      return `${funcCode}(`;\n    }\n  }\n\n  claimAutoImportedName(funcName, importPathSuffix) {\n    if (this.importProcessor) {\n      // CJS mode: claim a name for the module and mark it for import.\n      const path = this.jsxImportSource + importPathSuffix;\n      if (!this.cjsAutomaticModuleNameResolutions[path]) {\n        this.cjsAutomaticModuleNameResolutions[path] =\n          this.importProcessor.getFreeIdentifierForPath(path);\n      }\n      return `${this.cjsAutomaticModuleNameResolutions[path]}.${funcName}`;\n    } else {\n      // ESM mode: claim a name for this function and add it to the names that\n      // should be auto-imported when the prefix is generated.\n      if (!this.esmAutomaticImportNameResolutions[funcName]) {\n        this.esmAutomaticImportNameResolutions[funcName] = this.nameManager.claimFreeName(\n          `_${funcName}`,\n        );\n      }\n      return this.esmAutomaticImportNameResolutions[funcName];\n    }\n  }\n\n  /**\n   * Process the first part of a tag, before any props.\n   */\n  processTagIntro() {\n    // Walk forward until we see one of these patterns:\n    // jsxName to start the first prop, preceded by another jsxName to end the tag name.\n    // jsxName to start the first prop, preceded by greaterThan to end the type argument.\n    // [open brace] to start the first prop.\n    // [jsxTagEnd] to end the open-tag.\n    // [slash, jsxTagEnd] to end the self-closing tag.\n    let introEnd = this.tokens.currentIndex() + 1;\n    while (\n      this.tokens.tokens[introEnd].isType ||\n      (!this.tokens.matches2AtIndex(introEnd - 1, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxName, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxName) &&\n        !this.tokens.matches2AtIndex(introEnd - 1, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.greaterThan, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxName) &&\n        !this.tokens.matches1AtIndex(introEnd, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL) &&\n        !this.tokens.matches1AtIndex(introEnd, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagEnd) &&\n        !this.tokens.matches2AtIndex(introEnd, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.slash, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagEnd))\n    ) {\n      introEnd++;\n    }\n    if (introEnd === this.tokens.currentIndex() + 1) {\n      const tagName = this.tokens.identifierName();\n      if (startsWithLowerCase(tagName)) {\n        this.tokens.replaceToken(`'${tagName}'`);\n      }\n    }\n    while (this.tokens.currentIndex() < introEnd) {\n      this.rootTransformer.processToken();\n    }\n  }\n\n  /**\n   * Starting at the beginning of the props, add the props argument to\n   * React.createElement, including the comma before it.\n   */\n  processPropsObjectWithDevInfo(elementLocationCode) {\n    const devProps = this.options.production\n      ? \"\"\n      : `__self: this, __source: ${this.getDevSource(elementLocationCode)}`;\n    if (!this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxName) && !this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL)) {\n      if (devProps) {\n        this.tokens.appendCode(`, {${devProps}}`);\n      } else {\n        this.tokens.appendCode(`, null`);\n      }\n      return;\n    }\n    this.tokens.appendCode(`, {`);\n    this.processProps(false);\n    if (devProps) {\n      this.tokens.appendCode(` ${devProps}}`);\n    } else {\n      this.tokens.appendCode(\"}\");\n    }\n  }\n\n  /**\n   * Transform the core part of the props, assuming that a { has already been\n   * inserted before us and that a } will be inserted after us.\n   *\n   * If extractKeyCode is true (i.e. when using any jsx... function), any prop\n   * named \"key\" has its code captured and returned rather than being emitted to\n   * the output code. This shifts line numbers, and emitting the code later will\n   * correct line numbers again. If no key is found or if extractKeyCode is\n   * false, this function returns null.\n   */\n  processProps(extractKeyCode) {\n    let keyCode = null;\n    while (true) {\n      if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxName, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.eq)) {\n        // This is a regular key={value} or key=\"value\" prop.\n        const propName = this.tokens.identifierName();\n        if (extractKeyCode && propName === \"key\") {\n          if (keyCode !== null) {\n            // The props list has multiple keys. Different implementations are\n            // inconsistent about what to do here: as of this writing, Babel and\n            // swc keep the *last* key and completely remove the rest, while\n            // TypeScript uses the *first* key and leaves the others as regular\n            // props. The React team collaborated with Babel on the\n            // implementation of this behavior, so presumably the Babel behavior\n            // is the one to use.\n            // Since we won't ever be emitting the previous key code, we need to\n            // at least emit its newlines here so that the line numbers match up\n            // in the long run.\n            this.tokens.appendCode(keyCode.replace(/[^\\n]/g, \"\"));\n          }\n          // key\n          this.tokens.removeToken();\n          // =\n          this.tokens.removeToken();\n          const snapshot = this.tokens.snapshot();\n          this.processPropValue();\n          keyCode = this.tokens.dangerouslyGetAndRemoveCodeSinceSnapshot(snapshot);\n          // Don't add a comma\n          continue;\n        } else {\n          this.processPropName(propName);\n          this.tokens.replaceToken(\": \");\n          this.processPropValue();\n        }\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxName)) {\n        // This is a shorthand prop like <input disabled />.\n        const propName = this.tokens.identifierName();\n        this.processPropName(propName);\n        this.tokens.appendCode(\": true\");\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL)) {\n        // This is prop spread, like <div {...getProps()}>, which we can pass\n        // through fairly directly as an object spread.\n        this.tokens.replaceToken(\"\");\n        this.rootTransformer.processBalancedCode();\n        this.tokens.replaceToken(\"\");\n      } else {\n        break;\n      }\n      this.tokens.appendCode(\",\");\n    }\n    return keyCode;\n  }\n\n  processPropName(propName) {\n    if (propName.includes(\"-\")) {\n      this.tokens.replaceToken(`'${propName}'`);\n    } else {\n      this.tokens.copyToken();\n    }\n  }\n\n  processPropValue() {\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL)) {\n      this.tokens.replaceToken(\"\");\n      this.rootTransformer.processBalancedCode();\n      this.tokens.replaceToken(\"\");\n    } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagStart)) {\n      this.processJSXTag();\n    } else {\n      this.processStringPropValue();\n    }\n  }\n\n  processStringPropValue() {\n    const token = this.tokens.currentToken();\n    const valueCode = this.tokens.code.slice(token.start + 1, token.end - 1);\n    const replacementCode = formatJSXTextReplacement(valueCode);\n    const literalCode = formatJSXStringValueLiteral(valueCode);\n    this.tokens.replaceToken(literalCode + replacementCode);\n  }\n\n  /**\n   * Starting in the middle of the props object literal, produce an additional\n   * prop for the children and close the object literal.\n   */\n  processAutomaticChildrenAndEndProps(jsxRole) {\n    if (jsxRole === _parser_tokenizer__WEBPACK_IMPORTED_MODULE_1__.JSXRole.StaticChildren) {\n      this.tokens.appendCode(\" children: [\");\n      this.processChildren(false);\n      this.tokens.appendCode(\"]}\");\n    } else {\n      // The parser information tells us whether we will see a real child or if\n      // all remaining children (if any) will resolve to empty. If there are no\n      // non-empty children, don't emit a children prop at all, but still\n      // process children so that we properly transform the code into nothing.\n      if (jsxRole === _parser_tokenizer__WEBPACK_IMPORTED_MODULE_1__.JSXRole.OneChild) {\n        this.tokens.appendCode(\" children: \");\n      }\n      this.processChildren(false);\n      this.tokens.appendCode(\"}\");\n    }\n  }\n\n  /**\n   * Transform children into a comma-separated list, which will be either\n   * arguments to createElement or array elements of a children prop.\n   */\n  processChildren(needsInitialComma) {\n    let needsComma = needsInitialComma;\n    while (true) {\n      if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagStart, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.slash)) {\n        // Closing tag, so no more children.\n        return;\n      }\n      let didEmitElement = false;\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL)) {\n        if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceL, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.braceR)) {\n          // Empty interpolations and comment-only interpolations are allowed\n          // and don't create an extra child arg.\n          this.tokens.replaceToken(\"\");\n          this.tokens.replaceToken(\"\");\n        } else {\n          // Interpolated expression.\n          this.tokens.replaceToken(needsComma ? \", \" : \"\");\n          this.rootTransformer.processBalancedCode();\n          this.tokens.replaceToken(\"\");\n          didEmitElement = true;\n        }\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxTagStart)) {\n        // Child JSX element\n        this.tokens.appendCode(needsComma ? \", \" : \"\");\n        this.processJSXTag();\n        didEmitElement = true;\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxText) || this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.jsxEmptyText)) {\n        didEmitElement = this.processChildTextElement(needsComma);\n      } else {\n        throw new Error(\"Unexpected token when processing JSX children.\");\n      }\n      if (didEmitElement) {\n        needsComma = true;\n      }\n    }\n  }\n\n  /**\n   * Turn a JSX text element into a string literal, or nothing at all if the JSX\n   * text resolves to the empty string.\n   *\n   * Returns true if a string literal is emitted, false otherwise.\n   */\n  processChildTextElement(needsComma) {\n    const token = this.tokens.currentToken();\n    const valueCode = this.tokens.code.slice(token.start, token.end);\n    const replacementCode = formatJSXTextReplacement(valueCode);\n    const literalCode = formatJSXTextLiteral(valueCode);\n    if (literalCode === '\"\"') {\n      this.tokens.replaceToken(replacementCode);\n      return false;\n    } else {\n      this.tokens.replaceToken(`${needsComma ? \", \" : \"\"}${literalCode}${replacementCode}`);\n      return true;\n    }\n  }\n\n  getDevSource(elementLocationCode) {\n    return `{fileName: ${this.getFilenameVarName()}, ${elementLocationCode}}`;\n  }\n\n  getFilenameVarName() {\n    if (!this.filenameVarName) {\n      this.filenameVarName = this.nameManager.claimFreeName(\"_jsxFileName\");\n    }\n    return this.filenameVarName;\n  }\n}\n\n/**\n * Spec for identifiers: https://tc39.github.io/ecma262/#prod-IdentifierStart.\n *\n * Really only treat anything starting with a-z as tag names.  `_`, `$`, `é`\n * should be treated as component names\n */\nfunction startsWithLowerCase(s) {\n  const firstChar = s.charCodeAt(0);\n  return firstChar >= _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_3__.charCodes.lowercaseA && firstChar <= _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_3__.charCodes.lowercaseZ;\n}\n\n/**\n * Turn the given jsxText string into a JS string literal. Leading and trailing\n * whitespace on lines is removed, except immediately after the open-tag and\n * before the close-tag. Empty lines are completely removed, and spaces are\n * added between lines after that.\n *\n * We use JSON.stringify to introduce escape characters as necessary, and trim\n * the start and end of each line and remove blank lines.\n */\nfunction formatJSXTextLiteral(text) {\n  let result = \"\";\n  let whitespace = \"\";\n\n  let isInInitialLineWhitespace = false;\n  let seenNonWhitespace = false;\n  for (let i = 0; i < text.length; i++) {\n    const c = text[i];\n    if (c === \" \" || c === \"\\t\" || c === \"\\r\") {\n      if (!isInInitialLineWhitespace) {\n        whitespace += c;\n      }\n    } else if (c === \"\\n\") {\n      whitespace = \"\";\n      isInInitialLineWhitespace = true;\n    } else {\n      if (seenNonWhitespace && isInInitialLineWhitespace) {\n        result += \" \";\n      }\n      result += whitespace;\n      whitespace = \"\";\n      if (c === \"&\") {\n        const {entity, newI} = processEntity(text, i + 1);\n        i = newI - 1;\n        result += entity;\n      } else {\n        result += c;\n      }\n      seenNonWhitespace = true;\n      isInInitialLineWhitespace = false;\n    }\n  }\n  if (!isInInitialLineWhitespace) {\n    result += whitespace;\n  }\n  return JSON.stringify(result);\n}\n\n/**\n * Produce the code that should be printed after the JSX text string literal,\n * with most content removed, but all newlines preserved and all spacing at the\n * end preserved.\n */\nfunction formatJSXTextReplacement(text) {\n  let numNewlines = 0;\n  let numSpaces = 0;\n  for (const c of text) {\n    if (c === \"\\n\") {\n      numNewlines++;\n      numSpaces = 0;\n    } else if (c === \" \") {\n      numSpaces++;\n    }\n  }\n  return \"\\n\".repeat(numNewlines) + \" \".repeat(numSpaces);\n}\n\n/**\n * Format a string in the value position of a JSX prop.\n *\n * Use the same implementation as convertAttribute from\n * babel-helper-builder-react-jsx.\n */\nfunction formatJSXStringValueLiteral(text) {\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    const c = text[i];\n    if (c === \"\\n\") {\n      if (/\\s/.test(text[i + 1])) {\n        result += \" \";\n        while (i < text.length && /\\s/.test(text[i + 1])) {\n          i++;\n        }\n      } else {\n        result += \"\\n\";\n      }\n    } else if (c === \"&\") {\n      const {entity, newI} = processEntity(text, i + 1);\n      result += entity;\n      i = newI - 1;\n    } else {\n      result += c;\n    }\n  }\n  return JSON.stringify(result);\n}\n\n/**\n * Starting at a &, see if there's an HTML entity (specified by name, decimal\n * char code, or hex char code) and return it if so.\n *\n * Modified from jsxReadString in babel-parser.\n */\nfunction processEntity(text, indexAfterAmpersand) {\n  let str = \"\";\n  let count = 0;\n  let entity;\n  let i = indexAfterAmpersand;\n\n  if (text[i] === \"#\") {\n    let radix = 10;\n    i++;\n    let numStart;\n    if (text[i] === \"x\") {\n      radix = 16;\n      i++;\n      numStart = i;\n      while (i < text.length && isHexDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    } else {\n      numStart = i;\n      while (i < text.length && isDecimalDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (text[i] === \";\") {\n      const numStr = text.slice(numStart, i);\n      if (numStr) {\n        i++;\n        entity = String.fromCodePoint(parseInt(numStr, radix));\n      }\n    }\n  } else {\n    while (i < text.length && count++ < 10) {\n      const ch = text[i];\n      i++;\n      if (ch === \";\") {\n        entity = _parser_plugins_jsx_xhtml__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(str);\n        break;\n      }\n      str += ch;\n    }\n  }\n\n  if (!entity) {\n    return {entity: \"&\", newI: indexAfterAmpersand};\n  }\n  return {entity, newI: i};\n}\n\nfunction isDecimalDigit(code) {\n  return code >= _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_3__.charCodes.digit0 && code <= _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_3__.charCodes.digit9;\n}\n\nfunction isHexDigit(code) {\n  return (\n    (code >= _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_3__.charCodes.digit0 && code <= _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_3__.charCodes.digit9) ||\n    (code >= _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_3__.charCodes.lowercaseA && code <= _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_3__.charCodes.lowercaseF) ||\n    (code >= _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_3__.charCodes.uppercaseA && code <= _parser_util_charcodes__WEBPACK_IMPORTED_MODULE_3__.charCodes.uppercaseF)\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/transformers/JSXTransformer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/transformers/JestHoistTransformer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/transformers/JestHoistTransformer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ JestHoistTransformer)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _Transformer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/Transformer.js\");\n function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\n\n\n\n\n\nconst JEST_GLOBAL_NAME = \"jest\";\nconst HOISTED_METHODS = [\"mock\", \"unmock\", \"enableAutomock\", \"disableAutomock\"];\n\n/**\n * Implementation of babel-plugin-jest-hoist, which hoists up some jest method\n * calls above the imports to allow them to override other imports.\n *\n * To preserve line numbers, rather than directly moving the jest.mock code, we\n * wrap each invocation in a function statement and then call the function from\n * the top of the file.\n */\nclass JestHoistTransformer extends _Transformer__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    __init() {this.hoistedFunctionNames = []}\n\n  constructor(\n     rootTransformer,\n     tokens,\n     nameManager,\n     importProcessor,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.nameManager = nameManager;this.importProcessor = importProcessor;JestHoistTransformer.prototype.__init.call(this);;\n  }\n\n  process() {\n    if (\n      this.tokens.currentToken().scopeDepth === 0 &&\n      this.tokens.matches4(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.dot, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.parenL) &&\n      this.tokens.identifierName() === JEST_GLOBAL_NAME\n    ) {\n      // TODO: This only works if imports transform is active, which it will be for jest.\n      //       But if jest adds module support and we no longer need the import transform, this needs fixing.\n      if (_optionalChain([this, 'access', _ => _.importProcessor, 'optionalAccess', _2 => _2.getGlobalNames, 'call', _3 => _3(), 'optionalAccess', _4 => _4.has, 'call', _5 => _5(JEST_GLOBAL_NAME)])) {\n        return false;\n      }\n      return this.extractHoistedCalls();\n    }\n\n    return false;\n  }\n\n  getHoistedCode() {\n    if (this.hoistedFunctionNames.length > 0) {\n      // This will be placed before module interop code, but that's fine since\n      // imports aren't allowed in module mock factories.\n      return this.hoistedFunctionNames.map((name) => `${name}();`).join(\"\");\n    }\n    return \"\";\n  }\n\n  /**\n   * Extracts any methods calls on the jest-object that should be hoisted.\n   *\n   * According to the jest docs, https://jestjs.io/docs/en/jest-object#jestmockmodulename-factory-options,\n   * mock, unmock, enableAutomock, disableAutomock, are the methods that should be hoisted.\n   *\n   * We do not apply the same checks of the arguments as babel-plugin-jest-hoist does.\n   */\n   extractHoistedCalls() {\n    // We're handling a chain of calls where `jest` may or may not need to be inserted for each call\n    // in the chain, so remove the initial `jest` to make the loop implementation cleaner.\n    this.tokens.removeToken();\n    // Track some state so that multiple non-hoisted chained calls in a row keep their chaining\n    // syntax.\n    let followsNonHoistedJestCall = false;\n\n    // Iterate through all chained calls on the jest object.\n    while (this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.dot, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.parenL)) {\n      const methodName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);\n      const shouldHoist = HOISTED_METHODS.includes(methodName);\n      if (shouldHoist) {\n        // We've matched e.g. `.mock(...)` or similar call.\n        // Replace the initial `.` with `function __jestHoist(){jest.`\n        const hoistedFunctionName = this.nameManager.claimFreeName(\"__jestHoist\");\n        this.hoistedFunctionNames.push(hoistedFunctionName);\n        this.tokens.replaceToken(`function ${hoistedFunctionName}(){${JEST_GLOBAL_NAME}.`);\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n        this.rootTransformer.processBalancedCode();\n        this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.parenR);\n        this.tokens.appendCode(\";}\");\n        followsNonHoistedJestCall = false;\n      } else {\n        // This is a non-hoisted method, so just transform the code as usual.\n        if (followsNonHoistedJestCall) {\n          // If we didn't hoist the previous call, we can leave the code as-is to chain off of the\n          // previous method call. It's important to preserve the code here because we don't know\n          // for sure that the method actually returned the jest object for chaining.\n          this.tokens.copyToken();\n        } else {\n          // If we hoisted the previous call, we know it returns the jest object back, so we insert\n          // the identifier `jest` to continue the chain.\n          this.tokens.replaceToken(`${JEST_GLOBAL_NAME}.`);\n        }\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n        this.rootTransformer.processBalancedCode();\n        this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.parenR);\n        followsNonHoistedJestCall = true;\n      }\n    }\n\n    return true;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/transformers/JestHoistTransformer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/transformers/NumericSeparatorTransformer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/transformers/NumericSeparatorTransformer.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NumericSeparatorTransformer)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _Transformer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/Transformer.js\");\n\n\n\n\nclass NumericSeparatorTransformer extends _Transformer__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n  constructor( tokens) {\n    super();this.tokens = tokens;;\n  }\n\n  process() {\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.num)) {\n      const code = this.tokens.currentTokenCode();\n      if (code.includes(\"_\")) {\n        this.tokens.replaceToken(code.replace(/_/g, \"\"));\n        return true;\n      }\n    }\n    return false;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS90cmFuc2Zvcm1lcnMvTnVtZXJpY1NlcGFyYXRvclRyYW5zZm9ybWVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwRDs7QUFFbEI7O0FBRXpCLDBDQUEwQyxvREFBVztBQUNwRTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBLDZCQUE2Qiw4REFBRTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1saWJyYXJ5LWRvY3MvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS90cmFuc2Zvcm1lcnMvTnVtZXJpY1NlcGFyYXRvclRyYW5zZm9ybWVyLmpzP2ZhOTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUb2tlblR5cGUgYXMgdHR9IGZyb20gXCIuLi9wYXJzZXIvdG9rZW5pemVyL3R5cGVzXCI7XG5cbmltcG9ydCBUcmFuc2Zvcm1lciBmcm9tIFwiLi9UcmFuc2Zvcm1lclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOdW1lcmljU2VwYXJhdG9yVHJhbnNmb3JtZXIgZXh0ZW5kcyBUcmFuc2Zvcm1lciB7XG4gIGNvbnN0cnVjdG9yKCB0b2tlbnMpIHtcbiAgICBzdXBlcigpO3RoaXMudG9rZW5zID0gdG9rZW5zOztcbiAgfVxuXG4gIHByb2Nlc3MoKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLm1hdGNoZXMxKHR0Lm51bSkpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSB0aGlzLnRva2Vucy5jdXJyZW50VG9rZW5Db2RlKCk7XG4gICAgICBpZiAoY29kZS5pbmNsdWRlcyhcIl9cIikpIHtcbiAgICAgICAgdGhpcy50b2tlbnMucmVwbGFjZVRva2VuKGNvZGUucmVwbGFjZSgvXy9nLCBcIlwiKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/transformers/NumericSeparatorTransformer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/transformers/OptionalCatchBindingTransformer.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/transformers/OptionalCatchBindingTransformer.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ OptionalCatchBindingTransformer)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _Transformer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/Transformer.js\");\n\n\n\n\n\nclass OptionalCatchBindingTransformer extends _Transformer__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n  constructor( tokens,  nameManager) {\n    super();this.tokens = tokens;this.nameManager = nameManager;;\n  }\n\n  process() {\n    if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._catch, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.braceL)) {\n      this.tokens.copyToken();\n      this.tokens.appendCode(` (${this.nameManager.claimFreeName(\"e\")})`);\n      return true;\n    }\n    return false;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS90cmFuc2Zvcm1lcnMvT3B0aW9uYWxDYXRjaEJpbmRpbmdUcmFuc2Zvcm1lci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQzBEOztBQUVsQjs7QUFFekIsOENBQThDLG9EQUFXO0FBQ3hFO0FBQ0EsWUFBWSxxQkFBcUI7QUFDakM7O0FBRUE7QUFDQSw2QkFBNkIsOERBQUUsU0FBUyw4REFBRTtBQUMxQztBQUNBLGtDQUFrQyxvQ0FBb0M7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3RyYW5zZm9ybWVycy9PcHRpb25hbENhdGNoQmluZGluZ1RyYW5zZm9ybWVyLmpzPzFiZjQiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge1Rva2VuVHlwZSBhcyB0dH0gZnJvbSBcIi4uL3BhcnNlci90b2tlbml6ZXIvdHlwZXNcIjtcblxuaW1wb3J0IFRyYW5zZm9ybWVyIGZyb20gXCIuL1RyYW5zZm9ybWVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wdGlvbmFsQ2F0Y2hCaW5kaW5nVHJhbnNmb3JtZXIgZXh0ZW5kcyBUcmFuc2Zvcm1lciB7XG4gIGNvbnN0cnVjdG9yKCB0b2tlbnMsICBuYW1lTWFuYWdlcikge1xuICAgIHN1cGVyKCk7dGhpcy50b2tlbnMgPSB0b2tlbnM7dGhpcy5uYW1lTWFuYWdlciA9IG5hbWVNYW5hZ2VyOztcbiAgfVxuXG4gIHByb2Nlc3MoKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLm1hdGNoZXMyKHR0Ll9jYXRjaCwgdHQuYnJhY2VMKSkge1xuICAgICAgdGhpcy50b2tlbnMuY29weVRva2VuKCk7XG4gICAgICB0aGlzLnRva2Vucy5hcHBlbmRDb2RlKGAgKCR7dGhpcy5uYW1lTWFuYWdlci5jbGFpbUZyZWVOYW1lKFwiZVwiKX0pYCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/transformers/OptionalCatchBindingTransformer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/transformers/OptionalChainingNullishTransformer.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/transformers/OptionalChainingNullishTransformer.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ OptionalChainingNullishTransformer)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _Transformer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/Transformer.js\");\n\n\n\n\n\n/**\n * Transformer supporting the optional chaining and nullish coalescing operators.\n *\n * Tech plan here:\n * https://github.com/alangpierce/sucrase/wiki/Sucrase-Optional-Chaining-and-Nullish-Coalescing-Technical-Plan\n *\n * The prefix and suffix code snippets are handled by TokenProcessor, and this transformer handles\n * the operators themselves.\n */\nclass OptionalChainingNullishTransformer extends _Transformer__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n  constructor( tokens,  nameManager) {\n    super();this.tokens = tokens;this.nameManager = nameManager;;\n  }\n\n  process() {\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.nullishCoalescing)) {\n      const token = this.tokens.currentToken();\n      if (this.tokens.tokens[token.nullishStartIndex].isAsyncOperation) {\n        this.tokens.replaceTokenTrimmingLeftWhitespace(\", async () => (\");\n      } else {\n        this.tokens.replaceTokenTrimmingLeftWhitespace(\", () => (\");\n      }\n      return true;\n    }\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._delete)) {\n      const nextToken = this.tokens.tokenAtRelativeIndex(1);\n      if (nextToken.isOptionalChainStart) {\n        this.tokens.removeInitialToken();\n        return true;\n      }\n    }\n    const token = this.tokens.currentToken();\n    const chainStart = token.subscriptStartIndex;\n    if (\n      chainStart != null &&\n      this.tokens.tokens[chainStart].isOptionalChainStart &&\n      // Super subscripts can't be optional (since super is never null/undefined), and the syntax\n      // relies on the subscript being intact, so leave this token alone.\n      this.tokens.tokenAtRelativeIndex(-1).type !== _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._super\n    ) {\n      const param = this.nameManager.claimFreeName(\"_\");\n      let arrowStartSnippet;\n      if (\n        chainStart > 0 &&\n        this.tokens.matches1AtIndex(chainStart - 1, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._delete) &&\n        this.isLastSubscriptInChain()\n      ) {\n        // Delete operations are special: we already removed the delete keyword, and to still\n        // perform a delete, we need to insert a delete in the very last part of the chain, which\n        // in correct code will always be a property access.\n        arrowStartSnippet = `${param} => delete ${param}`;\n      } else {\n        arrowStartSnippet = `${param} => ${param}`;\n      }\n      if (this.tokens.tokens[chainStart].isAsyncOperation) {\n        arrowStartSnippet = `async ${arrowStartSnippet}`;\n      }\n      if (\n        this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.questionDot, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.parenL) ||\n        this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.questionDot, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.lessThan)\n      ) {\n        if (this.justSkippedSuper()) {\n          this.tokens.appendCode(\".bind(this)\");\n        }\n        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalCall', ${arrowStartSnippet}`);\n      } else if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.questionDot, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.bracketL)) {\n        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalAccess', ${arrowStartSnippet}`);\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.questionDot)) {\n        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalAccess', ${arrowStartSnippet}.`);\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.dot)) {\n        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'access', ${arrowStartSnippet}.`);\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.bracketL)) {\n        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'access', ${arrowStartSnippet}[`);\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.parenL)) {\n        if (this.justSkippedSuper()) {\n          this.tokens.appendCode(\".bind(this)\");\n        }\n        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'call', ${arrowStartSnippet}(`);\n      } else {\n        throw new Error(\"Unexpected subscript operator in optional chain.\");\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Determine if the current token is the last of its chain, so that we know whether it's eligible\n   * to have a delete op inserted.\n   *\n   * We can do this by walking forward until we determine one way or another. Each\n   * isOptionalChainStart token must be paired with exactly one isOptionalChainEnd token after it in\n   * a nesting way, so we can track depth and walk to the end of the chain (the point where the\n   * depth goes negative) and see if any other subscript token is after us in the chain.\n   */\n  isLastSubscriptInChain() {\n    let depth = 0;\n    for (let i = this.tokens.currentIndex() + 1; ; i++) {\n      if (i >= this.tokens.tokens.length) {\n        throw new Error(\"Reached the end of the code while finding the end of the access chain.\");\n      }\n      if (this.tokens.tokens[i].isOptionalChainStart) {\n        depth++;\n      } else if (this.tokens.tokens[i].isOptionalChainEnd) {\n        depth--;\n      }\n      if (depth < 0) {\n        return true;\n      }\n\n      // This subscript token is a later one in the same chain.\n      if (depth === 0 && this.tokens.tokens[i].subscriptStartIndex != null) {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Determine if we are the open-paren in an expression like super.a()?.b.\n   *\n   * We can do this by walking backward to find the previous subscript. If that subscript was\n   * preceded by a super, then we must be the subscript after it, so if this is a call expression,\n   * we'll need to attach the right context.\n   */\n  justSkippedSuper() {\n    let depth = 0;\n    let index = this.tokens.currentIndex() - 1;\n    while (true) {\n      if (index < 0) {\n        throw new Error(\n          \"Reached the start of the code while finding the start of the access chain.\",\n        );\n      }\n      if (this.tokens.tokens[index].isOptionalChainStart) {\n        depth--;\n      } else if (this.tokens.tokens[index].isOptionalChainEnd) {\n        depth++;\n      }\n      if (depth < 0) {\n        return false;\n      }\n\n      // This subscript token is a later one in the same chain.\n      if (depth === 0 && this.tokens.tokens[index].subscriptStartIndex != null) {\n        return this.tokens.tokens[index - 1].type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._super;\n      }\n      index--;\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/transformers/OptionalChainingNullishTransformer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/transformers/ReactDisplayNameTransformer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/transformers/ReactDisplayNameTransformer.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ReactDisplayNameTransformer)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _Transformer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/Transformer.js\");\n\n\n\n\n\n\n\n\n/**\n * Implementation of babel-plugin-transform-react-display-name, which adds a\n * display name to usages of React.createClass and createReactClass.\n */\nclass ReactDisplayNameTransformer extends _Transformer__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n  constructor(\n     rootTransformer,\n     tokens,\n     importProcessor,\n     options,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.importProcessor = importProcessor;this.options = options;;\n  }\n\n  process() {\n    const startIndex = this.tokens.currentIndex();\n    if (this.tokens.identifierName() === \"createReactClass\") {\n      const newName =\n        this.importProcessor && this.importProcessor.getIdentifierReplacement(\"createReactClass\");\n      if (newName) {\n        this.tokens.replaceToken(`(0, ${newName})`);\n      } else {\n        this.tokens.copyToken();\n      }\n      this.tryProcessCreateClassCall(startIndex);\n      return true;\n    }\n    if (\n      this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.dot, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name) &&\n      this.tokens.identifierName() === \"React\" &&\n      this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 2) === \"createClass\"\n    ) {\n      const newName = this.importProcessor\n        ? this.importProcessor.getIdentifierReplacement(\"React\") || \"React\"\n        : \"React\";\n      if (newName) {\n        this.tokens.replaceToken(newName);\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n      } else {\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n      }\n      this.tryProcessCreateClassCall(startIndex);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * This is called with the token position at the open-paren.\n   */\n   tryProcessCreateClassCall(startIndex) {\n    const displayName = this.findDisplayName(startIndex);\n    if (!displayName) {\n      return;\n    }\n\n    if (this.classNeedsDisplayName()) {\n      this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenL);\n      this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL);\n      this.tokens.appendCode(`displayName: '${displayName}',`);\n      this.rootTransformer.processBalancedCode();\n      this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR);\n      this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenR);\n    }\n  }\n\n   findDisplayName(startIndex) {\n    if (startIndex < 2) {\n      return null;\n    }\n    if (this.tokens.matches2AtIndex(startIndex - 2, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.eq)) {\n      // This is an assignment (or declaration) and the LHS is either an identifier or a member\n      // expression ending in an identifier, so use that identifier name.\n      return this.tokens.identifierNameAtIndex(startIndex - 2);\n    }\n    if (\n      startIndex >= 2 &&\n      this.tokens.tokens[startIndex - 2].identifierRole === _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ObjectKey\n    ) {\n      // This is an object literal value.\n      return this.tokens.identifierNameAtIndex(startIndex - 2);\n    }\n    if (this.tokens.matches2AtIndex(startIndex - 2, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._default)) {\n      return this.getDisplayNameFromFilename();\n    }\n    return null;\n  }\n\n   getDisplayNameFromFilename() {\n    const filePath = this.options.filePath || \"unknown\";\n    const pathSegments = filePath.split(\"/\");\n    const filename = pathSegments[pathSegments.length - 1];\n    const dotIndex = filename.lastIndexOf(\".\");\n    const baseFilename = dotIndex === -1 ? filename : filename.slice(0, dotIndex);\n    if (baseFilename === \"index\" && pathSegments[pathSegments.length - 2]) {\n      return pathSegments[pathSegments.length - 2];\n    } else {\n      return baseFilename;\n    }\n  }\n\n  /**\n   * We only want to add a display name when this is a function call containing\n   * one argument, which is an object literal without `displayName` as an\n   * existing key.\n   */\n   classNeedsDisplayName() {\n    let index = this.tokens.currentIndex();\n    if (!this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenL, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL)) {\n      return false;\n    }\n    // The block starts on the {, and we expect any displayName key to be in\n    // that context. We need to ignore other other contexts to avoid matching\n    // nested displayName keys.\n    const objectStartIndex = index + 1;\n    const objectContextId = this.tokens.tokens[objectStartIndex].contextId;\n    if (objectContextId == null) {\n      throw new Error(\"Expected non-null context ID on object open-brace.\");\n    }\n\n    for (; index < this.tokens.tokens.length; index++) {\n      const token = this.tokens.tokens[index];\n      if (token.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR && token.contextId === objectContextId) {\n        index++;\n        break;\n      }\n\n      if (\n        this.tokens.identifierNameAtIndex(index) === \"displayName\" &&\n        this.tokens.tokens[index].identifierRole === _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ObjectKey &&\n        token.contextId === objectContextId\n      ) {\n        // We found a displayName key, so bail out.\n        return false;\n      }\n    }\n\n    if (index === this.tokens.tokens.length) {\n      throw new Error(\"Unexpected end of input when processing React class.\");\n    }\n\n    // If we got this far, we know we have createClass with an object with no\n    // display name, so we want to proceed as long as that was the only argument.\n    return (\n      this.tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenR) ||\n      this.tokens.matches2AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.comma, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenR)\n    );\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS90cmFuc2Zvcm1lcnMvUmVhY3REaXNwbGF5TmFtZVRyYW5zZm9ybWVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVtRDtBQUNPOzs7QUFHbEI7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsMENBQTBDLG9EQUFXO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUNBQXVDLHFCQUFxQix1Q0FBdUM7QUFDL0c7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFFBQVE7QUFDaEQsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw4REFBRSxPQUFPLDhEQUFFLE1BQU0sOERBQUU7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0MsOERBQUU7QUFDdEMsb0NBQW9DLDhEQUFFO0FBQ3RDLDhDQUE4QyxZQUFZO0FBQzFEO0FBQ0Esb0NBQW9DLDhEQUFFO0FBQ3RDLG9DQUFvQyw4REFBRTtBQUN0QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELDhEQUFFLE9BQU8sOERBQUU7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELDZEQUFjO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELDhEQUFFLFVBQVUsOERBQUU7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsOERBQUUsU0FBUyw4REFBRTtBQUMzQztBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsbUNBQW1DO0FBQzlDO0FBQ0EseUJBQXlCLDhEQUFFO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscURBQXFELDZEQUFjO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLDhEQUFFO0FBQzNDLHlDQUF5Qyw4REFBRSxRQUFRLDhEQUFFO0FBQ3JEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3RyYW5zZm9ybWVycy9SZWFjdERpc3BsYXlOYW1lVHJhbnNmb3JtZXIuanM/ODk0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaW1wb3J0IHtJZGVudGlmaWVyUm9sZX0gZnJvbSBcIi4uL3BhcnNlci90b2tlbml6ZXJcIjtcbmltcG9ydCB7VG9rZW5UeXBlIGFzIHR0fSBmcm9tIFwiLi4vcGFyc2VyL3Rva2VuaXplci90eXBlc1wiO1xuXG5cbmltcG9ydCBUcmFuc2Zvcm1lciBmcm9tIFwiLi9UcmFuc2Zvcm1lclwiO1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIGJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tcmVhY3QtZGlzcGxheS1uYW1lLCB3aGljaCBhZGRzIGFcbiAqIGRpc3BsYXkgbmFtZSB0byB1c2FnZXMgb2YgUmVhY3QuY3JlYXRlQ2xhc3MgYW5kIGNyZWF0ZVJlYWN0Q2xhc3MuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWN0RGlzcGxheU5hbWVUcmFuc2Zvcm1lciBleHRlbmRzIFRyYW5zZm9ybWVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgIHJvb3RUcmFuc2Zvcm1lcixcbiAgICAgdG9rZW5zLFxuICAgICBpbXBvcnRQcm9jZXNzb3IsXG4gICAgIG9wdGlvbnMsXG4gICkge1xuICAgIHN1cGVyKCk7dGhpcy5yb290VHJhbnNmb3JtZXIgPSByb290VHJhbnNmb3JtZXI7dGhpcy50b2tlbnMgPSB0b2tlbnM7dGhpcy5pbXBvcnRQcm9jZXNzb3IgPSBpbXBvcnRQcm9jZXNzb3I7dGhpcy5vcHRpb25zID0gb3B0aW9uczs7XG4gIH1cblxuICBwcm9jZXNzKCkge1xuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSB0aGlzLnRva2Vucy5jdXJyZW50SW5kZXgoKTtcbiAgICBpZiAodGhpcy50b2tlbnMuaWRlbnRpZmllck5hbWUoKSA9PT0gXCJjcmVhdGVSZWFjdENsYXNzXCIpIHtcbiAgICAgIGNvbnN0IG5ld05hbWUgPVxuICAgICAgICB0aGlzLmltcG9ydFByb2Nlc3NvciAmJiB0aGlzLmltcG9ydFByb2Nlc3Nvci5nZXRJZGVudGlmaWVyUmVwbGFjZW1lbnQoXCJjcmVhdGVSZWFjdENsYXNzXCIpO1xuICAgICAgaWYgKG5ld05hbWUpIHtcbiAgICAgICAgdGhpcy50b2tlbnMucmVwbGFjZVRva2VuKGAoMCwgJHtuZXdOYW1lfSlgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG9rZW5zLmNvcHlUb2tlbigpO1xuICAgICAgfVxuICAgICAgdGhpcy50cnlQcm9jZXNzQ3JlYXRlQ2xhc3NDYWxsKHN0YXJ0SW5kZXgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIHRoaXMudG9rZW5zLm1hdGNoZXMzKHR0Lm5hbWUsIHR0LmRvdCwgdHQubmFtZSkgJiZcbiAgICAgIHRoaXMudG9rZW5zLmlkZW50aWZpZXJOYW1lKCkgPT09IFwiUmVhY3RcIiAmJlxuICAgICAgdGhpcy50b2tlbnMuaWRlbnRpZmllck5hbWVBdEluZGV4KHRoaXMudG9rZW5zLmN1cnJlbnRJbmRleCgpICsgMikgPT09IFwiY3JlYXRlQ2xhc3NcIlxuICAgICkge1xuICAgICAgY29uc3QgbmV3TmFtZSA9IHRoaXMuaW1wb3J0UHJvY2Vzc29yXG4gICAgICAgID8gdGhpcy5pbXBvcnRQcm9jZXNzb3IuZ2V0SWRlbnRpZmllclJlcGxhY2VtZW50KFwiUmVhY3RcIikgfHwgXCJSZWFjdFwiXG4gICAgICAgIDogXCJSZWFjdFwiO1xuICAgICAgaWYgKG5ld05hbWUpIHtcbiAgICAgICAgdGhpcy50b2tlbnMucmVwbGFjZVRva2VuKG5ld05hbWUpO1xuICAgICAgICB0aGlzLnRva2Vucy5jb3B5VG9rZW4oKTtcbiAgICAgICAgdGhpcy50b2tlbnMuY29weVRva2VuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRva2Vucy5jb3B5VG9rZW4oKTtcbiAgICAgICAgdGhpcy50b2tlbnMuY29weVRva2VuKCk7XG4gICAgICAgIHRoaXMudG9rZW5zLmNvcHlUb2tlbigpO1xuICAgICAgfVxuICAgICAgdGhpcy50cnlQcm9jZXNzQ3JlYXRlQ2xhc3NDYWxsKHN0YXJ0SW5kZXgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGNhbGxlZCB3aXRoIHRoZSB0b2tlbiBwb3NpdGlvbiBhdCB0aGUgb3Blbi1wYXJlbi5cbiAgICovXG4gICB0cnlQcm9jZXNzQ3JlYXRlQ2xhc3NDYWxsKHN0YXJ0SW5kZXgpIHtcbiAgICBjb25zdCBkaXNwbGF5TmFtZSA9IHRoaXMuZmluZERpc3BsYXlOYW1lKHN0YXJ0SW5kZXgpO1xuICAgIGlmICghZGlzcGxheU5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jbGFzc05lZWRzRGlzcGxheU5hbWUoKSkge1xuICAgICAgdGhpcy50b2tlbnMuY29weUV4cGVjdGVkVG9rZW4odHQucGFyZW5MKTtcbiAgICAgIHRoaXMudG9rZW5zLmNvcHlFeHBlY3RlZFRva2VuKHR0LmJyYWNlTCk7XG4gICAgICB0aGlzLnRva2Vucy5hcHBlbmRDb2RlKGBkaXNwbGF5TmFtZTogJyR7ZGlzcGxheU5hbWV9JyxgKTtcbiAgICAgIHRoaXMucm9vdFRyYW5zZm9ybWVyLnByb2Nlc3NCYWxhbmNlZENvZGUoKTtcbiAgICAgIHRoaXMudG9rZW5zLmNvcHlFeHBlY3RlZFRva2VuKHR0LmJyYWNlUik7XG4gICAgICB0aGlzLnRva2Vucy5jb3B5RXhwZWN0ZWRUb2tlbih0dC5wYXJlblIpO1xuICAgIH1cbiAgfVxuXG4gICBmaW5kRGlzcGxheU5hbWUoc3RhcnRJbmRleCkge1xuICAgIGlmIChzdGFydEluZGV4IDwgMikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLnRva2Vucy5tYXRjaGVzMkF0SW5kZXgoc3RhcnRJbmRleCAtIDIsIHR0Lm5hbWUsIHR0LmVxKSkge1xuICAgICAgLy8gVGhpcyBpcyBhbiBhc3NpZ25tZW50IChvciBkZWNsYXJhdGlvbikgYW5kIHRoZSBMSFMgaXMgZWl0aGVyIGFuIGlkZW50aWZpZXIgb3IgYSBtZW1iZXJcbiAgICAgIC8vIGV4cHJlc3Npb24gZW5kaW5nIGluIGFuIGlkZW50aWZpZXIsIHNvIHVzZSB0aGF0IGlkZW50aWZpZXIgbmFtZS5cbiAgICAgIHJldHVybiB0aGlzLnRva2Vucy5pZGVudGlmaWVyTmFtZUF0SW5kZXgoc3RhcnRJbmRleCAtIDIpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBzdGFydEluZGV4ID49IDIgJiZcbiAgICAgIHRoaXMudG9rZW5zLnRva2Vuc1tzdGFydEluZGV4IC0gMl0uaWRlbnRpZmllclJvbGUgPT09IElkZW50aWZpZXJSb2xlLk9iamVjdEtleVxuICAgICkge1xuICAgICAgLy8gVGhpcyBpcyBhbiBvYmplY3QgbGl0ZXJhbCB2YWx1ZS5cbiAgICAgIHJldHVybiB0aGlzLnRva2Vucy5pZGVudGlmaWVyTmFtZUF0SW5kZXgoc3RhcnRJbmRleCAtIDIpO1xuICAgIH1cbiAgICBpZiAodGhpcy50b2tlbnMubWF0Y2hlczJBdEluZGV4KHN0YXJ0SW5kZXggLSAyLCB0dC5fZXhwb3J0LCB0dC5fZGVmYXVsdCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldERpc3BsYXlOYW1lRnJvbUZpbGVuYW1lKCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgIGdldERpc3BsYXlOYW1lRnJvbUZpbGVuYW1lKCkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gdGhpcy5vcHRpb25zLmZpbGVQYXRoIHx8IFwidW5rbm93blwiO1xuICAgIGNvbnN0IHBhdGhTZWdtZW50cyA9IGZpbGVQYXRoLnNwbGl0KFwiL1wiKTtcbiAgICBjb25zdCBmaWxlbmFtZSA9IHBhdGhTZWdtZW50c1twYXRoU2VnbWVudHMubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgZG90SW5kZXggPSBmaWxlbmFtZS5sYXN0SW5kZXhPZihcIi5cIik7XG4gICAgY29uc3QgYmFzZUZpbGVuYW1lID0gZG90SW5kZXggPT09IC0xID8gZmlsZW5hbWUgOiBmaWxlbmFtZS5zbGljZSgwLCBkb3RJbmRleCk7XG4gICAgaWYgKGJhc2VGaWxlbmFtZSA9PT0gXCJpbmRleFwiICYmIHBhdGhTZWdtZW50c1twYXRoU2VnbWVudHMubGVuZ3RoIC0gMl0pIHtcbiAgICAgIHJldHVybiBwYXRoU2VnbWVudHNbcGF0aFNlZ21lbnRzLmxlbmd0aCAtIDJdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYmFzZUZpbGVuYW1lO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXZSBvbmx5IHdhbnQgdG8gYWRkIGEgZGlzcGxheSBuYW1lIHdoZW4gdGhpcyBpcyBhIGZ1bmN0aW9uIGNhbGwgY29udGFpbmluZ1xuICAgKiBvbmUgYXJndW1lbnQsIHdoaWNoIGlzIGFuIG9iamVjdCBsaXRlcmFsIHdpdGhvdXQgYGRpc3BsYXlOYW1lYCBhcyBhblxuICAgKiBleGlzdGluZyBrZXkuXG4gICAqL1xuICAgY2xhc3NOZWVkc0Rpc3BsYXlOYW1lKCkge1xuICAgIGxldCBpbmRleCA9IHRoaXMudG9rZW5zLmN1cnJlbnRJbmRleCgpO1xuICAgIGlmICghdGhpcy50b2tlbnMubWF0Y2hlczIodHQucGFyZW5MLCB0dC5icmFjZUwpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIFRoZSBibG9jayBzdGFydHMgb24gdGhlIHssIGFuZCB3ZSBleHBlY3QgYW55IGRpc3BsYXlOYW1lIGtleSB0byBiZSBpblxuICAgIC8vIHRoYXQgY29udGV4dC4gV2UgbmVlZCB0byBpZ25vcmUgb3RoZXIgb3RoZXIgY29udGV4dHMgdG8gYXZvaWQgbWF0Y2hpbmdcbiAgICAvLyBuZXN0ZWQgZGlzcGxheU5hbWUga2V5cy5cbiAgICBjb25zdCBvYmplY3RTdGFydEluZGV4ID0gaW5kZXggKyAxO1xuICAgIGNvbnN0IG9iamVjdENvbnRleHRJZCA9IHRoaXMudG9rZW5zLnRva2Vuc1tvYmplY3RTdGFydEluZGV4XS5jb250ZXh0SWQ7XG4gICAgaWYgKG9iamVjdENvbnRleHRJZCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBub24tbnVsbCBjb250ZXh0IElEIG9uIG9iamVjdCBvcGVuLWJyYWNlLlwiKTtcbiAgICB9XG5cbiAgICBmb3IgKDsgaW5kZXggPCB0aGlzLnRva2Vucy50b2tlbnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IHRoaXMudG9rZW5zLnRva2Vuc1tpbmRleF07XG4gICAgICBpZiAodG9rZW4udHlwZSA9PT0gdHQuYnJhY2VSICYmIHRva2VuLmNvbnRleHRJZCA9PT0gb2JqZWN0Q29udGV4dElkKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMudG9rZW5zLmlkZW50aWZpZXJOYW1lQXRJbmRleChpbmRleCkgPT09IFwiZGlzcGxheU5hbWVcIiAmJlxuICAgICAgICB0aGlzLnRva2Vucy50b2tlbnNbaW5kZXhdLmlkZW50aWZpZXJSb2xlID09PSBJZGVudGlmaWVyUm9sZS5PYmplY3RLZXkgJiZcbiAgICAgICAgdG9rZW4uY29udGV4dElkID09PSBvYmplY3RDb250ZXh0SWRcbiAgICAgICkge1xuICAgICAgICAvLyBXZSBmb3VuZCBhIGRpc3BsYXlOYW1lIGtleSwgc28gYmFpbCBvdXQuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPT09IHRoaXMudG9rZW5zLnRva2Vucy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgZW5kIG9mIGlucHV0IHdoZW4gcHJvY2Vzc2luZyBSZWFjdCBjbGFzcy5cIik7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZ290IHRoaXMgZmFyLCB3ZSBrbm93IHdlIGhhdmUgY3JlYXRlQ2xhc3Mgd2l0aCBhbiBvYmplY3Qgd2l0aCBub1xuICAgIC8vIGRpc3BsYXkgbmFtZSwgc28gd2Ugd2FudCB0byBwcm9jZWVkIGFzIGxvbmcgYXMgdGhhdCB3YXMgdGhlIG9ubHkgYXJndW1lbnQuXG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMudG9rZW5zLm1hdGNoZXMxQXRJbmRleChpbmRleCwgdHQucGFyZW5SKSB8fFxuICAgICAgdGhpcy50b2tlbnMubWF0Y2hlczJBdEluZGV4KGluZGV4LCB0dC5jb21tYSwgdHQucGFyZW5SKVxuICAgICk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/transformers/ReactDisplayNameTransformer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/transformers/ReactHotLoaderTransformer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/transformers/ReactHotLoaderTransformer.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ReactHotLoaderTransformer)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _Transformer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/Transformer.js\");\n\n\n\n\nclass ReactHotLoaderTransformer extends _Transformer__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n   __init() {this.extractedDefaultExportName = null}\n\n  constructor( tokens,  filePath) {\n    super();this.tokens = tokens;this.filePath = filePath;ReactHotLoaderTransformer.prototype.__init.call(this);;\n  }\n\n  setExtractedDefaultExportName(extractedDefaultExportName) {\n    this.extractedDefaultExportName = extractedDefaultExportName;\n  }\n\n  getPrefixCode() {\n    return `\n      (function () {\n        var enterModule = require('react-hot-loader').enterModule;\n        enterModule && enterModule(module);\n      })();`\n      .replace(/\\s+/g, \" \")\n      .trim();\n  }\n\n  getSuffixCode() {\n    const topLevelNames = new Set();\n    for (const token of this.tokens.tokens) {\n      if (\n        !token.isType &&\n        (0,_parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.isTopLevelDeclaration)(token) &&\n        token.identifierRole !== _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ImportDeclaration\n      ) {\n        topLevelNames.add(this.tokens.identifierNameForToken(token));\n      }\n    }\n    const namesToRegister = Array.from(topLevelNames).map((name) => ({\n      variableName: name,\n      uniqueLocalName: name,\n    }));\n    if (this.extractedDefaultExportName) {\n      namesToRegister.push({\n        variableName: this.extractedDefaultExportName,\n        uniqueLocalName: \"default\",\n      });\n    }\n    return `\n;(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n  var leaveModule = require('react-hot-loader').leaveModule;\n  if (!reactHotLoader) {\n    return;\n  }\n${namesToRegister\n  .map(\n    ({variableName, uniqueLocalName}) =>\n      `  reactHotLoader.register(${variableName}, \"${uniqueLocalName}\", ${JSON.stringify(\n        this.filePath || \"\",\n      )});`,\n  )\n  .join(\"\\n\")}\n  leaveModule(module);\n})();`;\n  }\n\n  process() {\n    return false;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS90cmFuc2Zvcm1lcnMvUmVhY3RIb3RMb2FkZXJUcmFuc2Zvcm1lci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEU7O0FBRWxDOztBQUV6Qix3Q0FBd0Msb0RBQVc7QUFDbEUsYUFBYTs7QUFFYjtBQUNBLFlBQVkscUJBQXFCLHlCQUF5QjtBQUMxRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sSUFBSTtBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx3RUFBcUI7QUFDN0IsaUNBQWlDLDZEQUFjO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLE1BQU0sOEJBQThCO0FBQ3BDLG1DQUFtQyxhQUFhLEtBQUssZ0JBQWdCLEtBQUs7QUFDMUU7QUFDQSxRQUFRLEVBQUU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxDQUFDLElBQUk7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3RyYW5zZm9ybWVycy9SZWFjdEhvdExvYWRlclRyYW5zZm9ybWVyLmpzPzA1OGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJZGVudGlmaWVyUm9sZSwgaXNUb3BMZXZlbERlY2xhcmF0aW9ufSBmcm9tIFwiLi4vcGFyc2VyL3Rva2VuaXplclwiO1xuXG5pbXBvcnQgVHJhbnNmb3JtZXIgZnJvbSBcIi4vVHJhbnNmb3JtZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVhY3RIb3RMb2FkZXJUcmFuc2Zvcm1lciBleHRlbmRzIFRyYW5zZm9ybWVyIHtcbiAgIF9faW5pdCgpIHt0aGlzLmV4dHJhY3RlZERlZmF1bHRFeHBvcnROYW1lID0gbnVsbH1cblxuICBjb25zdHJ1Y3RvciggdG9rZW5zLCAgZmlsZVBhdGgpIHtcbiAgICBzdXBlcigpO3RoaXMudG9rZW5zID0gdG9rZW5zO3RoaXMuZmlsZVBhdGggPSBmaWxlUGF0aDtSZWFjdEhvdExvYWRlclRyYW5zZm9ybWVyLnByb3RvdHlwZS5fX2luaXQuY2FsbCh0aGlzKTs7XG4gIH1cblxuICBzZXRFeHRyYWN0ZWREZWZhdWx0RXhwb3J0TmFtZShleHRyYWN0ZWREZWZhdWx0RXhwb3J0TmFtZSkge1xuICAgIHRoaXMuZXh0cmFjdGVkRGVmYXVsdEV4cG9ydE5hbWUgPSBleHRyYWN0ZWREZWZhdWx0RXhwb3J0TmFtZTtcbiAgfVxuXG4gIGdldFByZWZpeENvZGUoKSB7XG4gICAgcmV0dXJuIGBcbiAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbnRlck1vZHVsZSA9IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKS5lbnRlck1vZHVsZTtcbiAgICAgICAgZW50ZXJNb2R1bGUgJiYgZW50ZXJNb2R1bGUobW9kdWxlKTtcbiAgICAgIH0pKCk7YFxuICAgICAgLnJlcGxhY2UoL1xccysvZywgXCIgXCIpXG4gICAgICAudHJpbSgpO1xuICB9XG5cbiAgZ2V0U3VmZml4Q29kZSgpIHtcbiAgICBjb25zdCB0b3BMZXZlbE5hbWVzID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdGhpcy50b2tlbnMudG9rZW5zKSB7XG4gICAgICBpZiAoXG4gICAgICAgICF0b2tlbi5pc1R5cGUgJiZcbiAgICAgICAgaXNUb3BMZXZlbERlY2xhcmF0aW9uKHRva2VuKSAmJlxuICAgICAgICB0b2tlbi5pZGVudGlmaWVyUm9sZSAhPT0gSWRlbnRpZmllclJvbGUuSW1wb3J0RGVjbGFyYXRpb25cbiAgICAgICkge1xuICAgICAgICB0b3BMZXZlbE5hbWVzLmFkZCh0aGlzLnRva2Vucy5pZGVudGlmaWVyTmFtZUZvclRva2VuKHRva2VuKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG5hbWVzVG9SZWdpc3RlciA9IEFycmF5LmZyb20odG9wTGV2ZWxOYW1lcykubWFwKChuYW1lKSA9PiAoe1xuICAgICAgdmFyaWFibGVOYW1lOiBuYW1lLFxuICAgICAgdW5pcXVlTG9jYWxOYW1lOiBuYW1lLFxuICAgIH0pKTtcbiAgICBpZiAodGhpcy5leHRyYWN0ZWREZWZhdWx0RXhwb3J0TmFtZSkge1xuICAgICAgbmFtZXNUb1JlZ2lzdGVyLnB1c2goe1xuICAgICAgICB2YXJpYWJsZU5hbWU6IHRoaXMuZXh0cmFjdGVkRGVmYXVsdEV4cG9ydE5hbWUsXG4gICAgICAgIHVuaXF1ZUxvY2FsTmFtZTogXCJkZWZhdWx0XCIsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGBcbjsoZnVuY3Rpb24gKCkge1xuICB2YXIgcmVhY3RIb3RMb2FkZXIgPSByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykuZGVmYXVsdDtcbiAgdmFyIGxlYXZlTW9kdWxlID0gcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpLmxlYXZlTW9kdWxlO1xuICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4ke25hbWVzVG9SZWdpc3RlclxuICAubWFwKFxuICAgICh7dmFyaWFibGVOYW1lLCB1bmlxdWVMb2NhbE5hbWV9KSA9PlxuICAgICAgYCAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoJHt2YXJpYWJsZU5hbWV9LCBcIiR7dW5pcXVlTG9jYWxOYW1lfVwiLCAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICB0aGlzLmZpbGVQYXRoIHx8IFwiXCIsXG4gICAgICApfSk7YCxcbiAgKVxuICAuam9pbihcIlxcblwiKX1cbiAgbGVhdmVNb2R1bGUobW9kdWxlKTtcbn0pKCk7YDtcbiAgfVxuXG4gIHByb2Nlc3MoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/transformers/ReactHotLoaderTransformer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/transformers/RootTransformer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/transformers/RootTransformer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RootTransformer)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _util_getClassInfo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/getClassInfo */ \"(ssr)/./node_modules/sucrase/dist/esm/util/getClassInfo.js\");\n/* harmony import */ var _CJSImportTransformer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CJSImportTransformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/CJSImportTransformer.js\");\n/* harmony import */ var _ESMImportTransformer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ESMImportTransformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/ESMImportTransformer.js\");\n/* harmony import */ var _FlowTransformer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./FlowTransformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/FlowTransformer.js\");\n/* harmony import */ var _JestHoistTransformer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./JestHoistTransformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/JestHoistTransformer.js\");\n/* harmony import */ var _JSXTransformer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./JSXTransformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/JSXTransformer.js\");\n/* harmony import */ var _NumericSeparatorTransformer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./NumericSeparatorTransformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/NumericSeparatorTransformer.js\");\n/* harmony import */ var _OptionalCatchBindingTransformer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./OptionalCatchBindingTransformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/OptionalCatchBindingTransformer.js\");\n/* harmony import */ var _OptionalChainingNullishTransformer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./OptionalChainingNullishTransformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/OptionalChainingNullishTransformer.js\");\n/* harmony import */ var _ReactDisplayNameTransformer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ReactDisplayNameTransformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/ReactDisplayNameTransformer.js\");\n/* harmony import */ var _ReactHotLoaderTransformer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ReactHotLoaderTransformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/ReactHotLoaderTransformer.js\");\n/* harmony import */ var _TypeScriptTransformer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./TypeScriptTransformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/TypeScriptTransformer.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass RootTransformer {\n   __init() {this.transformers = []}\n  \n  \n   __init2() {this.generatedVariables = []}\n  \n  \n  \n  \n\n  constructor(\n    sucraseContext,\n    transforms,\n    enableLegacyBabel5ModuleInterop,\n    options,\n  ) {;RootTransformer.prototype.__init.call(this);RootTransformer.prototype.__init2.call(this);\n    this.nameManager = sucraseContext.nameManager;\n    this.helperManager = sucraseContext.helperManager;\n    const {tokenProcessor, importProcessor} = sucraseContext;\n    this.tokens = tokenProcessor;\n    this.isImportsTransformEnabled = transforms.includes(\"imports\");\n    this.isReactHotLoaderTransformEnabled = transforms.includes(\"react-hot-loader\");\n    this.disableESTransforms = Boolean(options.disableESTransforms);\n\n    if (!options.disableESTransforms) {\n      this.transformers.push(\n        new _OptionalChainingNullishTransformer__WEBPACK_IMPORTED_MODULE_10__[\"default\"](tokenProcessor, this.nameManager),\n      );\n      this.transformers.push(new _NumericSeparatorTransformer__WEBPACK_IMPORTED_MODULE_8__[\"default\"](tokenProcessor));\n      this.transformers.push(new _OptionalCatchBindingTransformer__WEBPACK_IMPORTED_MODULE_9__[\"default\"](tokenProcessor, this.nameManager));\n    }\n\n    if (transforms.includes(\"jsx\")) {\n      if (options.jsxRuntime !== \"preserve\") {\n        this.transformers.push(\n          new _JSXTransformer__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this, tokenProcessor, importProcessor, this.nameManager, options),\n        );\n      }\n      this.transformers.push(\n        new _ReactDisplayNameTransformer__WEBPACK_IMPORTED_MODULE_11__[\"default\"](this, tokenProcessor, importProcessor, options),\n      );\n    }\n\n    let reactHotLoaderTransformer = null;\n    if (transforms.includes(\"react-hot-loader\")) {\n      if (!options.filePath) {\n        throw new Error(\"filePath is required when using the react-hot-loader transform.\");\n      }\n      reactHotLoaderTransformer = new _ReactHotLoaderTransformer__WEBPACK_IMPORTED_MODULE_12__[\"default\"](tokenProcessor, options.filePath);\n      this.transformers.push(reactHotLoaderTransformer);\n    }\n\n    // Note that we always want to enable the imports transformer, even when the import transform\n    // itself isn't enabled, since we need to do type-only import pruning for both Flow and\n    // TypeScript.\n    if (transforms.includes(\"imports\")) {\n      if (importProcessor === null) {\n        throw new Error(\"Expected non-null importProcessor with imports transform enabled.\");\n      }\n      this.transformers.push(\n        new _CJSImportTransformer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](\n          this,\n          tokenProcessor,\n          importProcessor,\n          this.nameManager,\n          this.helperManager,\n          reactHotLoaderTransformer,\n          enableLegacyBabel5ModuleInterop,\n          Boolean(options.enableLegacyTypeScriptModuleInterop),\n          transforms.includes(\"typescript\"),\n          transforms.includes(\"flow\"),\n          Boolean(options.preserveDynamicImport),\n          Boolean(options.keepUnusedImports),\n        ),\n      );\n    } else {\n      this.transformers.push(\n        new _ESMImportTransformer__WEBPACK_IMPORTED_MODULE_4__[\"default\"](\n          tokenProcessor,\n          this.nameManager,\n          this.helperManager,\n          reactHotLoaderTransformer,\n          transforms.includes(\"typescript\"),\n          transforms.includes(\"flow\"),\n          Boolean(options.keepUnusedImports),\n          options,\n        ),\n      );\n    }\n\n    if (transforms.includes(\"flow\")) {\n      this.transformers.push(\n        new _FlowTransformer__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this, tokenProcessor, transforms.includes(\"imports\")),\n      );\n    }\n    if (transforms.includes(\"typescript\")) {\n      this.transformers.push(\n        new _TypeScriptTransformer__WEBPACK_IMPORTED_MODULE_13__[\"default\"](this, tokenProcessor, transforms.includes(\"imports\")),\n      );\n    }\n    if (transforms.includes(\"jest\")) {\n      this.transformers.push(\n        new _JestHoistTransformer__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this, tokenProcessor, this.nameManager, importProcessor),\n      );\n    }\n  }\n\n  transform() {\n    this.tokens.reset();\n    this.processBalancedCode();\n    const shouldAddUseStrict = this.isImportsTransformEnabled;\n    // \"use strict\" always needs to be first, so override the normal transformer order.\n    let prefix = shouldAddUseStrict ? '\"use strict\";' : \"\";\n    for (const transformer of this.transformers) {\n      prefix += transformer.getPrefixCode();\n    }\n    prefix += this.helperManager.emitHelpers();\n    prefix += this.generatedVariables.map((v) => ` var ${v};`).join(\"\");\n    for (const transformer of this.transformers) {\n      prefix += transformer.getHoistedCode();\n    }\n    let suffix = \"\";\n    for (const transformer of this.transformers) {\n      suffix += transformer.getSuffixCode();\n    }\n    const result = this.tokens.finish();\n    let {code} = result;\n    if (code.startsWith(\"#!\")) {\n      let newlineIndex = code.indexOf(\"\\n\");\n      if (newlineIndex === -1) {\n        newlineIndex = code.length;\n        code += \"\\n\";\n      }\n      return {\n        code: code.slice(0, newlineIndex + 1) + prefix + code.slice(newlineIndex + 1) + suffix,\n        // The hashbang line has no tokens, so shifting the tokens to account\n        // for prefix can happen normally.\n        mappings: this.shiftMappings(result.mappings, prefix.length),\n      };\n    } else {\n      return {\n        code: prefix + code + suffix,\n        mappings: this.shiftMappings(result.mappings, prefix.length),\n      };\n    }\n  }\n\n  processBalancedCode() {\n    let braceDepth = 0;\n    let parenDepth = 0;\n    while (!this.tokens.isAtEnd()) {\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL) || this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.dollarBraceL)) {\n        braceDepth++;\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR)) {\n        if (braceDepth === 0) {\n          return;\n        }\n        braceDepth--;\n      }\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenL)) {\n        parenDepth++;\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenR)) {\n        if (parenDepth === 0) {\n          return;\n        }\n        parenDepth--;\n      }\n      this.processToken();\n    }\n  }\n\n  processToken() {\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._class)) {\n      this.processClass();\n      return;\n    }\n    for (const transformer of this.transformers) {\n      const wasProcessed = transformer.process();\n      if (wasProcessed) {\n        return;\n      }\n    }\n    this.tokens.copyToken();\n  }\n\n  /**\n   * Skip past a class with a name and return that name.\n   */\n  processNamedClass() {\n    if (!this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._class, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name)) {\n      throw new Error(\"Expected identifier for exported class name.\");\n    }\n    const name = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);\n    this.processClass();\n    return name;\n  }\n\n  processClass() {\n    const classInfo = (0,_util_getClassInfo__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, this.tokens, this.nameManager, this.disableESTransforms);\n\n    // Both static and instance initializers need a class name to use to invoke the initializer, so\n    // assign to one if necessary.\n    const needsCommaExpression =\n      (classInfo.headerInfo.isExpression || !classInfo.headerInfo.className) &&\n      classInfo.staticInitializerNames.length + classInfo.instanceInitializerNames.length > 0;\n\n    let className = classInfo.headerInfo.className;\n    if (needsCommaExpression) {\n      className = this.nameManager.claimFreeName(\"_class\");\n      this.generatedVariables.push(className);\n      this.tokens.appendCode(` (${className} =`);\n    }\n\n    const classToken = this.tokens.currentToken();\n    const contextId = classToken.contextId;\n    if (contextId == null) {\n      throw new Error(\"Expected class to have a context ID.\");\n    }\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._class);\n    while (!this.tokens.matchesContextIdAndLabel(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL, contextId)) {\n      this.processToken();\n    }\n\n    this.processClassBody(classInfo, className);\n\n    const staticInitializerStatements = classInfo.staticInitializerNames.map(\n      (name) => `${className}.${name}()`,\n    );\n    if (needsCommaExpression) {\n      this.tokens.appendCode(\n        `, ${staticInitializerStatements.map((s) => `${s}, `).join(\"\")}${className})`,\n      );\n    } else if (classInfo.staticInitializerNames.length > 0) {\n      this.tokens.appendCode(` ${staticInitializerStatements.map((s) => `${s};`).join(\" \")}`);\n    }\n  }\n\n  /**\n   * We want to just handle class fields in all contexts, since TypeScript supports them. Later,\n   * when some JS implementations support class fields, this should be made optional.\n   */\n  processClassBody(classInfo, className) {\n    const {\n      headerInfo,\n      constructorInsertPos,\n      constructorInitializerStatements,\n      fields,\n      instanceInitializerNames,\n      rangesToRemove,\n    } = classInfo;\n    let fieldIndex = 0;\n    let rangeToRemoveIndex = 0;\n    const classContextId = this.tokens.currentToken().contextId;\n    if (classContextId == null) {\n      throw new Error(\"Expected non-null context ID on class.\");\n    }\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL);\n    if (this.isReactHotLoaderTransformEnabled) {\n      this.tokens.appendCode(\n        \"__reactstandin__regenerateByEval(key, code) {this[key] = eval(code);}\",\n      );\n    }\n\n    const needsConstructorInit =\n      constructorInitializerStatements.length + instanceInitializerNames.length > 0;\n\n    if (constructorInsertPos === null && needsConstructorInit) {\n      const constructorInitializersCode = this.makeConstructorInitCode(\n        constructorInitializerStatements,\n        instanceInitializerNames,\n        className,\n      );\n      if (headerInfo.hasSuperclass) {\n        const argsName = this.nameManager.claimFreeName(\"args\");\n        this.tokens.appendCode(\n          `constructor(...${argsName}) { super(...${argsName}); ${constructorInitializersCode}; }`,\n        );\n      } else {\n        this.tokens.appendCode(`constructor() { ${constructorInitializersCode}; }`);\n      }\n    }\n\n    while (!this.tokens.matchesContextIdAndLabel(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR, classContextId)) {\n      if (fieldIndex < fields.length && this.tokens.currentIndex() === fields[fieldIndex].start) {\n        let needsCloseBrace = false;\n        if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.bracketL)) {\n          this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this`);\n        } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.string) || this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.num)) {\n          this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this[`);\n          needsCloseBrace = true;\n        } else {\n          this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this.`);\n        }\n        while (this.tokens.currentIndex() < fields[fieldIndex].end) {\n          if (needsCloseBrace && this.tokens.currentIndex() === fields[fieldIndex].equalsIndex) {\n            this.tokens.appendCode(\"]\");\n          }\n          this.processToken();\n        }\n        this.tokens.appendCode(\"}\");\n        fieldIndex++;\n      } else if (\n        rangeToRemoveIndex < rangesToRemove.length &&\n        this.tokens.currentIndex() >= rangesToRemove[rangeToRemoveIndex].start\n      ) {\n        if (this.tokens.currentIndex() < rangesToRemove[rangeToRemoveIndex].end) {\n          this.tokens.removeInitialToken();\n        }\n        while (this.tokens.currentIndex() < rangesToRemove[rangeToRemoveIndex].end) {\n          this.tokens.removeToken();\n        }\n        rangeToRemoveIndex++;\n      } else if (this.tokens.currentIndex() === constructorInsertPos) {\n        this.tokens.copyToken();\n        if (needsConstructorInit) {\n          this.tokens.appendCode(\n            `;${this.makeConstructorInitCode(\n              constructorInitializerStatements,\n              instanceInitializerNames,\n              className,\n            )};`,\n          );\n        }\n        this.processToken();\n      } else {\n        this.processToken();\n      }\n    }\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR);\n  }\n\n  makeConstructorInitCode(\n    constructorInitializerStatements,\n    instanceInitializerNames,\n    className,\n  ) {\n    return [\n      ...constructorInitializerStatements,\n      ...instanceInitializerNames.map((name) => `${className}.prototype.${name}.call(this)`),\n    ].join(\";\");\n  }\n\n  /**\n   * Normally it's ok to simply remove type tokens, but we need to be more careful when dealing with\n   * arrow function return types since they can confuse the parser. In that case, we want to move\n   * the close-paren to the same line as the arrow.\n   *\n   * See https://github.com/alangpierce/sucrase/issues/391 for more details.\n   */\n  processPossibleArrowParamEnd() {\n    if (this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenR, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.colon) && this.tokens.tokenAtRelativeIndex(1).isType) {\n      let nextNonTypeIndex = this.tokens.currentIndex() + 1;\n      // Look ahead to see if this is an arrow function or something else.\n      while (this.tokens.tokens[nextNonTypeIndex].isType) {\n        nextNonTypeIndex++;\n      }\n      if (this.tokens.matches1AtIndex(nextNonTypeIndex, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.arrow)) {\n        this.tokens.removeInitialToken();\n        while (this.tokens.currentIndex() < nextNonTypeIndex) {\n          this.tokens.removeToken();\n        }\n        this.tokens.replaceTokenTrimmingLeftWhitespace(\") =>\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * An async arrow function might be of the form:\n   *\n   * async <\n   *   T\n   * >() => {}\n   *\n   * in which case, removing the type parameters will cause a syntax error. Detect this case and\n   * move the open-paren earlier.\n   */\n  processPossibleAsyncArrowWithTypeParams() {\n    if (\n      !this.tokens.matchesContextual(_parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._async) &&\n      !this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._async)\n    ) {\n      return false;\n    }\n    const nextToken = this.tokens.tokenAtRelativeIndex(1);\n    if (nextToken.type !== _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.lessThan || !nextToken.isType) {\n      return false;\n    }\n\n    let nextNonTypeIndex = this.tokens.currentIndex() + 1;\n    // Look ahead to see if this is an arrow function or something else.\n    while (this.tokens.tokens[nextNonTypeIndex].isType) {\n      nextNonTypeIndex++;\n    }\n    if (this.tokens.matches1AtIndex(nextNonTypeIndex, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenL)) {\n      this.tokens.replaceToken(\"async (\");\n      this.tokens.removeInitialToken();\n      while (this.tokens.currentIndex() < nextNonTypeIndex) {\n        this.tokens.removeToken();\n      }\n      this.tokens.removeToken();\n      // We ate a ( token, so we need to process the tokens in between and then the ) token so that\n      // we remain balanced.\n      this.processBalancedCode();\n      this.processToken();\n      return true;\n    }\n    return false;\n  }\n\n  processPossibleTypeRange() {\n    if (this.tokens.currentToken().isType) {\n      this.tokens.removeInitialToken();\n      while (this.tokens.currentToken().isType) {\n        this.tokens.removeToken();\n      }\n      return true;\n    }\n    return false;\n  }\n\n  shiftMappings(\n    mappings,\n    prefixLength,\n  ) {\n    for (let i = 0; i < mappings.length; i++) {\n      const mapping = mappings[i];\n      if (mapping !== undefined) {\n        mappings[i] = mapping + prefixLength;\n      }\n    }\n    return mappings;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/transformers/RootTransformer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/transformers/Transformer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/transformers/Transformer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Transformer)\n/* harmony export */ });\nclass Transformer {\n  // Return true if anything was processed, false otherwise.\n  \n\n  getPrefixCode() {\n    return \"\";\n  }\n\n  getHoistedCode() {\n    return \"\";\n  }\n\n  getSuffixCode() {\n    return \"\";\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS90cmFuc2Zvcm1lcnMvVHJhbnNmb3JtZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFnQjtBQUNoQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1saWJyYXJ5LWRvY3MvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS90cmFuc2Zvcm1lcnMvVHJhbnNmb3JtZXIuanM/Nzg3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAgY2xhc3MgVHJhbnNmb3JtZXIge1xuICAvLyBSZXR1cm4gdHJ1ZSBpZiBhbnl0aGluZyB3YXMgcHJvY2Vzc2VkLCBmYWxzZSBvdGhlcndpc2UuXG4gIFxuXG4gIGdldFByZWZpeENvZGUoKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICBnZXRIb2lzdGVkQ29kZSgpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIGdldFN1ZmZpeENvZGUoKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/transformers/Transformer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/transformers/TypeScriptTransformer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/transformers/TypeScriptTransformer.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TypeScriptTransformer)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _util_isIdentifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isIdentifier */ \"(ssr)/./node_modules/sucrase/dist/esm/util/isIdentifier.js\");\n/* harmony import */ var _Transformer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/Transformer.js\");\n\n\n\n\n\n\n\nclass TypeScriptTransformer extends _Transformer__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n  constructor(\n     rootTransformer,\n     tokens,\n     isImportsTransformEnabled,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.isImportsTransformEnabled = isImportsTransformEnabled;;\n  }\n\n  process() {\n    if (\n      this.rootTransformer.processPossibleArrowParamEnd() ||\n      this.rootTransformer.processPossibleAsyncArrowWithTypeParams() ||\n      this.rootTransformer.processPossibleTypeRange()\n    ) {\n      return true;\n    }\n    if (\n      this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._public) ||\n      this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._protected) ||\n      this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._private) ||\n      this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._abstract) ||\n      this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._readonly) ||\n      this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._override) ||\n      this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.nonNullAssertion)\n    ) {\n      this.tokens.removeInitialToken();\n      return true;\n    }\n    if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._enum) || this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._const, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._enum)) {\n      this.processEnum();\n      return true;\n    }\n    if (\n      this.tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._enum) ||\n      this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._export, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._const, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._enum)\n    ) {\n      this.processEnum(true);\n      return true;\n    }\n    return false;\n  }\n\n  processEnum(isExport = false) {\n    // We might have \"export const enum\", so just remove all relevant tokens.\n    this.tokens.removeInitialToken();\n    while (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._const) || this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._enum)) {\n      this.tokens.removeToken();\n    }\n    const enumName = this.tokens.identifierName();\n    this.tokens.removeToken();\n    if (isExport && !this.isImportsTransformEnabled) {\n      this.tokens.appendCode(\"export \");\n    }\n    this.tokens.appendCode(`var ${enumName}; (function (${enumName})`);\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.braceL);\n    this.processEnumBody(enumName);\n    this.tokens.copyExpectedToken(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.braceR);\n    if (isExport && this.isImportsTransformEnabled) {\n      this.tokens.appendCode(`)(${enumName} || (exports.${enumName} = ${enumName} = {}));`);\n    } else {\n      this.tokens.appendCode(`)(${enumName} || (${enumName} = {}));`);\n    }\n  }\n\n  /**\n   * Transform an enum into equivalent JS. This has complexity in a few places:\n   * - TS allows string enums, numeric enums, and a mix of the two styles within an enum.\n   * - Enum keys are allowed to be referenced in later enum values.\n   * - Enum keys are allowed to be strings.\n   * - When enum values are omitted, they should follow an auto-increment behavior.\n   */\n  processEnumBody(enumName) {\n    // Code that can be used to reference the previous enum member, or null if this is the first\n    // enum member.\n    let previousValueCode = null;\n    while (true) {\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.braceR)) {\n        break;\n      }\n      const {nameStringCode, variableName} = this.extractEnumKeyInfo(this.tokens.currentToken());\n      this.tokens.removeInitialToken();\n\n      if (\n        this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.eq, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.string, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.comma) ||\n        this.tokens.matches3(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.eq, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.string, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.braceR)\n      ) {\n        this.processStringLiteralEnumMember(enumName, nameStringCode, variableName);\n      } else if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.eq)) {\n        this.processExplicitValueEnumMember(enumName, nameStringCode, variableName);\n      } else {\n        this.processImplicitValueEnumMember(\n          enumName,\n          nameStringCode,\n          variableName,\n          previousValueCode,\n        );\n      }\n      if (this.tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.comma)) {\n        this.tokens.removeToken();\n      }\n\n      if (variableName != null) {\n        previousValueCode = variableName;\n      } else {\n        previousValueCode = `${enumName}[${nameStringCode}]`;\n      }\n    }\n  }\n\n  /**\n   * Detect name information about this enum key, which will be used to determine which code to emit\n   * and whether we should declare a variable as part of this declaration.\n   *\n   * Some cases to keep in mind:\n   * - Enum keys can be implicitly referenced later, e.g. `X = 1, Y = X`. In Sucrase, we implement\n   *   this by declaring a variable `X` so that later expressions can use it.\n   * - In addition to the usual identifier key syntax, enum keys are allowed to be string literals,\n   *   e.g. `\"hello world\" = 3,`. Template literal syntax is NOT allowed.\n   * - Even if the enum key is defined as a string literal, it may still be referenced by identifier\n   *   later, e.g. `\"X\" = 1, Y = X`. That means that we need to detect whether or not a string\n   *   literal is identifier-like and emit a variable if so, even if the declaration did not use an\n   *   identifier.\n   * - Reserved keywords like `break` are valid enum keys, but are not valid to be referenced later\n   *   and would be a syntax error if we emitted a variable, so we need to skip the variable\n   *   declaration in those cases.\n   *\n   * The variableName return value captures these nuances: if non-null, we can and must emit a\n   * variable declaration, and if null, we can't and shouldn't.\n   */\n  extractEnumKeyInfo(nameToken) {\n    if (nameToken.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.name) {\n      const name = this.tokens.identifierNameForToken(nameToken);\n      return {\n        nameStringCode: `\"${name}\"`,\n        variableName: (0,_util_isIdentifier__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(name) ? name : null,\n      };\n    } else if (nameToken.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.string) {\n      const name = this.tokens.stringValueForToken(nameToken);\n      return {\n        nameStringCode: this.tokens.code.slice(nameToken.start, nameToken.end),\n        variableName: (0,_util_isIdentifier__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(name) ? name : null,\n      };\n    } else {\n      throw new Error(\"Expected name or string at beginning of enum element.\");\n    }\n  }\n\n  /**\n   * Handle an enum member where the RHS is just a string literal (not omitted, not a number, and\n   * not a complex expression). This is the typical form for TS string enums, and in this case, we\n   * do *not* create a reverse mapping.\n   *\n   * This is called after deleting the key token, when the token processor is at the equals sign.\n   *\n   * Example 1:\n   * someKey = \"some value\"\n   * ->\n   * const someKey = \"some value\"; MyEnum[\"someKey\"] = someKey;\n   *\n   * Example 2:\n   * \"some key\" = \"some value\"\n   * ->\n   * MyEnum[\"some key\"] = \"some value\";\n   */\n  processStringLiteralEnumMember(\n    enumName,\n    nameStringCode,\n    variableName,\n  ) {\n    if (variableName != null) {\n      this.tokens.appendCode(`const ${variableName}`);\n      // =\n      this.tokens.copyToken();\n      // value string\n      this.tokens.copyToken();\n      this.tokens.appendCode(`; ${enumName}[${nameStringCode}] = ${variableName};`);\n    } else {\n      this.tokens.appendCode(`${enumName}[${nameStringCode}]`);\n      // =\n      this.tokens.copyToken();\n      // value string\n      this.tokens.copyToken();\n      this.tokens.appendCode(\";\");\n    }\n  }\n\n  /**\n   * Handle an enum member initialized with an expression on the right-hand side (other than a\n   * string literal). In these cases, we should transform the expression and emit code that sets up\n   * a reverse mapping.\n   *\n   * The TypeScript implementation of this operation distinguishes between expressions that can be\n   * \"constant folded\" at compile time (i.e. consist of number literals and simple math operations\n   * on those numbers) and ones that are dynamic. For constant expressions, it emits the resolved\n   * numeric value, and auto-incrementing is only allowed in that case. Evaluating expressions at\n   * compile time would add significant complexity to Sucrase, so Sucrase instead leaves the\n   * expression as-is, and will later emit something like `MyEnum[\"previousKey\"] + 1` to implement\n   * auto-incrementing.\n   *\n   * This is called after deleting the key token, when the token processor is at the equals sign.\n   *\n   * Example 1:\n   * someKey = 1 + 1\n   * ->\n   * const someKey = 1 + 1; MyEnum[MyEnum[\"someKey\"] = someKey] = \"someKey\";\n   *\n   * Example 2:\n   * \"some key\" = 1 + 1\n   * ->\n   * MyEnum[MyEnum[\"some key\"] = 1 + 1] = \"some key\";\n   */\n  processExplicitValueEnumMember(\n    enumName,\n    nameStringCode,\n    variableName,\n  ) {\n    const rhsEndIndex = this.tokens.currentToken().rhsEndIndex;\n    if (rhsEndIndex == null) {\n      throw new Error(\"Expected rhsEndIndex on enum assign.\");\n    }\n\n    if (variableName != null) {\n      this.tokens.appendCode(`const ${variableName}`);\n      this.tokens.copyToken();\n      while (this.tokens.currentIndex() < rhsEndIndex) {\n        this.rootTransformer.processToken();\n      }\n      this.tokens.appendCode(\n        `; ${enumName}[${enumName}[${nameStringCode}] = ${variableName}] = ${nameStringCode};`,\n      );\n    } else {\n      this.tokens.appendCode(`${enumName}[${enumName}[${nameStringCode}]`);\n      this.tokens.copyToken();\n      while (this.tokens.currentIndex() < rhsEndIndex) {\n        this.rootTransformer.processToken();\n      }\n      this.tokens.appendCode(`] = ${nameStringCode};`);\n    }\n  }\n\n  /**\n   * Handle an enum member with no right-hand side expression. In this case, the value is the\n   * previous value plus 1, or 0 if there was no previous value. We should also always emit a\n   * reverse mapping.\n   *\n   * Example 1:\n   * someKey2\n   * ->\n   * const someKey2 = someKey1 + 1; MyEnum[MyEnum[\"someKey2\"] = someKey2] = \"someKey2\";\n   *\n   * Example 2:\n   * \"some key 2\"\n   * ->\n   * MyEnum[MyEnum[\"some key 2\"] = someKey1 + 1] = \"some key 2\";\n   */\n  processImplicitValueEnumMember(\n    enumName,\n    nameStringCode,\n    variableName,\n    previousValueCode,\n  ) {\n    let valueCode = previousValueCode != null ? `${previousValueCode} + 1` : \"0\";\n    if (variableName != null) {\n      this.tokens.appendCode(`const ${variableName} = ${valueCode}; `);\n      valueCode = variableName;\n    }\n    this.tokens.appendCode(\n      `${enumName}[${enumName}[${nameStringCode}] = ${valueCode}] = ${nameStringCode};`,\n    );\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/transformers/TypeScriptTransformer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/elideImportEquals.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/elideImportEquals.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ elideImportEquals)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n\n\n\nfunction elideImportEquals(tokens) {\n  // import\n  tokens.removeInitialToken();\n  // name\n  tokens.removeToken();\n  // =\n  tokens.removeToken();\n  // name or require\n  tokens.removeToken();\n  // Handle either `import A = require('A')` or `import A = B.C.D`.\n  if (tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.parenL)) {\n    // (\n    tokens.removeToken();\n    // path string\n    tokens.removeToken();\n    // )\n    tokens.removeToken();\n  } else {\n    while (tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.dot)) {\n      // .\n      tokens.removeToken();\n      // name\n      tokens.removeToken();\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2VsaWRlSW1wb3J0RXF1YWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBEOzs7QUFHM0M7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsOERBQUU7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLDJCQUEyQiw4REFBRTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3V0aWwvZWxpZGVJbXBvcnRFcXVhbHMuanM/NDUwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Rva2VuVHlwZSBhcyB0dH0gZnJvbSBcIi4uL3BhcnNlci90b2tlbml6ZXIvdHlwZXNcIjtcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbGlkZUltcG9ydEVxdWFscyh0b2tlbnMpIHtcbiAgLy8gaW1wb3J0XG4gIHRva2Vucy5yZW1vdmVJbml0aWFsVG9rZW4oKTtcbiAgLy8gbmFtZVxuICB0b2tlbnMucmVtb3ZlVG9rZW4oKTtcbiAgLy8gPVxuICB0b2tlbnMucmVtb3ZlVG9rZW4oKTtcbiAgLy8gbmFtZSBvciByZXF1aXJlXG4gIHRva2Vucy5yZW1vdmVUb2tlbigpO1xuICAvLyBIYW5kbGUgZWl0aGVyIGBpbXBvcnQgQSA9IHJlcXVpcmUoJ0EnKWAgb3IgYGltcG9ydCBBID0gQi5DLkRgLlxuICBpZiAodG9rZW5zLm1hdGNoZXMxKHR0LnBhcmVuTCkpIHtcbiAgICAvLyAoXG4gICAgdG9rZW5zLnJlbW92ZVRva2VuKCk7XG4gICAgLy8gcGF0aCBzdHJpbmdcbiAgICB0b2tlbnMucmVtb3ZlVG9rZW4oKTtcbiAgICAvLyApXG4gICAgdG9rZW5zLnJlbW92ZVRva2VuKCk7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHRva2Vucy5tYXRjaGVzMSh0dC5kb3QpKSB7XG4gICAgICAvLyAuXG4gICAgICB0b2tlbnMucmVtb3ZlVG9rZW4oKTtcbiAgICAgIC8vIG5hbWVcbiAgICAgIHRva2Vucy5yZW1vdmVUb2tlbigpO1xuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/elideImportEquals.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/formatTokens.js":
/*!************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/formatTokens.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ formatTokens)\n/* harmony export */ });\n/* harmony import */ var lines_and_columns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lines-and-columns */ \"(ssr)/./node_modules/lines-and-columns/build/index.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n\n\n\n\n\nfunction formatTokens(code, tokens) {\n  if (tokens.length === 0) {\n    return \"\";\n  }\n\n  const tokenKeys = Object.keys(tokens[0]).filter(\n    (k) => k !== \"type\" && k !== \"value\" && k !== \"start\" && k !== \"end\" && k !== \"loc\",\n  );\n  const typeKeys = Object.keys(tokens[0].type).filter((k) => k !== \"label\" && k !== \"keyword\");\n\n  const headings = [\"Location\", \"Label\", \"Raw\", ...tokenKeys, ...typeKeys];\n\n  const lines = new lines_and_columns__WEBPACK_IMPORTED_MODULE_0__[\"default\"](code);\n  const rows = [headings, ...tokens.map(getTokenComponents)];\n  const padding = headings.map(() => 0);\n  for (const components of rows) {\n    for (let i = 0; i < components.length; i++) {\n      padding[i] = Math.max(padding[i], components[i].length);\n    }\n  }\n  return rows\n    .map((components) => components.map((component, i) => component.padEnd(padding[i])).join(\" \"))\n    .join(\"\\n\");\n\n  function getTokenComponents(token) {\n    const raw = code.slice(token.start, token.end);\n    return [\n      formatRange(token.start, token.end),\n      (0,_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.formatTokenType)(token.type),\n      truncate(String(raw), 14),\n      // @ts-ignore: Intentional dynamic access by key.\n      ...tokenKeys.map((key) => formatValue(token[key], key)),\n      // @ts-ignore: Intentional dynamic access by key.\n      ...typeKeys.map((key) => formatValue(token.type[key], key)),\n    ];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function formatValue(value, key) {\n    if (value === true) {\n      return key;\n    } else if (value === false || value === null) {\n      return \"\";\n    } else {\n      return String(value);\n    }\n  }\n\n  function formatRange(start, end) {\n    return `${formatPos(start)}-${formatPos(end)}`;\n  }\n\n  function formatPos(pos) {\n    const location = lines.locationForIndex(pos);\n    if (!location) {\n      return \"Unknown\";\n    } else {\n      return `${location.line + 1}:${location.column + 1}`;\n    }\n  }\n}\n\nfunction truncate(s, length) {\n  if (s.length > length) {\n    return `${s.slice(0, length - 3)}...`;\n  } else {\n    return s;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2Zvcm1hdFRva2Vucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0Q7OztBQUdVOztBQUUzQztBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxvQkFBb0IseURBQWU7QUFDbkM7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHdFQUFlO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsaUJBQWlCLEdBQUcsZUFBZTtBQUNqRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixnQkFBZ0Isa0JBQWtCLEdBQUcsb0JBQW9CO0FBQ3pEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYyx1QkFBdUI7QUFDckMsSUFBSTtBQUNKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3V0aWwvZm9ybWF0VG9rZW5zLmpzPzkzYzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExpbmVzQW5kQ29sdW1ucyBmcm9tIFwibGluZXMtYW5kLWNvbHVtbnNcIjtcblxuXG5pbXBvcnQge2Zvcm1hdFRva2VuVHlwZX0gZnJvbSBcIi4uL3BhcnNlci90b2tlbml6ZXIvdHlwZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0VG9rZW5zKGNvZGUsIHRva2Vucykge1xuICBpZiAodG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgY29uc3QgdG9rZW5LZXlzID0gT2JqZWN0LmtleXModG9rZW5zWzBdKS5maWx0ZXIoXG4gICAgKGspID0+IGsgIT09IFwidHlwZVwiICYmIGsgIT09IFwidmFsdWVcIiAmJiBrICE9PSBcInN0YXJ0XCIgJiYgayAhPT0gXCJlbmRcIiAmJiBrICE9PSBcImxvY1wiLFxuICApO1xuICBjb25zdCB0eXBlS2V5cyA9IE9iamVjdC5rZXlzKHRva2Vuc1swXS50eXBlKS5maWx0ZXIoKGspID0+IGsgIT09IFwibGFiZWxcIiAmJiBrICE9PSBcImtleXdvcmRcIik7XG5cbiAgY29uc3QgaGVhZGluZ3MgPSBbXCJMb2NhdGlvblwiLCBcIkxhYmVsXCIsIFwiUmF3XCIsIC4uLnRva2VuS2V5cywgLi4udHlwZUtleXNdO1xuXG4gIGNvbnN0IGxpbmVzID0gbmV3IExpbmVzQW5kQ29sdW1ucyhjb2RlKTtcbiAgY29uc3Qgcm93cyA9IFtoZWFkaW5ncywgLi4udG9rZW5zLm1hcChnZXRUb2tlbkNvbXBvbmVudHMpXTtcbiAgY29uc3QgcGFkZGluZyA9IGhlYWRpbmdzLm1hcCgoKSA9PiAwKTtcbiAgZm9yIChjb25zdCBjb21wb25lbnRzIG9mIHJvd3MpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbXBvbmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhZGRpbmdbaV0gPSBNYXRoLm1heChwYWRkaW5nW2ldLCBjb21wb25lbnRzW2ldLmxlbmd0aCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByb3dzXG4gICAgLm1hcCgoY29tcG9uZW50cykgPT4gY29tcG9uZW50cy5tYXAoKGNvbXBvbmVudCwgaSkgPT4gY29tcG9uZW50LnBhZEVuZChwYWRkaW5nW2ldKSkuam9pbihcIiBcIikpXG4gICAgLmpvaW4oXCJcXG5cIik7XG5cbiAgZnVuY3Rpb24gZ2V0VG9rZW5Db21wb25lbnRzKHRva2VuKSB7XG4gICAgY29uc3QgcmF3ID0gY29kZS5zbGljZSh0b2tlbi5zdGFydCwgdG9rZW4uZW5kKTtcbiAgICByZXR1cm4gW1xuICAgICAgZm9ybWF0UmFuZ2UodG9rZW4uc3RhcnQsIHRva2VuLmVuZCksXG4gICAgICBmb3JtYXRUb2tlblR5cGUodG9rZW4udHlwZSksXG4gICAgICB0cnVuY2F0ZShTdHJpbmcocmF3KSwgMTQpLFxuICAgICAgLy8gQHRzLWlnbm9yZTogSW50ZW50aW9uYWwgZHluYW1pYyBhY2Nlc3MgYnkga2V5LlxuICAgICAgLi4udG9rZW5LZXlzLm1hcCgoa2V5KSA9PiBmb3JtYXRWYWx1ZSh0b2tlbltrZXldLCBrZXkpKSxcbiAgICAgIC8vIEB0cy1pZ25vcmU6IEludGVudGlvbmFsIGR5bmFtaWMgYWNjZXNzIGJ5IGtleS5cbiAgICAgIC4uLnR5cGVLZXlzLm1hcCgoa2V5KSA9PiBmb3JtYXRWYWx1ZSh0b2tlbi50eXBlW2tleV0sIGtleSkpLFxuICAgIF07XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh2YWx1ZSwga2V5KSB7XG4gICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UmFuZ2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBgJHtmb3JtYXRQb3Moc3RhcnQpfS0ke2Zvcm1hdFBvcyhlbmQpfWA7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQb3MocG9zKSB7XG4gICAgY29uc3QgbG9jYXRpb24gPSBsaW5lcy5sb2NhdGlvbkZvckluZGV4KHBvcyk7XG4gICAgaWYgKCFsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIFwiVW5rbm93blwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYCR7bG9jYXRpb24ubGluZSArIDF9OiR7bG9jYXRpb24uY29sdW1uICsgMX1gO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0cnVuY2F0ZShzLCBsZW5ndGgpIHtcbiAgaWYgKHMubGVuZ3RoID4gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGAke3Muc2xpY2UoMCwgbGVuZ3RoIC0gMyl9Li4uYDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/formatTokens.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/getClassInfo.js":
/*!************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/getClassInfo.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getClassInfo)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Get information about the class fields for this class, given a token processor pointing to the\n * open-brace at the start of the class.\n */\nfunction getClassInfo(\n  rootTransformer,\n  tokens,\n  nameManager,\n  disableESTransforms,\n) {\n  const snapshot = tokens.snapshot();\n\n  const headerInfo = processClassHeader(tokens);\n\n  let constructorInitializerStatements = [];\n  const instanceInitializerNames = [];\n  const staticInitializerNames = [];\n  let constructorInsertPos = null;\n  const fields = [];\n  const rangesToRemove = [];\n\n  const classContextId = tokens.currentToken().contextId;\n  if (classContextId == null) {\n    throw new Error(\"Expected non-null class context ID on class open-brace.\");\n  }\n\n  tokens.nextToken();\n  while (!tokens.matchesContextIdAndLabel(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR, classContextId)) {\n    if (tokens.matchesContextual(_parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._constructor) && !tokens.currentToken().isType) {\n      ({constructorInitializerStatements, constructorInsertPos} = processConstructor(tokens));\n    } else if (tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.semi)) {\n      if (!disableESTransforms) {\n        rangesToRemove.push({start: tokens.currentIndex(), end: tokens.currentIndex() + 1});\n      }\n      tokens.nextToken();\n    } else if (tokens.currentToken().isType) {\n      tokens.nextToken();\n    } else {\n      // Either a method or a field. Skip to the identifier part.\n      const statementStartIndex = tokens.currentIndex();\n      let isStatic = false;\n      let isESPrivate = false;\n      let isDeclareOrAbstract = false;\n      while (isAccessModifier(tokens.currentToken())) {\n        if (tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._static)) {\n          isStatic = true;\n        }\n        if (tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.hash)) {\n          isESPrivate = true;\n        }\n        if (tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._declare) || tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._abstract)) {\n          isDeclareOrAbstract = true;\n        }\n        tokens.nextToken();\n      }\n      if (isStatic && tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL)) {\n        // This is a static block, so don't process it in any special way.\n        skipToNextClassElement(tokens, classContextId);\n        continue;\n      }\n      if (isESPrivate) {\n        // Sucrase doesn't attempt to transpile private fields; just leave them as-is.\n        skipToNextClassElement(tokens, classContextId);\n        continue;\n      }\n      if (\n        tokens.matchesContextual(_parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._constructor) &&\n        !tokens.currentToken().isType\n      ) {\n        ({constructorInitializerStatements, constructorInsertPos} = processConstructor(tokens));\n        continue;\n      }\n\n      const nameStartIndex = tokens.currentIndex();\n      skipFieldName(tokens);\n      if (tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.lessThan) || tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenL)) {\n        // This is a method, so nothing to process.\n        skipToNextClassElement(tokens, classContextId);\n        continue;\n      }\n      // There might be a type annotation that we need to skip.\n      while (tokens.currentToken().isType) {\n        tokens.nextToken();\n      }\n      if (tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.eq)) {\n        const equalsIndex = tokens.currentIndex();\n        // This is an initializer, so we need to wrap in an initializer method.\n        const valueEnd = tokens.currentToken().rhsEndIndex;\n        if (valueEnd == null) {\n          throw new Error(\"Expected rhsEndIndex on class field assignment.\");\n        }\n        tokens.nextToken();\n        while (tokens.currentIndex() < valueEnd) {\n          rootTransformer.processToken();\n        }\n        let initializerName;\n        if (isStatic) {\n          initializerName = nameManager.claimFreeName(\"__initStatic\");\n          staticInitializerNames.push(initializerName);\n        } else {\n          initializerName = nameManager.claimFreeName(\"__init\");\n          instanceInitializerNames.push(initializerName);\n        }\n        // Fields start at the name, so `static x = 1;` has a field range of `x = 1;`.\n        fields.push({\n          initializerName,\n          equalsIndex,\n          start: nameStartIndex,\n          end: tokens.currentIndex(),\n        });\n      } else if (!disableESTransforms || isDeclareOrAbstract) {\n        // This is a regular field declaration, like `x;`. With the class transform enabled, we just\n        // remove the line so that no output is produced. With the class transform disabled, we\n        // usually want to preserve the declaration (but still strip types), but if the `declare`\n        // or `abstract` keyword is specified, we should remove the line to avoid initializing the\n        // value to undefined.\n        rangesToRemove.push({start: statementStartIndex, end: tokens.currentIndex()});\n      }\n    }\n  }\n\n  tokens.restoreToSnapshot(snapshot);\n  if (disableESTransforms) {\n    // With ES transforms disabled, we don't want to transform regular class\n    // field declarations, and we don't need to do any additional tricks to\n    // reference the constructor for static init, but we still need to transform\n    // TypeScript field initializers defined as constructor parameters and we\n    // still need to remove `declare` fields. For now, we run the same code\n    // path but omit any field information, as if the class had no field\n    // declarations. In the future, when we fully drop the class fields\n    // transform, we can simplify this code significantly.\n    return {\n      headerInfo,\n      constructorInitializerStatements,\n      instanceInitializerNames: [],\n      staticInitializerNames: [],\n      constructorInsertPos,\n      fields: [],\n      rangesToRemove,\n    };\n  } else {\n    return {\n      headerInfo,\n      constructorInitializerStatements,\n      instanceInitializerNames,\n      staticInitializerNames,\n      constructorInsertPos,\n      fields,\n      rangesToRemove,\n    };\n  }\n}\n\n/**\n * Move the token processor to the next method/field in the class.\n *\n * To do that, we seek forward to the next start of a class name (either an open\n * bracket or an identifier, or the closing curly brace), then seek backward to\n * include any access modifiers.\n */\nfunction skipToNextClassElement(tokens, classContextId) {\n  tokens.nextToken();\n  while (tokens.currentToken().contextId !== classContextId) {\n    tokens.nextToken();\n  }\n  while (isAccessModifier(tokens.tokenAtRelativeIndex(-1))) {\n    tokens.previousToken();\n  }\n}\n\nfunction processClassHeader(tokens) {\n  const classToken = tokens.currentToken();\n  const contextId = classToken.contextId;\n  if (contextId == null) {\n    throw new Error(\"Expected context ID on class token.\");\n  }\n  const isExpression = classToken.isExpression;\n  if (isExpression == null) {\n    throw new Error(\"Expected isExpression on class token.\");\n  }\n  let className = null;\n  let hasSuperclass = false;\n  tokens.nextToken();\n  if (tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name)) {\n    className = tokens.identifierName();\n  }\n  while (!tokens.matchesContextIdAndLabel(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL, contextId)) {\n    // If this has a superclass, there will always be an `extends` token. If it doesn't have a\n    // superclass, only type parameters and `implements` clauses can show up here, all of which\n    // consist only of type tokens. A declaration like `class A<B extends C> {` should *not* count\n    // as having a superclass.\n    if (tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._extends) && !tokens.currentToken().isType) {\n      hasSuperclass = true;\n    }\n    tokens.nextToken();\n  }\n  return {isExpression, className, hasSuperclass};\n}\n\n/**\n * Extract useful information out of a constructor, starting at the \"constructor\" name.\n */\nfunction processConstructor(tokens)\n\n\n {\n  const constructorInitializerStatements = [];\n\n  tokens.nextToken();\n  const constructorContextId = tokens.currentToken().contextId;\n  if (constructorContextId == null) {\n    throw new Error(\"Expected context ID on open-paren starting constructor params.\");\n  }\n  // Advance through parameters looking for access modifiers.\n  while (!tokens.matchesContextIdAndLabel(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenR, constructorContextId)) {\n    if (tokens.currentToken().contextId === constructorContextId) {\n      // Current token is an open paren or comma just before a param, so check\n      // that param for access modifiers.\n      tokens.nextToken();\n      if (isAccessModifier(tokens.currentToken())) {\n        tokens.nextToken();\n        while (isAccessModifier(tokens.currentToken())) {\n          tokens.nextToken();\n        }\n        const token = tokens.currentToken();\n        if (token.type !== _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name) {\n          throw new Error(\"Expected identifier after access modifiers in constructor arg.\");\n        }\n        const name = tokens.identifierNameForToken(token);\n        constructorInitializerStatements.push(`this.${name} = ${name}`);\n      }\n    } else {\n      tokens.nextToken();\n    }\n  }\n  // )\n  tokens.nextToken();\n  // Constructor type annotations are invalid, but skip them anyway since\n  // they're easy to skip.\n  while (tokens.currentToken().isType) {\n    tokens.nextToken();\n  }\n  let constructorInsertPos = tokens.currentIndex();\n\n  // Advance through body looking for a super call.\n  let foundSuperCall = false;\n  while (!tokens.matchesContextIdAndLabel(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR, constructorContextId)) {\n    if (!foundSuperCall && tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._super, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenL)) {\n      tokens.nextToken();\n      const superCallContextId = tokens.currentToken().contextId;\n      if (superCallContextId == null) {\n        throw new Error(\"Expected a context ID on the super call\");\n      }\n      while (!tokens.matchesContextIdAndLabel(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.parenR, superCallContextId)) {\n        tokens.nextToken();\n      }\n      constructorInsertPos = tokens.currentIndex();\n      foundSuperCall = true;\n    }\n    tokens.nextToken();\n  }\n  // }\n  tokens.nextToken();\n\n  return {constructorInitializerStatements, constructorInsertPos};\n}\n\n/**\n * Determine if this is any token that can go before the name in a method/field.\n */\nfunction isAccessModifier(token) {\n  return [\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._async,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._get,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._set,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.plus,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.minus,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._readonly,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._static,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._public,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._private,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._protected,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._override,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._abstract,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.star,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._declare,\n    _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.hash,\n  ].includes(token.type);\n}\n\n/**\n * The next token or set of tokens is either an identifier or an expression in square brackets, for\n * a method or field name.\n */\nfunction skipFieldName(tokens) {\n  if (tokens.matches1(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.bracketL)) {\n    const startToken = tokens.currentToken();\n    const classContextId = startToken.contextId;\n    if (classContextId == null) {\n      throw new Error(\"Expected class context ID on computed name open bracket.\");\n    }\n    while (!tokens.matchesContextIdAndLabel(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.bracketR, classContextId)) {\n      tokens.nextToken();\n    }\n    tokens.nextToken();\n  } else {\n    tokens.nextToken();\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/getClassInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/getDeclarationInfo.js":
/*!******************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/getDeclarationInfo.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EMPTY_DECLARATION_INFO: () => (/* binding */ EMPTY_DECLARATION_INFO),\n/* harmony export */   \"default\": () => (/* binding */ getDeclarationInfo)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n\n\n\n\n\n\n\n\n\nconst EMPTY_DECLARATION_INFO = {\n  typeDeclarations: new Set(),\n  valueDeclarations: new Set(),\n};\n\n/**\n * Get all top-level identifiers that should be preserved when exported in TypeScript.\n *\n * Examples:\n * - If an identifier is declared as `const x`, then `export {x}` should be preserved.\n * - If it's declared as `type x`, then `export {x}` should be removed.\n * - If it's declared as both `const x` and `type x`, then the export should be preserved.\n * - Classes and enums should be preserved (even though they also introduce types).\n * - Imported identifiers should be preserved since we don't have enough information to\n *   rule them out. --isolatedModules disallows re-exports, which catches errors here.\n */\nfunction getDeclarationInfo(tokens) {\n  const typeDeclarations = new Set();\n  const valueDeclarations = new Set();\n  for (let i = 0; i < tokens.tokens.length; i++) {\n    const token = tokens.tokens[i];\n    if (token.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name && (0,_parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.isTopLevelDeclaration)(token)) {\n      if (token.isType) {\n        typeDeclarations.add(tokens.identifierNameForToken(token));\n      } else {\n        valueDeclarations.add(tokens.identifierNameForToken(token));\n      }\n    }\n  }\n  return {typeDeclarations, valueDeclarations};\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2dldERlY2xhcmF0aW9uSW5mby5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBEO0FBQ0E7Ozs7Ozs7O0FBUW5EO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELEVBQUU7QUFDaEUsaURBQWlELEVBQUU7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlO0FBQ2Y7QUFDQTtBQUNBLGtCQUFrQiwwQkFBMEI7QUFDNUM7QUFDQSx1QkFBdUIsOERBQUUsU0FBUyx3RUFBcUI7QUFDdkQ7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3V0aWwvZ2V0RGVjbGFyYXRpb25JbmZvLmpzPzhhZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpc1RvcExldmVsRGVjbGFyYXRpb259IGZyb20gXCIuLi9wYXJzZXIvdG9rZW5pemVyXCI7XG5pbXBvcnQge1Rva2VuVHlwZSBhcyB0dH0gZnJvbSBcIi4uL3BhcnNlci90b2tlbml6ZXIvdHlwZXNcIjtcblxuXG5cblxuXG5cblxuZXhwb3J0IGNvbnN0IEVNUFRZX0RFQ0xBUkFUSU9OX0lORk8gPSB7XG4gIHR5cGVEZWNsYXJhdGlvbnM6IG5ldyBTZXQoKSxcbiAgdmFsdWVEZWNsYXJhdGlvbnM6IG5ldyBTZXQoKSxcbn07XG5cbi8qKlxuICogR2V0IGFsbCB0b3AtbGV2ZWwgaWRlbnRpZmllcnMgdGhhdCBzaG91bGQgYmUgcHJlc2VydmVkIHdoZW4gZXhwb3J0ZWQgaW4gVHlwZVNjcmlwdC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqIC0gSWYgYW4gaWRlbnRpZmllciBpcyBkZWNsYXJlZCBhcyBgY29uc3QgeGAsIHRoZW4gYGV4cG9ydCB7eH1gIHNob3VsZCBiZSBwcmVzZXJ2ZWQuXG4gKiAtIElmIGl0J3MgZGVjbGFyZWQgYXMgYHR5cGUgeGAsIHRoZW4gYGV4cG9ydCB7eH1gIHNob3VsZCBiZSByZW1vdmVkLlxuICogLSBJZiBpdCdzIGRlY2xhcmVkIGFzIGJvdGggYGNvbnN0IHhgIGFuZCBgdHlwZSB4YCwgdGhlbiB0aGUgZXhwb3J0IHNob3VsZCBiZSBwcmVzZXJ2ZWQuXG4gKiAtIENsYXNzZXMgYW5kIGVudW1zIHNob3VsZCBiZSBwcmVzZXJ2ZWQgKGV2ZW4gdGhvdWdoIHRoZXkgYWxzbyBpbnRyb2R1Y2UgdHlwZXMpLlxuICogLSBJbXBvcnRlZCBpZGVudGlmaWVycyBzaG91bGQgYmUgcHJlc2VydmVkIHNpbmNlIHdlIGRvbid0IGhhdmUgZW5vdWdoIGluZm9ybWF0aW9uIHRvXG4gKiAgIHJ1bGUgdGhlbSBvdXQuIC0taXNvbGF0ZWRNb2R1bGVzIGRpc2FsbG93cyByZS1leHBvcnRzLCB3aGljaCBjYXRjaGVzIGVycm9ycyBoZXJlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREZWNsYXJhdGlvbkluZm8odG9rZW5zKSB7XG4gIGNvbnN0IHR5cGVEZWNsYXJhdGlvbnMgPSBuZXcgU2V0KCk7XG4gIGNvbnN0IHZhbHVlRGVjbGFyYXRpb25zID0gbmV3IFNldCgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy50b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB0b2tlbiA9IHRva2Vucy50b2tlbnNbaV07XG4gICAgaWYgKHRva2VuLnR5cGUgPT09IHR0Lm5hbWUgJiYgaXNUb3BMZXZlbERlY2xhcmF0aW9uKHRva2VuKSkge1xuICAgICAgaWYgKHRva2VuLmlzVHlwZSkge1xuICAgICAgICB0eXBlRGVjbGFyYXRpb25zLmFkZCh0b2tlbnMuaWRlbnRpZmllck5hbWVGb3JUb2tlbih0b2tlbikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVEZWNsYXJhdGlvbnMuYWRkKHRva2Vucy5pZGVudGlmaWVyTmFtZUZvclRva2VuKHRva2VuKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7dHlwZURlY2xhcmF0aW9ucywgdmFsdWVEZWNsYXJhdGlvbnN9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/getDeclarationInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/getIdentifierNames.js":
/*!******************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/getIdentifierNames.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getIdentifierNames)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n\n\n\n/**\n * Get all identifier names in the code, in order, including duplicates.\n */\nfunction getIdentifierNames(code, tokens) {\n  const names = [];\n  for (const token of tokens) {\n    if (token.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.name) {\n      names.push(code.slice(token.start, token.end));\n    }\n  }\n  return names;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2dldElkZW50aWZpZXJOYW1lcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFDMEQ7O0FBRTFEO0FBQ0E7QUFDQTtBQUNlO0FBQ2Y7QUFDQTtBQUNBLHVCQUF1Qiw4REFBRTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktbGlicmFyeS1kb2NzLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC9lc20vdXRpbC9nZXRJZGVudGlmaWVyTmFtZXMuanM/YjI0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7VG9rZW5UeXBlIGFzIHR0fSBmcm9tIFwiLi4vcGFyc2VyL3Rva2VuaXplci90eXBlc1wiO1xuXG4vKipcbiAqIEdldCBhbGwgaWRlbnRpZmllciBuYW1lcyBpbiB0aGUgY29kZSwgaW4gb3JkZXIsIGluY2x1ZGluZyBkdXBsaWNhdGVzLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRJZGVudGlmaWVyTmFtZXMoY29kZSwgdG9rZW5zKSB7XG4gIGNvbnN0IG5hbWVzID0gW107XG4gIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKSB7XG4gICAgaWYgKHRva2VuLnR5cGUgPT09IHR0Lm5hbWUpIHtcbiAgICAgIG5hbWVzLnB1c2goY29kZS5zbGljZSh0b2tlbi5zdGFydCwgdG9rZW4uZW5kKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuYW1lcztcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/getIdentifierNames.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/getImportExportSpecifierInfo.js":
/*!****************************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/getImportExportSpecifierInfo.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getImportExportSpecifierInfo)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Determine information about this named import or named export specifier.\n *\n * This syntax is the `a` from statements like these:\n * import {A} from \"./foo\";\n * export {A};\n * export {A} from \"./foo\";\n *\n * As it turns out, we can exactly characterize the syntax meaning by simply\n * counting the number of tokens, which can be from 1 to 4:\n * {A}\n * {type A}\n * {A as B}\n * {type A as B}\n *\n * In the type case, we never actually need the names in practice, so don't get\n * them.\n *\n * TODO: There's some redundancy with the type detection here and the isType\n * flag that's already present on tokens in TS mode. This function could\n * potentially be simplified and/or pushed to the call sites to avoid the object\n * allocation.\n */\nfunction getImportExportSpecifierInfo(\n  tokens,\n  index = tokens.currentIndex(),\n) {\n  let endIndex = index + 1;\n  if (isSpecifierEnd(tokens, endIndex)) {\n    // import {A}\n    const name = tokens.identifierNameAtIndex(index);\n    return {\n      isType: false,\n      leftName: name,\n      rightName: name,\n      endIndex,\n    };\n  }\n  endIndex++;\n  if (isSpecifierEnd(tokens, endIndex)) {\n    // import {type A}\n    return {\n      isType: true,\n      leftName: null,\n      rightName: null,\n      endIndex,\n    };\n  }\n  endIndex++;\n  if (isSpecifierEnd(tokens, endIndex)) {\n    // import {A as B}\n    return {\n      isType: false,\n      leftName: tokens.identifierNameAtIndex(index),\n      rightName: tokens.identifierNameAtIndex(index + 2),\n      endIndex,\n    };\n  }\n  endIndex++;\n  if (isSpecifierEnd(tokens, endIndex)) {\n    // import {type A as B}\n    return {\n      isType: true,\n      leftName: null,\n      rightName: null,\n      endIndex,\n    };\n  }\n  throw new Error(`Unexpected import/export specifier at ${index}`);\n}\n\nfunction isSpecifierEnd(tokens, index) {\n  const token = tokens.tokens[index];\n  return token.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.braceR || token.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.comma;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2dldEltcG9ydEV4cG9ydFNwZWNpZmllckluZm8uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEQ7OztBQUcxRDs7Ozs7Ozs7Ozs7Ozs7QUFjQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVc7QUFDWCxXQUFXLEdBQUc7QUFDZDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osSUFBSTtBQUNKLElBQUk7QUFDSixJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsTUFBTTtBQUNqRTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLDhEQUFFLDBCQUEwQiw4REFBRTtBQUN0RCIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3V0aWwvZ2V0SW1wb3J0RXhwb3J0U3BlY2lmaWVySW5mby5qcz9iOGJhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VG9rZW5UeXBlIGFzIHR0fSBmcm9tIFwiLi4vcGFyc2VyL3Rva2VuaXplci90eXBlc1wiO1xuXG5cbiBcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaW5mb3JtYXRpb24gYWJvdXQgdGhpcyBuYW1lZCBpbXBvcnQgb3IgbmFtZWQgZXhwb3J0IHNwZWNpZmllci5cbiAqXG4gKiBUaGlzIHN5bnRheCBpcyB0aGUgYGFgIGZyb20gc3RhdGVtZW50cyBsaWtlIHRoZXNlOlxuICogaW1wb3J0IHtBfSBmcm9tIFwiLi9mb29cIjtcbiAqIGV4cG9ydCB7QX07XG4gKiBleHBvcnQge0F9IGZyb20gXCIuL2Zvb1wiO1xuICpcbiAqIEFzIGl0IHR1cm5zIG91dCwgd2UgY2FuIGV4YWN0bHkgY2hhcmFjdGVyaXplIHRoZSBzeW50YXggbWVhbmluZyBieSBzaW1wbHlcbiAqIGNvdW50aW5nIHRoZSBudW1iZXIgb2YgdG9rZW5zLCB3aGljaCBjYW4gYmUgZnJvbSAxIHRvIDQ6XG4gKiB7QX1cbiAqIHt0eXBlIEF9XG4gKiB7QSBhcyBCfVxuICoge3R5cGUgQSBhcyBCfVxuICpcbiAqIEluIHRoZSB0eXBlIGNhc2UsIHdlIG5ldmVyIGFjdHVhbGx5IG5lZWQgdGhlIG5hbWVzIGluIHByYWN0aWNlLCBzbyBkb24ndCBnZXRcbiAqIHRoZW0uXG4gKlxuICogVE9ETzogVGhlcmUncyBzb21lIHJlZHVuZGFuY3kgd2l0aCB0aGUgdHlwZSBkZXRlY3Rpb24gaGVyZSBhbmQgdGhlIGlzVHlwZVxuICogZmxhZyB0aGF0J3MgYWxyZWFkeSBwcmVzZW50IG9uIHRva2VucyBpbiBUUyBtb2RlLiBUaGlzIGZ1bmN0aW9uIGNvdWxkXG4gKiBwb3RlbnRpYWxseSBiZSBzaW1wbGlmaWVkIGFuZC9vciBwdXNoZWQgdG8gdGhlIGNhbGwgc2l0ZXMgdG8gYXZvaWQgdGhlIG9iamVjdFxuICogYWxsb2NhdGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SW1wb3J0RXhwb3J0U3BlY2lmaWVySW5mbyhcbiAgdG9rZW5zLFxuICBpbmRleCA9IHRva2Vucy5jdXJyZW50SW5kZXgoKSxcbikge1xuICBsZXQgZW5kSW5kZXggPSBpbmRleCArIDE7XG4gIGlmIChpc1NwZWNpZmllckVuZCh0b2tlbnMsIGVuZEluZGV4KSkge1xuICAgIC8vIGltcG9ydCB7QX1cbiAgICBjb25zdCBuYW1lID0gdG9rZW5zLmlkZW50aWZpZXJOYW1lQXRJbmRleChpbmRleCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzVHlwZTogZmFsc2UsXG4gICAgICBsZWZ0TmFtZTogbmFtZSxcbiAgICAgIHJpZ2h0TmFtZTogbmFtZSxcbiAgICAgIGVuZEluZGV4LFxuICAgIH07XG4gIH1cbiAgZW5kSW5kZXgrKztcbiAgaWYgKGlzU3BlY2lmaWVyRW5kKHRva2VucywgZW5kSW5kZXgpKSB7XG4gICAgLy8gaW1wb3J0IHt0eXBlIEF9XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzVHlwZTogdHJ1ZSxcbiAgICAgIGxlZnROYW1lOiBudWxsLFxuICAgICAgcmlnaHROYW1lOiBudWxsLFxuICAgICAgZW5kSW5kZXgsXG4gICAgfTtcbiAgfVxuICBlbmRJbmRleCsrO1xuICBpZiAoaXNTcGVjaWZpZXJFbmQodG9rZW5zLCBlbmRJbmRleCkpIHtcbiAgICAvLyBpbXBvcnQge0EgYXMgQn1cbiAgICByZXR1cm4ge1xuICAgICAgaXNUeXBlOiBmYWxzZSxcbiAgICAgIGxlZnROYW1lOiB0b2tlbnMuaWRlbnRpZmllck5hbWVBdEluZGV4KGluZGV4KSxcbiAgICAgIHJpZ2h0TmFtZTogdG9rZW5zLmlkZW50aWZpZXJOYW1lQXRJbmRleChpbmRleCArIDIpLFxuICAgICAgZW5kSW5kZXgsXG4gICAgfTtcbiAgfVxuICBlbmRJbmRleCsrO1xuICBpZiAoaXNTcGVjaWZpZXJFbmQodG9rZW5zLCBlbmRJbmRleCkpIHtcbiAgICAvLyBpbXBvcnQge3R5cGUgQSBhcyBCfVxuICAgIHJldHVybiB7XG4gICAgICBpc1R5cGU6IHRydWUsXG4gICAgICBsZWZ0TmFtZTogbnVsbCxcbiAgICAgIHJpZ2h0TmFtZTogbnVsbCxcbiAgICAgIGVuZEluZGV4LFxuICAgIH07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGltcG9ydC9leHBvcnQgc3BlY2lmaWVyIGF0ICR7aW5kZXh9YCk7XG59XG5cbmZ1bmN0aW9uIGlzU3BlY2lmaWVyRW5kKHRva2VucywgaW5kZXgpIHtcbiAgY29uc3QgdG9rZW4gPSB0b2tlbnMudG9rZW5zW2luZGV4XTtcbiAgcmV0dXJuIHRva2VuLnR5cGUgPT09IHR0LmJyYWNlUiB8fCB0b2tlbi50eXBlID09PSB0dC5jb21tYTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/getImportExportSpecifierInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/getJSXPragmaInfo.js":
/*!****************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/getJSXPragmaInfo.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getJSXPragmaInfo)\n/* harmony export */ });\n\n\n\n\n\n\n\n\n\nfunction getJSXPragmaInfo(options) {\n  const [base, suffix] = splitPragma(options.jsxPragma || \"React.createElement\");\n  const [fragmentBase, fragmentSuffix] = splitPragma(options.jsxFragmentPragma || \"React.Fragment\");\n  return {base, suffix, fragmentBase, fragmentSuffix};\n}\n\nfunction splitPragma(pragma) {\n  let dotIndex = pragma.indexOf(\".\");\n  if (dotIndex === -1) {\n    dotIndex = pragma.length;\n  }\n  return [pragma.slice(0, dotIndex), pragma.slice(dotIndex)];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2dldEpTWFByYWdtYUluZm8uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQVNlO0FBQ2Y7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3V0aWwvZ2V0SlNYUHJhZ21hSW5mby5qcz8xNTc1Il0sInNvdXJjZXNDb250ZW50IjpbIlxuXG5cblxuXG5cblxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEpTWFByYWdtYUluZm8ob3B0aW9ucykge1xuICBjb25zdCBbYmFzZSwgc3VmZml4XSA9IHNwbGl0UHJhZ21hKG9wdGlvbnMuanN4UHJhZ21hIHx8IFwiUmVhY3QuY3JlYXRlRWxlbWVudFwiKTtcbiAgY29uc3QgW2ZyYWdtZW50QmFzZSwgZnJhZ21lbnRTdWZmaXhdID0gc3BsaXRQcmFnbWEob3B0aW9ucy5qc3hGcmFnbWVudFByYWdtYSB8fCBcIlJlYWN0LkZyYWdtZW50XCIpO1xuICByZXR1cm4ge2Jhc2UsIHN1ZmZpeCwgZnJhZ21lbnRCYXNlLCBmcmFnbWVudFN1ZmZpeH07XG59XG5cbmZ1bmN0aW9uIHNwbGl0UHJhZ21hKHByYWdtYSkge1xuICBsZXQgZG90SW5kZXggPSBwcmFnbWEuaW5kZXhPZihcIi5cIik7XG4gIGlmIChkb3RJbmRleCA9PT0gLTEpIHtcbiAgICBkb3RJbmRleCA9IHByYWdtYS5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIFtwcmFnbWEuc2xpY2UoMCwgZG90SW5kZXgpLCBwcmFnbWEuc2xpY2UoZG90SW5kZXgpXTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/getJSXPragmaInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/getNonTypeIdentifiers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/getNonTypeIdentifiers.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNonTypeIdentifiers: () => (/* binding */ getNonTypeIdentifiers)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/index.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _transformers_JSXTransformer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../transformers/JSXTransformer */ \"(ssr)/./node_modules/sucrase/dist/esm/transformers/JSXTransformer.js\");\n/* harmony import */ var _getJSXPragmaInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getJSXPragmaInfo */ \"(ssr)/./node_modules/sucrase/dist/esm/util/getJSXPragmaInfo.js\");\n\n\n\n\n\n\n\nfunction getNonTypeIdentifiers(tokens, options) {\n  const jsxPragmaInfo = (0,_getJSXPragmaInfo__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(options);\n  const nonTypeIdentifiers = new Set();\n  for (let i = 0; i < tokens.tokens.length; i++) {\n    const token = tokens.tokens[i];\n    if (\n      token.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name &&\n      !token.isType &&\n      (token.identifierRole === _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.Access ||\n        token.identifierRole === _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ObjectShorthand ||\n        token.identifierRole === _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.ExportAccess) &&\n      !token.shadowsGlobal\n    ) {\n      nonTypeIdentifiers.add(tokens.identifierNameForToken(token));\n    }\n    if (token.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxTagStart) {\n      nonTypeIdentifiers.add(jsxPragmaInfo.base);\n    }\n    if (\n      token.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxTagStart &&\n      i + 1 < tokens.tokens.length &&\n      tokens.tokens[i + 1].type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxTagEnd\n    ) {\n      nonTypeIdentifiers.add(jsxPragmaInfo.base);\n      nonTypeIdentifiers.add(jsxPragmaInfo.fragmentBase);\n    }\n    if (token.type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.jsxName && token.identifierRole === _parser_tokenizer__WEBPACK_IMPORTED_MODULE_0__.IdentifierRole.Access) {\n      const identifierName = tokens.identifierNameForToken(token);\n      // Lower-case single-component tag names like \"div\" don't count.\n      if (!(0,_transformers_JSXTransformer__WEBPACK_IMPORTED_MODULE_2__.startsWithLowerCase)(identifierName) || tokens.tokens[i + 1].type === _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.dot) {\n        nonTypeIdentifiers.add(tokens.identifierNameForToken(token));\n      }\n    }\n  }\n  return nonTypeIdentifiers;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2dldE5vblR5cGVJZGVudGlmaWVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDbUQ7QUFDa0I7O0FBRUY7QUFDakI7O0FBRTNDO0FBQ1Asd0JBQXdCLDZEQUFnQjtBQUN4QztBQUNBLGtCQUFrQiwwQkFBMEI7QUFDNUM7QUFDQTtBQUNBLHFCQUFxQiw4REFBRTtBQUN2QjtBQUNBLGdDQUFnQyw2REFBYztBQUM5QyxpQ0FBaUMsNkRBQWM7QUFDL0MsaUNBQWlDLDZEQUFjO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDhEQUFFO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw4REFBRTtBQUN2QjtBQUNBLG9DQUFvQyw4REFBRTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw4REFBRSxxQ0FBcUMsNkRBQWM7QUFDNUU7QUFDQTtBQUNBLFdBQVcsaUZBQW1CLGtEQUFrRCw4REFBUztBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1saWJyYXJ5LWRvY3MvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2dldE5vblR5cGVJZGVudGlmaWVycy5qcz8yOWM1Il0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHtJZGVudGlmaWVyUm9sZX0gZnJvbSBcIi4uL3BhcnNlci90b2tlbml6ZXJcIjtcbmltcG9ydCB7VG9rZW5UeXBlLCBUb2tlblR5cGUgYXMgdHR9IGZyb20gXCIuLi9wYXJzZXIvdG9rZW5pemVyL3R5cGVzXCI7XG5cbmltcG9ydCB7c3RhcnRzV2l0aExvd2VyQ2FzZX0gZnJvbSBcIi4uL3RyYW5zZm9ybWVycy9KU1hUcmFuc2Zvcm1lclwiO1xuaW1wb3J0IGdldEpTWFByYWdtYUluZm8gZnJvbSBcIi4vZ2V0SlNYUHJhZ21hSW5mb1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Tm9uVHlwZUlkZW50aWZpZXJzKHRva2Vucywgb3B0aW9ucykge1xuICBjb25zdCBqc3hQcmFnbWFJbmZvID0gZ2V0SlNYUHJhZ21hSW5mbyhvcHRpb25zKTtcbiAgY29uc3Qgbm9uVHlwZUlkZW50aWZpZXJzID0gbmV3IFNldCgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy50b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB0b2tlbiA9IHRva2Vucy50b2tlbnNbaV07XG4gICAgaWYgKFxuICAgICAgdG9rZW4udHlwZSA9PT0gdHQubmFtZSAmJlxuICAgICAgIXRva2VuLmlzVHlwZSAmJlxuICAgICAgKHRva2VuLmlkZW50aWZpZXJSb2xlID09PSBJZGVudGlmaWVyUm9sZS5BY2Nlc3MgfHxcbiAgICAgICAgdG9rZW4uaWRlbnRpZmllclJvbGUgPT09IElkZW50aWZpZXJSb2xlLk9iamVjdFNob3J0aGFuZCB8fFxuICAgICAgICB0b2tlbi5pZGVudGlmaWVyUm9sZSA9PT0gSWRlbnRpZmllclJvbGUuRXhwb3J0QWNjZXNzKSAmJlxuICAgICAgIXRva2VuLnNoYWRvd3NHbG9iYWxcbiAgICApIHtcbiAgICAgIG5vblR5cGVJZGVudGlmaWVycy5hZGQodG9rZW5zLmlkZW50aWZpZXJOYW1lRm9yVG9rZW4odG9rZW4pKTtcbiAgICB9XG4gICAgaWYgKHRva2VuLnR5cGUgPT09IHR0LmpzeFRhZ1N0YXJ0KSB7XG4gICAgICBub25UeXBlSWRlbnRpZmllcnMuYWRkKGpzeFByYWdtYUluZm8uYmFzZSk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIHRva2VuLnR5cGUgPT09IHR0LmpzeFRhZ1N0YXJ0ICYmXG4gICAgICBpICsgMSA8IHRva2Vucy50b2tlbnMubGVuZ3RoICYmXG4gICAgICB0b2tlbnMudG9rZW5zW2kgKyAxXS50eXBlID09PSB0dC5qc3hUYWdFbmRcbiAgICApIHtcbiAgICAgIG5vblR5cGVJZGVudGlmaWVycy5hZGQoanN4UHJhZ21hSW5mby5iYXNlKTtcbiAgICAgIG5vblR5cGVJZGVudGlmaWVycy5hZGQoanN4UHJhZ21hSW5mby5mcmFnbWVudEJhc2UpO1xuICAgIH1cbiAgICBpZiAodG9rZW4udHlwZSA9PT0gdHQuanN4TmFtZSAmJiB0b2tlbi5pZGVudGlmaWVyUm9sZSA9PT0gSWRlbnRpZmllclJvbGUuQWNjZXNzKSB7XG4gICAgICBjb25zdCBpZGVudGlmaWVyTmFtZSA9IHRva2Vucy5pZGVudGlmaWVyTmFtZUZvclRva2VuKHRva2VuKTtcbiAgICAgIC8vIExvd2VyLWNhc2Ugc2luZ2xlLWNvbXBvbmVudCB0YWcgbmFtZXMgbGlrZSBcImRpdlwiIGRvbid0IGNvdW50LlxuICAgICAgaWYgKCFzdGFydHNXaXRoTG93ZXJDYXNlKGlkZW50aWZpZXJOYW1lKSB8fCB0b2tlbnMudG9rZW5zW2kgKyAxXS50eXBlID09PSBUb2tlblR5cGUuZG90KSB7XG4gICAgICAgIG5vblR5cGVJZGVudGlmaWVycy5hZGQodG9rZW5zLmlkZW50aWZpZXJOYW1lRm9yVG9rZW4odG9rZW4pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vblR5cGVJZGVudGlmaWVycztcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/getNonTypeIdentifiers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/getTSImportedNames.js":
/*!******************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/getTSImportedNames.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getTSImportedNames)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n/* harmony import */ var _getImportExportSpecifierInfo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getImportExportSpecifierInfo */ \"(ssr)/./node_modules/sucrase/dist/esm/util/getImportExportSpecifierInfo.js\");\n\n\n\n\n/**\n * Special case code to scan for imported names in ESM TypeScript. We need to do this so we can\n * properly get globals so we can compute shadowed globals.\n *\n * This is similar to logic in CJSImportProcessor, but trimmed down to avoid logic with CJS\n * replacement and flow type imports.\n */\nfunction getTSImportedNames(tokens) {\n  const importedNames = new Set();\n  for (let i = 0; i < tokens.tokens.length; i++) {\n    if (\n      tokens.matches1AtIndex(i, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._import) &&\n      !tokens.matches3AtIndex(i, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType._import, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.eq)\n    ) {\n      collectNamesForImport(tokens, i, importedNames);\n    }\n  }\n  return importedNames;\n}\n\nfunction collectNamesForImport(\n  tokens,\n  index,\n  importedNames,\n) {\n  index++;\n\n  if (tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.parenL)) {\n    // Dynamic import, so nothing to do\n    return;\n  }\n\n  if (tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.name)) {\n    importedNames.add(tokens.identifierNameAtIndex(index));\n    index++;\n    if (tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.comma)) {\n      index++;\n    }\n  }\n\n  if (tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.star)) {\n    // * as\n    index += 2;\n    importedNames.add(tokens.identifierNameAtIndex(index));\n    index++;\n  }\n\n  if (tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.braceL)) {\n    index++;\n    collectNamesForNamedImport(tokens, index, importedNames);\n  }\n}\n\nfunction collectNamesForNamedImport(\n  tokens,\n  index,\n  importedNames,\n) {\n  while (true) {\n    if (tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.braceR)) {\n      return;\n    }\n\n    const specifierInfo = (0,_getImportExportSpecifierInfo__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(tokens, index);\n    index = specifierInfo.endIndex;\n    if (!specifierInfo.isType) {\n      importedNames.add(specifierInfo.rightName);\n    }\n\n    if (tokens.matches2AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.comma, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.braceR)) {\n      return;\n    } else if (tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.braceR)) {\n      return;\n    } else if (tokens.matches1AtIndex(index, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.comma)) {\n      index++;\n    } else {\n      throw new Error(`Unexpected token: ${JSON.stringify(tokens.tokens[index])}`);\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2dldFRTSW1wb3J0ZWROYW1lcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEQ7O0FBRWdCOztBQUUxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlO0FBQ2Y7QUFDQSxrQkFBa0IsMEJBQTBCO0FBQzVDO0FBQ0EsZ0NBQWdDLDhEQUFFO0FBQ2xDLGlDQUFpQyw4REFBRSxVQUFVLDhEQUFFLE9BQU8sOERBQUU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0MsOERBQUU7QUFDdEM7QUFDQTtBQUNBOztBQUVBLG9DQUFvQyw4REFBRTtBQUN0QztBQUNBO0FBQ0Esc0NBQXNDLDhEQUFFO0FBQ3hDO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0MsOERBQUU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0MsOERBQUU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDhEQUFFO0FBQ3hDO0FBQ0E7O0FBRUEsMEJBQTBCLHlFQUE0QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0MsOERBQUUsUUFBUSw4REFBRTtBQUNsRDtBQUNBLE1BQU0sdUNBQXVDLDhEQUFFO0FBQy9DO0FBQ0EsTUFBTSx1Q0FBdUMsOERBQUU7QUFDL0M7QUFDQSxNQUFNO0FBQ04sMkNBQTJDLHFDQUFxQztBQUNoRjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1saWJyYXJ5LWRvY3MvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2dldFRTSW1wb3J0ZWROYW1lcy5qcz8zOTYyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VG9rZW5UeXBlIGFzIHR0fSBmcm9tIFwiLi4vcGFyc2VyL3Rva2VuaXplci90eXBlc1wiO1xuXG5pbXBvcnQgZ2V0SW1wb3J0RXhwb3J0U3BlY2lmaWVySW5mbyBmcm9tIFwiLi9nZXRJbXBvcnRFeHBvcnRTcGVjaWZpZXJJbmZvXCI7XG5cbi8qKlxuICogU3BlY2lhbCBjYXNlIGNvZGUgdG8gc2NhbiBmb3IgaW1wb3J0ZWQgbmFtZXMgaW4gRVNNIFR5cGVTY3JpcHQuIFdlIG5lZWQgdG8gZG8gdGhpcyBzbyB3ZSBjYW5cbiAqIHByb3Blcmx5IGdldCBnbG9iYWxzIHNvIHdlIGNhbiBjb21wdXRlIHNoYWRvd2VkIGdsb2JhbHMuXG4gKlxuICogVGhpcyBpcyBzaW1pbGFyIHRvIGxvZ2ljIGluIENKU0ltcG9ydFByb2Nlc3NvciwgYnV0IHRyaW1tZWQgZG93biB0byBhdm9pZCBsb2dpYyB3aXRoIENKU1xuICogcmVwbGFjZW1lbnQgYW5kIGZsb3cgdHlwZSBpbXBvcnRzLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUU0ltcG9ydGVkTmFtZXModG9rZW5zKSB7XG4gIGNvbnN0IGltcG9ydGVkTmFtZXMgPSBuZXcgU2V0KCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLnRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChcbiAgICAgIHRva2Vucy5tYXRjaGVzMUF0SW5kZXgoaSwgdHQuX2ltcG9ydCkgJiZcbiAgICAgICF0b2tlbnMubWF0Y2hlczNBdEluZGV4KGksIHR0Ll9pbXBvcnQsIHR0Lm5hbWUsIHR0LmVxKVxuICAgICkge1xuICAgICAgY29sbGVjdE5hbWVzRm9ySW1wb3J0KHRva2VucywgaSwgaW1wb3J0ZWROYW1lcyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbXBvcnRlZE5hbWVzO1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0TmFtZXNGb3JJbXBvcnQoXG4gIHRva2VucyxcbiAgaW5kZXgsXG4gIGltcG9ydGVkTmFtZXMsXG4pIHtcbiAgaW5kZXgrKztcblxuICBpZiAodG9rZW5zLm1hdGNoZXMxQXRJbmRleChpbmRleCwgdHQucGFyZW5MKSkge1xuICAgIC8vIER5bmFtaWMgaW1wb3J0LCBzbyBub3RoaW5nIHRvIGRvXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRva2Vucy5tYXRjaGVzMUF0SW5kZXgoaW5kZXgsIHR0Lm5hbWUpKSB7XG4gICAgaW1wb3J0ZWROYW1lcy5hZGQodG9rZW5zLmlkZW50aWZpZXJOYW1lQXRJbmRleChpbmRleCkpO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKHRva2Vucy5tYXRjaGVzMUF0SW5kZXgoaW5kZXgsIHR0LmNvbW1hKSkge1xuICAgICAgaW5kZXgrKztcbiAgICB9XG4gIH1cblxuICBpZiAodG9rZW5zLm1hdGNoZXMxQXRJbmRleChpbmRleCwgdHQuc3RhcikpIHtcbiAgICAvLyAqIGFzXG4gICAgaW5kZXggKz0gMjtcbiAgICBpbXBvcnRlZE5hbWVzLmFkZCh0b2tlbnMuaWRlbnRpZmllck5hbWVBdEluZGV4KGluZGV4KSk7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICh0b2tlbnMubWF0Y2hlczFBdEluZGV4KGluZGV4LCB0dC5icmFjZUwpKSB7XG4gICAgaW5kZXgrKztcbiAgICBjb2xsZWN0TmFtZXNGb3JOYW1lZEltcG9ydCh0b2tlbnMsIGluZGV4LCBpbXBvcnRlZE5hbWVzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb2xsZWN0TmFtZXNGb3JOYW1lZEltcG9ydChcbiAgdG9rZW5zLFxuICBpbmRleCxcbiAgaW1wb3J0ZWROYW1lcyxcbikge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmICh0b2tlbnMubWF0Y2hlczFBdEluZGV4KGluZGV4LCB0dC5icmFjZVIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc3BlY2lmaWVySW5mbyA9IGdldEltcG9ydEV4cG9ydFNwZWNpZmllckluZm8odG9rZW5zLCBpbmRleCk7XG4gICAgaW5kZXggPSBzcGVjaWZpZXJJbmZvLmVuZEluZGV4O1xuICAgIGlmICghc3BlY2lmaWVySW5mby5pc1R5cGUpIHtcbiAgICAgIGltcG9ydGVkTmFtZXMuYWRkKHNwZWNpZmllckluZm8ucmlnaHROYW1lKTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW5zLm1hdGNoZXMyQXRJbmRleChpbmRleCwgdHQuY29tbWEsIHR0LmJyYWNlUikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKHRva2Vucy5tYXRjaGVzMUF0SW5kZXgoaW5kZXgsIHR0LmJyYWNlUikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKHRva2Vucy5tYXRjaGVzMUF0SW5kZXgoaW5kZXgsIHR0LmNvbW1hKSkge1xuICAgICAgaW5kZXgrKztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHRva2VuOiAke0pTT04uc3RyaW5naWZ5KHRva2Vucy50b2tlbnNbaW5kZXhdKX1gKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/getTSImportedNames.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/isAsyncOperation.js":
/*!****************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/isAsyncOperation.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ isAsyncOperation)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n\n\n\n/**\n * Determine whether this optional chain or nullish coalescing operation has any await statements in\n * it. If so, we'll need to transpile to an async operation.\n *\n * We compute this by walking the length of the operation and returning true if we see an await\n * keyword used as a real await (rather than an object key or property access). Nested optional\n * chain/nullish operations need to be tracked but don't silence await, but a nested async function\n * (or any other nested scope) will make the await not count.\n */\nfunction isAsyncOperation(tokens) {\n  let index = tokens.currentIndex();\n  let depth = 0;\n  const startToken = tokens.currentToken();\n  do {\n    const token = tokens.tokens[index];\n    if (token.isOptionalChainStart) {\n      depth++;\n    }\n    if (token.isOptionalChainEnd) {\n      depth--;\n    }\n    depth += token.numNullishCoalesceStarts;\n    depth -= token.numNullishCoalesceEnds;\n\n    if (\n      token.contextualKeyword === _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._await &&\n      token.identifierRole == null &&\n      token.scopeDepth === startToken.scopeDepth\n    ) {\n      return true;\n    }\n    index += 1;\n  } while (depth > 0 && index < tokens.tokens.length);\n  return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2lzQXN5bmNPcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0Q7OztBQUcvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDLHlFQUFpQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3V0aWwvaXNBc3luY09wZXJhdGlvbi5qcz9lZTA0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29udGV4dHVhbEtleXdvcmR9IGZyb20gXCIuLi9wYXJzZXIvdG9rZW5pemVyL2tleXdvcmRzXCI7XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGlzIG9wdGlvbmFsIGNoYWluIG9yIG51bGxpc2ggY29hbGVzY2luZyBvcGVyYXRpb24gaGFzIGFueSBhd2FpdCBzdGF0ZW1lbnRzIGluXG4gKiBpdC4gSWYgc28sIHdlJ2xsIG5lZWQgdG8gdHJhbnNwaWxlIHRvIGFuIGFzeW5jIG9wZXJhdGlvbi5cbiAqXG4gKiBXZSBjb21wdXRlIHRoaXMgYnkgd2Fsa2luZyB0aGUgbGVuZ3RoIG9mIHRoZSBvcGVyYXRpb24gYW5kIHJldHVybmluZyB0cnVlIGlmIHdlIHNlZSBhbiBhd2FpdFxuICoga2V5d29yZCB1c2VkIGFzIGEgcmVhbCBhd2FpdCAocmF0aGVyIHRoYW4gYW4gb2JqZWN0IGtleSBvciBwcm9wZXJ0eSBhY2Nlc3MpLiBOZXN0ZWQgb3B0aW9uYWxcbiAqIGNoYWluL251bGxpc2ggb3BlcmF0aW9ucyBuZWVkIHRvIGJlIHRyYWNrZWQgYnV0IGRvbid0IHNpbGVuY2UgYXdhaXQsIGJ1dCBhIG5lc3RlZCBhc3luYyBmdW5jdGlvblxuICogKG9yIGFueSBvdGhlciBuZXN0ZWQgc2NvcGUpIHdpbGwgbWFrZSB0aGUgYXdhaXQgbm90IGNvdW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0FzeW5jT3BlcmF0aW9uKHRva2Vucykge1xuICBsZXQgaW5kZXggPSB0b2tlbnMuY3VycmVudEluZGV4KCk7XG4gIGxldCBkZXB0aCA9IDA7XG4gIGNvbnN0IHN0YXJ0VG9rZW4gPSB0b2tlbnMuY3VycmVudFRva2VuKCk7XG4gIGRvIHtcbiAgICBjb25zdCB0b2tlbiA9IHRva2Vucy50b2tlbnNbaW5kZXhdO1xuICAgIGlmICh0b2tlbi5pc09wdGlvbmFsQ2hhaW5TdGFydCkge1xuICAgICAgZGVwdGgrKztcbiAgICB9XG4gICAgaWYgKHRva2VuLmlzT3B0aW9uYWxDaGFpbkVuZCkge1xuICAgICAgZGVwdGgtLTtcbiAgICB9XG4gICAgZGVwdGggKz0gdG9rZW4ubnVtTnVsbGlzaENvYWxlc2NlU3RhcnRzO1xuICAgIGRlcHRoIC09IHRva2VuLm51bU51bGxpc2hDb2FsZXNjZUVuZHM7XG5cbiAgICBpZiAoXG4gICAgICB0b2tlbi5jb250ZXh0dWFsS2V5d29yZCA9PT0gQ29udGV4dHVhbEtleXdvcmQuX2F3YWl0ICYmXG4gICAgICB0b2tlbi5pZGVudGlmaWVyUm9sZSA9PSBudWxsICYmXG4gICAgICB0b2tlbi5zY29wZURlcHRoID09PSBzdGFydFRva2VuLnNjb3BlRGVwdGhcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpbmRleCArPSAxO1xuICB9IHdoaWxlIChkZXB0aCA+IDAgJiYgaW5kZXggPCB0b2tlbnMudG9rZW5zLmxlbmd0aCk7XG4gIHJldHVybiBmYWxzZTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/isAsyncOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/isExportFrom.js":
/*!************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/isExportFrom.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ isExportFrom)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n\n\n\n\n/**\n * Starting at `export {`, look ahead and return `true` if this is an\n * `export {...} from` statement and `false` if this is a plain multi-export.\n */\nfunction isExportFrom(tokens) {\n  let closeBraceIndex = tokens.currentIndex();\n  while (!tokens.matches1AtIndex(closeBraceIndex, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceR)) {\n    closeBraceIndex++;\n  }\n  return (\n    tokens.matchesContextualAtIndex(closeBraceIndex + 1, _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._from) &&\n    tokens.matches1AtIndex(closeBraceIndex + 2, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.string)\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2lzRXhwb3J0RnJvbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0Q7QUFDTDs7O0FBRzFEO0FBQ0Esd0JBQXdCO0FBQ3hCLFlBQVksS0FBSztBQUNqQjtBQUNlO0FBQ2Y7QUFDQSxrREFBa0QsOERBQUU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EseURBQXlELHlFQUFpQjtBQUMxRSxnREFBZ0QsOERBQUU7QUFDbEQ7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3V0aWwvaXNFeHBvcnRGcm9tLmpzPzI0YzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb250ZXh0dWFsS2V5d29yZH0gZnJvbSBcIi4uL3BhcnNlci90b2tlbml6ZXIva2V5d29yZHNcIjtcbmltcG9ydCB7VG9rZW5UeXBlIGFzIHR0fSBmcm9tIFwiLi4vcGFyc2VyL3Rva2VuaXplci90eXBlc1wiO1xuXG5cbi8qKlxuICogU3RhcnRpbmcgYXQgYGV4cG9ydCB7YCwgbG9vayBhaGVhZCBhbmQgcmV0dXJuIGB0cnVlYCBpZiB0aGlzIGlzIGFuXG4gKiBgZXhwb3J0IHsuLi59IGZyb21gIHN0YXRlbWVudCBhbmQgYGZhbHNlYCBpZiB0aGlzIGlzIGEgcGxhaW4gbXVsdGktZXhwb3J0LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0V4cG9ydEZyb20odG9rZW5zKSB7XG4gIGxldCBjbG9zZUJyYWNlSW5kZXggPSB0b2tlbnMuY3VycmVudEluZGV4KCk7XG4gIHdoaWxlICghdG9rZW5zLm1hdGNoZXMxQXRJbmRleChjbG9zZUJyYWNlSW5kZXgsIHR0LmJyYWNlUikpIHtcbiAgICBjbG9zZUJyYWNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gKFxuICAgIHRva2Vucy5tYXRjaGVzQ29udGV4dHVhbEF0SW5kZXgoY2xvc2VCcmFjZUluZGV4ICsgMSwgQ29udGV4dHVhbEtleXdvcmQuX2Zyb20pICYmXG4gICAgdG9rZW5zLm1hdGNoZXMxQXRJbmRleChjbG9zZUJyYWNlSW5kZXggKyAyLCB0dC5zdHJpbmcpXG4gICk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/isExportFrom.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/isIdentifier.js":
/*!************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/isIdentifier.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ isIdentifier)\n/* harmony export */ });\n/* harmony import */ var _parser_util_identifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/util/identifier */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/util/identifier.js\");\n\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar\n// Hard-code a list of reserved words rather than trying to use keywords or contextual keywords\n// from the parser, since currently there are various exceptions, like `package` being reserved\n// but unused and various contextual keywords being reserved. Note that we assume that all code\n// compiled by Sucrase is in a module, so strict mode words and await are all considered reserved\n// here.\nconst RESERVED_WORDS = new Set([\n  // Reserved keywords as of ECMAScript 2015\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"class\",\n  \"const\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"delete\",\n  \"do\",\n  \"else\",\n  \"export\",\n  \"extends\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"import\",\n  \"in\",\n  \"instanceof\",\n  \"new\",\n  \"return\",\n  \"super\",\n  \"switch\",\n  \"this\",\n  \"throw\",\n  \"try\",\n  \"typeof\",\n  \"var\",\n  \"void\",\n  \"while\",\n  \"with\",\n  \"yield\",\n  // Future reserved keywords\n  \"enum\",\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"await\",\n  // Literals that cannot be used as identifiers\n  \"false\",\n  \"null\",\n  \"true\",\n]);\n\n/**\n * Determine if the given name is a legal variable name.\n *\n * This is needed when transforming TypeScript enums; if an enum key is a valid\n * variable name, it might be referenced later in the enum, so we need to\n * declare a variable.\n */\nfunction isIdentifier(name) {\n  if (name.length === 0) {\n    return false;\n  }\n  if (!_parser_util_identifier__WEBPACK_IMPORTED_MODULE_0__.IS_IDENTIFIER_START[name.charCodeAt(0)]) {\n    return false;\n  }\n  for (let i = 1; i < name.length; i++) {\n    if (!_parser_util_identifier__WEBPACK_IMPORTED_MODULE_0__.IS_IDENTIFIER_CHAR[name.charCodeAt(i)]) {\n      return false;\n    }\n  }\n  return !RESERVED_WORDS.has(name);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2lzSWRlbnRpZmllci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRjs7QUFFbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLE9BQU8sd0VBQW1CO0FBQzFCO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DLFNBQVMsdUVBQWtCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1saWJyYXJ5LWRvY3MvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL2lzSWRlbnRpZmllci5qcz8zMjk0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SVNfSURFTlRJRklFUl9DSEFSLCBJU19JREVOVElGSUVSX1NUQVJUfSBmcm9tIFwiLi4vcGFyc2VyL3V0aWwvaWRlbnRpZmllclwiO1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9MZXhpY2FsX2dyYW1tYXJcbi8vIEhhcmQtY29kZSBhIGxpc3Qgb2YgcmVzZXJ2ZWQgd29yZHMgcmF0aGVyIHRoYW4gdHJ5aW5nIHRvIHVzZSBrZXl3b3JkcyBvciBjb250ZXh0dWFsIGtleXdvcmRzXG4vLyBmcm9tIHRoZSBwYXJzZXIsIHNpbmNlIGN1cnJlbnRseSB0aGVyZSBhcmUgdmFyaW91cyBleGNlcHRpb25zLCBsaWtlIGBwYWNrYWdlYCBiZWluZyByZXNlcnZlZFxuLy8gYnV0IHVudXNlZCBhbmQgdmFyaW91cyBjb250ZXh0dWFsIGtleXdvcmRzIGJlaW5nIHJlc2VydmVkLiBOb3RlIHRoYXQgd2UgYXNzdW1lIHRoYXQgYWxsIGNvZGVcbi8vIGNvbXBpbGVkIGJ5IFN1Y3Jhc2UgaXMgaW4gYSBtb2R1bGUsIHNvIHN0cmljdCBtb2RlIHdvcmRzIGFuZCBhd2FpdCBhcmUgYWxsIGNvbnNpZGVyZWQgcmVzZXJ2ZWRcbi8vIGhlcmUuXG5jb25zdCBSRVNFUlZFRF9XT1JEUyA9IG5ldyBTZXQoW1xuICAvLyBSZXNlcnZlZCBrZXl3b3JkcyBhcyBvZiBFQ01BU2NyaXB0IDIwMTVcbiAgXCJicmVha1wiLFxuICBcImNhc2VcIixcbiAgXCJjYXRjaFwiLFxuICBcImNsYXNzXCIsXG4gIFwiY29uc3RcIixcbiAgXCJjb250aW51ZVwiLFxuICBcImRlYnVnZ2VyXCIsXG4gIFwiZGVmYXVsdFwiLFxuICBcImRlbGV0ZVwiLFxuICBcImRvXCIsXG4gIFwiZWxzZVwiLFxuICBcImV4cG9ydFwiLFxuICBcImV4dGVuZHNcIixcbiAgXCJmaW5hbGx5XCIsXG4gIFwiZm9yXCIsXG4gIFwiZnVuY3Rpb25cIixcbiAgXCJpZlwiLFxuICBcImltcG9ydFwiLFxuICBcImluXCIsXG4gIFwiaW5zdGFuY2VvZlwiLFxuICBcIm5ld1wiLFxuICBcInJldHVyblwiLFxuICBcInN1cGVyXCIsXG4gIFwic3dpdGNoXCIsXG4gIFwidGhpc1wiLFxuICBcInRocm93XCIsXG4gIFwidHJ5XCIsXG4gIFwidHlwZW9mXCIsXG4gIFwidmFyXCIsXG4gIFwidm9pZFwiLFxuICBcIndoaWxlXCIsXG4gIFwid2l0aFwiLFxuICBcInlpZWxkXCIsXG4gIC8vIEZ1dHVyZSByZXNlcnZlZCBrZXl3b3Jkc1xuICBcImVudW1cIixcbiAgXCJpbXBsZW1lbnRzXCIsXG4gIFwiaW50ZXJmYWNlXCIsXG4gIFwibGV0XCIsXG4gIFwicGFja2FnZVwiLFxuICBcInByaXZhdGVcIixcbiAgXCJwcm90ZWN0ZWRcIixcbiAgXCJwdWJsaWNcIixcbiAgXCJzdGF0aWNcIixcbiAgXCJhd2FpdFwiLFxuICAvLyBMaXRlcmFscyB0aGF0IGNhbm5vdCBiZSB1c2VkIGFzIGlkZW50aWZpZXJzXG4gIFwiZmFsc2VcIixcbiAgXCJudWxsXCIsXG4gIFwidHJ1ZVwiLFxuXSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHRoZSBnaXZlbiBuYW1lIGlzIGEgbGVnYWwgdmFyaWFibGUgbmFtZS5cbiAqXG4gKiBUaGlzIGlzIG5lZWRlZCB3aGVuIHRyYW5zZm9ybWluZyBUeXBlU2NyaXB0IGVudW1zOyBpZiBhbiBlbnVtIGtleSBpcyBhIHZhbGlkXG4gKiB2YXJpYWJsZSBuYW1lLCBpdCBtaWdodCBiZSByZWZlcmVuY2VkIGxhdGVyIGluIHRoZSBlbnVtLCBzbyB3ZSBuZWVkIHRvXG4gKiBkZWNsYXJlIGEgdmFyaWFibGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzSWRlbnRpZmllcihuYW1lKSB7XG4gIGlmIChuYW1lLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIUlTX0lERU5USUZJRVJfU1RBUlRbbmFtZS5jaGFyQ29kZUF0KDApXSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGxldCBpID0gMTsgaSA8IG5hbWUubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIUlTX0lERU5USUZJRVJfQ0hBUltuYW1lLmNoYXJDb2RlQXQoaSldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiAhUkVTRVJWRURfV09SRFMuaGFzKG5hbWUpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/isIdentifier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/removeMaybeImportAttributes.js":
/*!***************************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/removeMaybeImportAttributes.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   removeMaybeImportAttributes: () => (/* binding */ removeMaybeImportAttributes)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/keywords */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js\");\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n\n\n\n\n/**\n * Starting at a potential `with` or (legacy) `assert` token, remove the import\n * attributes if they exist.\n */\nfunction removeMaybeImportAttributes(tokens) {\n  if (\n    tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType._with, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL) ||\n    (tokens.matches2(_parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.name, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.braceL) && tokens.matchesContextual(_parser_tokenizer_keywords__WEBPACK_IMPORTED_MODULE_0__.ContextualKeyword._assert))\n  ) {\n    // assert\n    tokens.removeToken();\n    // {\n    tokens.removeToken();\n    tokens.removeBalancedCode();\n    // }\n    tokens.removeToken();\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL3JlbW92ZU1heWJlSW1wb3J0QXR0cmlidXRlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0Q7QUFDTDs7O0FBRzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG9CQUFvQiw4REFBRSxRQUFRLDhEQUFFO0FBQ2hDLHFCQUFxQiw4REFBRSxPQUFPLDhEQUFFLHFDQUFxQyx5RUFBaUI7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1saWJyYXJ5LWRvY3MvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL3JlbW92ZU1heWJlSW1wb3J0QXR0cmlidXRlcy5qcz9kMTkzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29udGV4dHVhbEtleXdvcmR9IGZyb20gXCIuLi9wYXJzZXIvdG9rZW5pemVyL2tleXdvcmRzXCI7XG5pbXBvcnQge1Rva2VuVHlwZSBhcyB0dH0gZnJvbSBcIi4uL3BhcnNlci90b2tlbml6ZXIvdHlwZXNcIjtcblxuXG4vKipcbiAqIFN0YXJ0aW5nIGF0IGEgcG90ZW50aWFsIGB3aXRoYCBvciAobGVnYWN5KSBgYXNzZXJ0YCB0b2tlbiwgcmVtb3ZlIHRoZSBpbXBvcnRcbiAqIGF0dHJpYnV0ZXMgaWYgdGhleSBleGlzdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZU1heWJlSW1wb3J0QXR0cmlidXRlcyh0b2tlbnMpIHtcbiAgaWYgKFxuICAgIHRva2Vucy5tYXRjaGVzMih0dC5fd2l0aCwgdHQuYnJhY2VMKSB8fFxuICAgICh0b2tlbnMubWF0Y2hlczIodHQubmFtZSwgdHQuYnJhY2VMKSAmJiB0b2tlbnMubWF0Y2hlc0NvbnRleHR1YWwoQ29udGV4dHVhbEtleXdvcmQuX2Fzc2VydCkpXG4gICkge1xuICAgIC8vIGFzc2VydFxuICAgIHRva2Vucy5yZW1vdmVUb2tlbigpO1xuICAgIC8vIHtcbiAgICB0b2tlbnMucmVtb3ZlVG9rZW4oKTtcbiAgICB0b2tlbnMucmVtb3ZlQmFsYW5jZWRDb2RlKCk7XG4gICAgLy8gfVxuICAgIHRva2Vucy5yZW1vdmVUb2tlbigpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/removeMaybeImportAttributes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sucrase/dist/esm/util/shouldElideDefaultExport.js":
/*!************************************************************************!*\
  !*** ./node_modules/sucrase/dist/esm/util/shouldElideDefaultExport.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ shouldElideDefaultExport)\n/* harmony export */ });\n/* harmony import */ var _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/tokenizer/types */ \"(ssr)/./node_modules/sucrase/dist/esm/parser/tokenizer/types.js\");\n\n\n\n\n/**\n * Common method sharing code between CJS and ESM cases, since they're the same here.\n */\nfunction shouldElideDefaultExport(\n  isTypeScriptTransformEnabled,\n  keepUnusedImports,\n  tokens,\n  declarationInfo,\n) {\n  if (!isTypeScriptTransformEnabled || keepUnusedImports) {\n    return false;\n  }\n  const exportToken = tokens.currentToken();\n  if (exportToken.rhsEndIndex == null) {\n    throw new Error(\"Expected non-null rhsEndIndex on export token.\");\n  }\n  // The export must be of the form `export default a` or `export default a;`.\n  const numTokens = exportToken.rhsEndIndex - tokens.currentIndex();\n  if (\n    numTokens !== 3 &&\n    !(numTokens === 4 && tokens.matches1AtIndex(exportToken.rhsEndIndex - 1, _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.semi))\n  ) {\n    return false;\n  }\n  const identifierToken = tokens.tokenAtRelativeIndex(2);\n  if (identifierToken.type !== _parser_tokenizer_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.name) {\n    return false;\n  }\n  const exportedName = tokens.identifierNameForToken(identifierToken);\n  return (\n    declarationInfo.typeDeclarations.has(exportedName) &&\n    !declarationInfo.valueDeclarations.has(exportedName)\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS91dGlsL3Nob3VsZEVsaWRlRGVmYXVsdEV4cG9ydC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwRDs7OztBQUkxRDtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RTtBQUM1RTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsOERBQUU7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsOERBQUU7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWxpYnJhcnktZG9jcy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL3V0aWwvc2hvdWxkRWxpZGVEZWZhdWx0RXhwb3J0LmpzPzA4NzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUb2tlblR5cGUgYXMgdHR9IGZyb20gXCIuLi9wYXJzZXIvdG9rZW5pemVyL3R5cGVzXCI7XG5cblxuXG4vKipcbiAqIENvbW1vbiBtZXRob2Qgc2hhcmluZyBjb2RlIGJldHdlZW4gQ0pTIGFuZCBFU00gY2FzZXMsIHNpbmNlIHRoZXkncmUgdGhlIHNhbWUgaGVyZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hvdWxkRWxpZGVEZWZhdWx0RXhwb3J0KFxuICBpc1R5cGVTY3JpcHRUcmFuc2Zvcm1FbmFibGVkLFxuICBrZWVwVW51c2VkSW1wb3J0cyxcbiAgdG9rZW5zLFxuICBkZWNsYXJhdGlvbkluZm8sXG4pIHtcbiAgaWYgKCFpc1R5cGVTY3JpcHRUcmFuc2Zvcm1FbmFibGVkIHx8IGtlZXBVbnVzZWRJbXBvcnRzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGV4cG9ydFRva2VuID0gdG9rZW5zLmN1cnJlbnRUb2tlbigpO1xuICBpZiAoZXhwb3J0VG9rZW4ucmhzRW5kSW5kZXggPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIG5vbi1udWxsIHJoc0VuZEluZGV4IG9uIGV4cG9ydCB0b2tlbi5cIik7XG4gIH1cbiAgLy8gVGhlIGV4cG9ydCBtdXN0IGJlIG9mIHRoZSBmb3JtIGBleHBvcnQgZGVmYXVsdCBhYCBvciBgZXhwb3J0IGRlZmF1bHQgYTtgLlxuICBjb25zdCBudW1Ub2tlbnMgPSBleHBvcnRUb2tlbi5yaHNFbmRJbmRleCAtIHRva2Vucy5jdXJyZW50SW5kZXgoKTtcbiAgaWYgKFxuICAgIG51bVRva2VucyAhPT0gMyAmJlxuICAgICEobnVtVG9rZW5zID09PSA0ICYmIHRva2Vucy5tYXRjaGVzMUF0SW5kZXgoZXhwb3J0VG9rZW4ucmhzRW5kSW5kZXggLSAxLCB0dC5zZW1pKSlcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGlkZW50aWZpZXJUb2tlbiA9IHRva2Vucy50b2tlbkF0UmVsYXRpdmVJbmRleCgyKTtcbiAgaWYgKGlkZW50aWZpZXJUb2tlbi50eXBlICE9PSB0dC5uYW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGV4cG9ydGVkTmFtZSA9IHRva2Vucy5pZGVudGlmaWVyTmFtZUZvclRva2VuKGlkZW50aWZpZXJUb2tlbik7XG4gIHJldHVybiAoXG4gICAgZGVjbGFyYXRpb25JbmZvLnR5cGVEZWNsYXJhdGlvbnMuaGFzKGV4cG9ydGVkTmFtZSkgJiZcbiAgICAhZGVjbGFyYXRpb25JbmZvLnZhbHVlRGVjbGFyYXRpb25zLmhhcyhleHBvcnRlZE5hbWUpXG4gICk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sucrase/dist/esm/util/shouldElideDefaultExport.js\n");

/***/ })

};
;